{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next-5.1.1/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/luffy.jpg","path":"images/luffy.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1498122884000},{"_id":"themes/hexo-theme-next-5.1.1/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1498120222000},{"_id":"themes/hexo-theme-next-5.1.1/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/_config.yml","hash":"24fc54ab8217261ec4a0dd4813584513f913a333","modified":1498125776000},{"_id":"themes/hexo-theme-next-5.1.1/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1498103951000},{"_id":"source/_discarded/新建文章.md","hash":"36cf39667b4379e9adfef6bc7486a922533f5cae","modified":1498116139000},{"_id":"source/_posts/ES6.md","hash":"bc391a2f49457c37b0e5b04981a9d81437444538","modified":1501640708000},{"_id":"source/_drafts/Vue-动态组件.md","hash":"855050143b7ea355575c0def1fa0fcfb847474a3","modified":1505216960000},{"_id":"source/_posts/hello-world.md","hash":"7d2f4c4cb95333ced2dcd6127f16806e8c259fdf","modified":1501640789000},{"_id":"source/_posts/mac-查看、修改文件权限的命令.md","hash":"3b4bfa57a5733fa6b0498dcdda24c610b426cd6f","modified":1509519175000},{"_id":"source/_posts/test.md","hash":"6471541707f64ba97c950a2b6c335f710bd065b3","modified":1501640735000},{"_id":"source/_posts/使用markdown自动生成Restfull风格的文档.md","hash":"60b83f29b7bcaa92d7adbb7ec470f35dd8615837","modified":1505217001000},{"_id":"source/_posts/如何管理好10万行代码的前端单页面应用.md","hash":"74bc11a287b21d4e700d2a1d2b33f16752b085b8","modified":1509518828000},{"_id":"source/about/index.md","hash":"e75efff91c23b42ccef0e0bcc59141d0145472bd","modified":1498123809000},{"_id":"source/archives/index.md","hash":"3f21ad4e3945c4fc1047309ae2c642e2d7daa8cc","modified":1498123259000},{"_id":"source/categories/index.md","hash":"9256c9416b7896bbe8be211d58120b82893e9d57","modified":1498121530000},{"_id":"source/images/pasted-1.png","hash":"b34fb63221652dfb225e2892c6000ca9a353811b","modified":1506667372000},{"_id":"source/tags/index.md","hash":"8aa828ff8b3a4cc42280bf8b9c86ef5ccad321da","modified":1498121490000},{"_id":"source/images/pasted-0.png","hash":"bf4385e0f02e7c49a6520ccc081da45dd868fb3e","modified":1506667119000},{"_id":"themes/hexo-theme-next-5.1.1/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_layout.swig","hash":"d8b8449f94edd8e13037ebdf4024463cbdf282fb","modified":1498120698000},{"_id":"themes/hexo-theme-next-5.1.1/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/.DS_Store","hash":"753e17d149ebec7458408c9a04234ebde96511f3","modified":1498120244000},{"_id":"themes/hexo-theme-next-5.1.1/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/luffy.jpg","hash":"cac035dbb522f0163804db9aa8d4b6c28e811271","modified":1456740769000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1498103951000},{"_id":"themes/hexo-theme-next-5.1.1/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1498103951000},{"_id":"public/search.xml","hash":"3c682e03fc55ee800d523a6a319623b2f5d1ee76","modified":1509519820822},{"_id":"public/archives/2017/index.html","hash":"cb9907479431f439e7e563a4ba3117b8cdaecfe2","modified":1509519820829},{"_id":"public/archives/2017/06/index.html","hash":"f039a831a474935d6960aa7ea2cc5dfee7dcc049","modified":1509519820829},{"_id":"public/archives/2017/09/index.html","hash":"3a2ed30b713e03ee5aceb92e15513a90b1be18e6","modified":1509519820830},{"_id":"public/archives/2017/11/index.html","hash":"bba6aabb067de7f59dbc5dd86625a63f5cf6f4a0","modified":1509519820830},{"_id":"public/categories/javaScript/index.html","hash":"2a8b07acca5b63361b91d7ae2a568d8c944c7485","modified":1509519820830},{"_id":"public/categories/编辑器/index.html","hash":"d775f2ff5cf843a33ffa82347122406b309ab755","modified":1509519820830},{"_id":"public/page/2/index.html","hash":"4e639a501ce4c59926d4ef7279dad9fcbb77bc2e","modified":1509519820830},{"_id":"public/tags/javaScript/index.html","hash":"8f18e4a521a9f31e16addf05dba4766759492437","modified":1509519820830},{"_id":"public/tags/sublime/index.html","hash":"37501ca71560f6ec7936913958390bab897f1b5a","modified":1509519820830},{"_id":"public/tags/node/index.html","hash":"adc88a910c79ca3ccce352afb1fe400fd6dbbf6f","modified":1509519820830},{"_id":"public/tags/nvm/index.html","hash":"3eec685272fed5d0de968dfe1f385b24352f1a78","modified":1509519820830},{"_id":"public/404.html","hash":"1e30cec51f479d139e35375796ec31622454007d","modified":1509519820848},{"_id":"public/about/index.html","hash":"69d285e0d49dde261452b8ddf4a6b274c3076e62","modified":1509519820848},{"_id":"public/archives/index.html","hash":"cc87b504dcc0c52c59d34ed176c6b709b90e0ed9","modified":1509519820848},{"_id":"public/categories/index.html","hash":"9d87ba260d34c195661d31a86a4d33b8dfbc42d8","modified":1509519820848},{"_id":"public/tags/index.html","hash":"59018f55ba91248778706d369d066b9b1f8c8f2d","modified":1509519820848},{"_id":"public/mac-查看、修改文件权限的命令/index.html","hash":"f612a92d24c7b742ef2b5d71e28641f62afa4873","modified":1509519820848},{"_id":"public/如何管理好10万行代码的前端单页面应用/index.html","hash":"4170c45cfc8d93177f65f930c519149b4a701e06","modified":1509519820848},{"_id":"public/使用markdown自动生成Restfull风格的文档/index.html","hash":"9a81879913a78823b180fbee4c6738202391704e","modified":1509519820848},{"_id":"public/ES6/index.html","hash":"be6c19121d4c0860fd9bfb01d8da634b9342f2d2","modified":1509519820848},{"_id":"public/test/index.html","hash":"745720bb0c4835fb30569a5b9d0701ce95969824","modified":1509519820848},{"_id":"public/hello-world/index.html","hash":"cf13089f18c4c9c2340a3c5f86eb96c020640e9d","modified":1509519820848},{"_id":"public/index.html","hash":"918254ce0812c709eb1ea0c78e9e03d35a7ec06f","modified":1509519820848},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1509519820864},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1509519820864},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509519820864}],"Category":[{"name":"javaScript","_id":"cj9gp4int00097wu54vgvzqfr"},{"name":"编辑器","_id":"cj9gp4io2000e7wu5sahayzny"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-06-22T09:14:44.000Z","updated":"2017-06-22T09:14:44.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj9gp4ie300007wu5301h2jxi","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"about","date":"2017-06-22T03:38:15.000Z","_content":"## 个人简介：\n * ao\n * web前端\n * 北京\n * tvrrdfn@126.com\n\n## 关于本站：\n * hexo\n * Next主题\n * 托管于Github\n\n## 其他流言：\n * 如有雷同，纯属巧合","source":"about/index.md","raw":"title: about\ndate: 2017-06-22 11:38:15\n---\n## 个人简介：\n * ao\n * web前端\n * 北京\n * tvrrdfn@126.com\n\n## 关于本站：\n * hexo\n * Next主题\n * 托管于Github\n\n## 其他流言：\n * 如有雷同，纯属巧合","updated":"2017-06-22T09:30:09.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj9gp4imv00027wu5ui6o7v71","content":"<h2 id=\"个人简介：\"><a href=\"#个人简介：\" class=\"headerlink\" title=\"个人简介：\"></a>个人简介：</h2><ul>\n<li>ao</li>\n<li>web前端</li>\n<li>北京</li>\n<li>tvrrdfn@126.com</li>\n</ul>\n<h2 id=\"关于本站：\"><a href=\"#关于本站：\" class=\"headerlink\" title=\"关于本站：\"></a>关于本站：</h2><ul>\n<li>hexo</li>\n<li>Next主题</li>\n<li>托管于Github</li>\n</ul>\n<h2 id=\"其他流言：\"><a href=\"#其他流言：\" class=\"headerlink\" title=\"其他流言：\"></a>其他流言：</h2><ul>\n<li>如有雷同，纯属巧合</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人简介：\"><a href=\"#个人简介：\" class=\"headerlink\" title=\"个人简介：\"></a>个人简介：</h2><ul>\n<li>ao</li>\n<li>web前端</li>\n<li>北京</li>\n<li>tvrrdfn@126.com</li>\n</ul>\n<h2 id=\"关于本站：\"><a href=\"#关于本站：\" class=\"headerlink\" title=\"关于本站：\"></a>关于本站：</h2><ul>\n<li>hexo</li>\n<li>Next主题</li>\n<li>托管于Github</li>\n</ul>\n<h2 id=\"其他流言：\"><a href=\"#其他流言：\" class=\"headerlink\" title=\"其他流言：\"></a>其他流言：</h2><ul>\n<li>如有雷同，纯属巧合</li>\n</ul>\n"},{"title":"archives","date":"2017-06-22T09:20:39.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2017-06-22 17:20:39\ntype: archives\n---\n","updated":"2017-06-22T09:20:59.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cj9gp4imz00047wu52rnx5hi0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-06-22T08:51:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-22 16:51:57\ntype: \"categories\"\n---\n","updated":"2017-06-22T08:52:10.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj9gp4ind00067wu5tkghnz9b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-22T08:50:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-22 16:50:29\ntype: \"tags\"\n---\n","updated":"2017-06-22T08:51:30.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj9gp4ins00087wu5fd4gi0vr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ES6新特性列表","author":"Ao","date":"2017-06-23T09:20:28.000Z","_content":"相比ES5，ES6提供了太多的更新，简单说来，主要为以下方面（大家可以依据自己不算清晰的点选择性查看本文）：\n\n- Arrows,箭头函数，\n- Classes，类\n- Enhanced object literals，增强的对象字面值\n- Template strings：模板字符串\n- Destructuring：解构\n- Default + rest + spread：参数默认值，rest参数,扩展运算符\n- Let + const:命名声明的新方式\n- Iterators + for..of：遍历器\n- Generators：生成器\n- Unicode：更广泛的编码支持\n- Modules：语言层面上支持的模块机制\n- Module loaders：模块加载器\n<!--more-->\n- Map + set + weakmap + weakset：新的数据结构\n- Proxies：代理器\n- Symbols：新的基本类型，独一无二的值\n- Subclassable built-ins：类的继承\n- Promises：\n- Math + number + string + array + object apis：拓展了一些内置对象的方法\n- Binary and octal literals：二进制八进制字面量\n- Reflect api：操作对象的新api\n- Tail calls:尾调用\n## Arrows箭头函数\n箭头函数使用类似于=>这样的语法定义函数，支持表达式模式和语句模式，不过其最大特点在于和父作用域具有一样的this。我们知道普通函数的this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。使用箭头函数时再也不用担心this跳来跳去了。\n此外如果箭头函数如果定义在另一个函数里面，箭头函数会共享它父函数的arguments变量。\n```javascript\n// 表达式模式箭头函数\nvar odds = evens.map(v => v + 1);\nvar nums = evens.map((v, i) => v + i);\nvar pairs = evens.map(v => ({even: v, odd: v + 1}));\n\n// 语句模式箭头函数\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// 和父作用域具有相同的this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(this._name + \" knows \" + f));\n  }\n}\n\nfunction square() {\n  let example = () => {\n    let numbers = [];\n    for (let number of arguments) {\n      numbers.push(number * number);\n    }\n\n    return numbers;\n  };\n\n  return example();\n}\n\nsquare(2, 4, 7.5, 8, 11.5, 21); // returns: [4, 16, 56.25, 64, 132.25, 441]\n```\n## Classes\nJavaScript中其实并不存在真正的类，ES6的类其实是基于原型链模拟面向对象的一种语法糖。其本质上可以看做是构造函数的另一种写法。\n与真的类一样，它支持super继承，实例，静态方法和constructor方法。\n如果你也使用React，工作中定义模块时一定没少写过class A extends React.Component{}吧。\n```javascript\n// 定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n// 通过extends关键字实现继承\nclass SkinnedMesh extends THREE.Mesh {\n  //constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。\n  //一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。\n  constructor(geometry, materials) {\n    // super表示父类的构造函数，用来新建父类的this对象,\n    // 子类必须在constructor方法中调用super方法，否则新建实例时会报错。如果不调用super方法，子类就得不到this对象。\n    super(geometry, materials);\n\n    //在构造方法中绑定this,可以防止实例找不到this\n    this.idMatrix = SkinnedMesh.defaultMatrix();\n    this.bones = [];\n    this.boneMatrices = [];\n    //...\n  }\n  \n  // 非定义在this上的方法都会被直接定义在原型链上\n  update(camera) {\n    //...\n    // super在此处作为对象，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n    super.update();\n  }\n  // 可以使用get和set关键字，对某个属性设置存值函数和取值函数\n  get boneCount() {\n  // 类的方法内部如果含有this，它默认指向类的实例\n    return this.bones.length;\n  }\n  set matrixType(matrixType) {\n    this.idMatrix = SkinnedMesh[matrixType]();\n  }\n  \n  // 加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n  static defaultMatrix() {\n    return new THREE.Matrix4();\n  }\n}\n\n// 类的所有实例共享一个原型对象\nlet skin = new SkinnedMesh();\n// 静态方法需要直接通过类调用\nSkinnedMesh.defaultMatrix()\n```\n## 对象的拓展\nES6中对象的使用方法得以拓展，主要包括以下几点：\n\n- 属性和方法可以简洁表示；\n- 允许以表达式的模式定义属性名；\n- 可以通过__proto__读取或设置当前对象的prototype对象;\n- 使用Object.is({},{})判断两个对象是否完全相对，类似于===;\n- Object.assign(target, source1, source2)合并对象；（浅拷贝）\n```javascript\nvar obj = {\n    // __proto__用以设置当前对象的prototype对象，不推荐使用，推荐使用Object.setPrototypeOf() \n    __proto__: theProtoObj,\n    //‘handler:handler’可简写为handler（只需要写变量名就可以实现变量名为变量名，变量值为属性值）\n    handler,\n    // 简写在定义方法的时候同样有效\n    toString() {\n     // Super calls\n     return \"d \" + super.toString();\n    },\n    // 方括号内的表达式用以计算属性名\n    [ 'prop_' + (() => 42)() ]: 42\n};\n```\n## 模板字符串\n模板字符串是一种组合字符串的语法糖，其使用类似于Perl,Python等语言的字符串修改方法类似，它的出现让我们拼合字符串时方便多了。目前相互中几乎所有字符串的拼接都用这个了，异常方便。\n\n模板字符串定义在两个反撇号中；\n在模板字符串中可以直接换行，格式会得以保留；\n通过${}可以很方便的在模板字符串中添加变量；\n```javascript\n// 把字符串放在``(注意不是引号)中就可以使用\n`In JavaScript '\\n' is a line-feed.`\n\n// 模板字符串保留了换行\n`In JavaScript this is\n not legal.`\n\n// 在字符串中添加变量的方法，变量直接放在${}中即可\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n// 拼合请求时异常方便了\nPOST`http://foo.org/bar?a=${a}&b=${b}\n     Content-Type: application/json\n     X-Credentials: ${credentials}\n     { \"foo\": ${foo},\n       \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n```\n## Destructuring 解构\n解构使用模式匹配的方法绑定变量和值，数组和对象都可使用。解构在绑定失败的时会实现软绑定，即没有匹配值时，返回undefined。使用方法可见示例：\n```javascript\n// 数组解构\nvar [a, , b] = [1,2,3];\n// a = 1,b = 3\n\n// React中常见以下用法\nvar {a, b, c} = this.props;\n\n// 对象解构也能用在函数的参数中\nfunction g({name: x}) {\n  console.log(x);\n}\ng({name: 5})\n\n// 绑定失败时返回undefined\nvar [a] = [];\na === undefined;\n\n// 解构时也可以绑定默认值\nvar [a = 1] = [];\na === 1;\n\n// 配合默认参数使用结构\nfunction r({x, y, w = 10, h = 10}) {\n  return x + y + w + h;\n}\nr({x:1, y:2}) === 23\n```\n## 默认值，剩余值和拓展值\nES6允许我们在给变量添加默认值\n使用拓展值使得函数调用时可传入数组作为连续的参数\n利用剩余值特性我们可以把函数尾部的参数转换为一个数组，现在使用rest就可以替换以前的arguments对象了。\n```javascript\n// 给函数的参数添加默认值\nfunction f(x, y=12) {\n  // y is 12 if not passed (or passed as undefined)\n  return x + y;\n}\n// 可以只传参数x的值了\nf(3) == 15\n\n// 使用rest\nfunction f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\n\n// 传入数组作为参数\nfunction f(x, y, z) {\n  return x + y + z;\n}\n// 直接传入数组当作上面函数的参数\nf(...[1,2,3]) == 6\n```\n## Let 和 Const\nES6新增了块作用域，新增了两种定义变量的方法，定义变量时推荐使用let替代var，let定义的变量在块作用域内有效，const用以指定固定值，这两类新定义的变量不允许在定义前使用，也不允许重复定义。\n```javascript\nfunction f() {\n  {\n    let x;\n    {\n      const x = \"sneaky\";\n      // 改变const\n      x = \"foo\";\n    }\n    // 重复定义会出错\n    let x = \"inner\";\n  }\n}\n\n// 在这里想到一个使用var时新手特别容易犯的问题\nfor (var i=0; i<10; ++i) {\n    setTimeout(function(){\n        console.log(i);\n    }, i*1000);\n}\n// 使用var 所有的结果都是10\n// 使用let 结果就是预想要的结果\nfor (let i=0; i<10; ++i) {\n    setTimeout(function(){\n        console.log(i);\n    }, i*1000);\n}\n```\n## Iterators + For..Of\nES6为部署了Iterator接口的各种不同的数据结构提供了统一的访问机制。其本质是一个指针对象。每次调用next方法，可以把指针指向数据结构的下一个成员。具体说来，每一次调用next方法，都会返回数据结构的当前成员的信息（一个包含value和done两个属性的对象，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束）。\n\n凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。\n```javascript\nlet fibonacci = {\n  // 一个数据结构只要具有Symbol.iterator属性，就可被认为是可遍历的，`Symbol.iterator`是一个表达式，返回Symbol对象的iterator属性，所以需要放在[]中，本质上它是当前数据结构的遍历器生成函数。\n  [Symbol.iterator]() {\n    let pre = 0, cur = 1;\n    return {\n      next() {\n        [pre, cur] = [cur, pre + cur];\n        return { done: false, value: cur }\n      }\n    }\n  }\n}\n\n// fibonacci部署了Symbol.iterator属性，只要done不为true就会一直遍历\nfor (var n of fibonacci) {\n// 调用1000以内的值做遍历\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n```\n原生具备Iterator接口的数据结构有以下几种:数组、某些类似数组的对象（字符串、DOM NodeList 对象、arguments对象）、Set和Map结构。\n对象（Object）之所以没有默认部署Iterator接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。\n\n实际使用时需引入polyfill\n## Generators\n可以从两个角度理解Generators，它既是状态机也是一个遍历器对象生成函数。执行该函数可以理解为启动了遍历器，之后每次执行next()函数则每次执行到yield处。\n\n值得注意的是执行next()时可添加参数，这实现了在函数运行的不同阶段，可以从外部向内部注入不同的值，\n\n生成器使用function*和yield简化了迭代过程，使用function*定义的函数返回了一个生成器实例。\n生成器是迭代器的子类，但是包含next和throw。这使得值可以回流到生成器，yield是一个可以返回值的表达式。\n\nfor...of循环可以自动遍历 Generator 函数时生成的Iterator对象，此时不再需要调用next方法。\n\nGenerator的return方法会返回固定的值，终结遍历Generator函数。返回值的value属性就是return方法的参数，返回值的done属性为true。\n\n结合co模块可以实现比Promise更加优雅的异步调用方式\n```javascript\n// 使用generator函数实现上述遍历器对象\nvar fibonacci = {\n  [Symbol.iterator]: function*() {\n    var pre = 0, cur = 1;\n    for (;;) {\n      var temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n\n// 使用co模块（基于 Promise 对象的自动执行器），可以实现异步函数的自动执行\nvar gen = function* () {\n  var f1 = yield somethingAsync();\n  var f2 = yield anotherThingAsync();\n};\n\nvar co = require('co');\nco(gen);\n```\n实际使用时需引入polyfill\n## Unicode\nES6完整支持所有的Unicode,包括新的Unicode字面量和u模式正则，提供了新的API来处理21bit级别的字符串。这些新加特性使得我们的JavaScript应用有能力支持各种语言。\n```javascript\n// same as ES5.1\n\"𠮷\".length == 2\n\n// 新的正则匹配模式\n\"𠮷\".match(/./u)[0].length == 2\n\n// 新形式\n\"\\u{20BB7}\"==\"𠮷\"==\"\\uD842\\uDFB7\"\n\n// codePointAt()能够正确处理4个字节储存的字符，返回一个字符的码点\n\"𠮷\".codePointAt(0) == 0x20BB7\n\n// for-of 遍历字符，以整体输出\nfor(var c of \"𠮷\") {\n  console.log(c);\n}\n// 𠮷\n```\n我们也可以在JS中写出Emoji了，很有趣，对不对：\n\n\n\nModules\n现代JS应用的开发离不开模块了，ES6对模块的定义提供了语言层面的支持。规范化了各种JavaScript模块加载器，支持运行时动态加载模块，支持异步加载模块。\n\nES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量，效率要比 CommonJS 模块的加载方式高。\n```javascript\n// lib/math.js 模块的定义\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n\n// app.js 模块的全部引用\nimport * as math from \"lib/math\";\nalert(\"2π = \" + math.sum(math.pi, math.pi));\n\n// otherApp.js 模块的部分引用\nimport {sum, pi} from \"lib/math\";\nalert(\"2π = \" + sum(pi, pi));\n\n// 模块导出方法\n// lib/mathplusplus.js\nexport * from \"lib/math\";\nexport var e = 2.71828182846;\nexport default function(x) {\n    return Math.log(x);\n}\n\n// 混合引入方法\nimport ln, {pi, e} from \"lib/mathplusplus\";\nalert(\"2π = \" + ln(e)*pi*2);\n```\nModule Loaders（其实并非ES6标准的一部分，只是草案）\n模块加载器支持以下功能：\n\n动态加载\n状态隔离\n全局命名空间隔离\n编写钩子\n嵌套\n默认的模块加载器可以被配置，新的加载器可以被配置来评估加载独立上下文中的内容。\n```javascript\n// 动态加载 – ‘System’ 是默认的加载器\nSystem.import('lib/math').then(function(m) {\n  alert(\"2π = \" + m.sum(m.pi, m.pi));\n});\n\n// 新的加载器创建了执行沙盒\nvar loader = new Loader({\n  global: fixup(window) // replace ‘console.log’\n});\nloader.eval(\"console.log('hello world!');\");\n\n// 可以直接修改模块的缓存\nSystem.get('jquery');\nSystem.set('jquery', Module({$: $})); // WARNING: not yet finalized\nMap Set WeakMap WeakSet\nES6为算法提供了新的高效的数据结构，WeakMaps提供了防泄漏的键值对表。\n\n// Set类似于数组，但是成员的值都是唯一的，没有重复的值。\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n\n// WeakMap结构与Map结构类似，也是用于生成键值对的集合，但是WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名，此外WeakMap的键名所指向的对象，不计入垃圾回收机制。\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// WeakSet 结构与 Set 类似，也是不重复的值的集合,但是WeakSet 的成员只能是对象，而不能是其他类型的值，此外WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用\nvar ws = new WeakSet();\nws.add({ data: 42 });\n// Because the added object has no other references, it will not be held in the set\n```\n实际使用时需引入polyfill\n## Proxies\nProxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。\n\n可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。\n\n需要注意的是目前未被Babel支持，使用时需谨慎\n```javascript\n// target参数表示所要拦截的目标对象;\nvar target = {};\n\n// handler参数也是一个对象，用来定制拦截行为;\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\n\n// 生成一个Proxy实例\nvar p = new Proxy(target, handler);\np.world === 'Hello, world!';\n\n\n// 对函数同样可以使用代理\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function (receiver, ...args) {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === 'I am the proxy';\n// Proxy支持的拦截操作如下\n\nvar handler =\n{\n  get:...,\n  set:...,\n  has:...,\n  deleteProperty:...,\n  apply:...,\n  construct:...,\n  getOwnPropertyDescriptor:...,\n  defineProperty:...,\n  getPrototypeOf:...,\n  setPrototypeOf:...,\n  enumerate:...,\n  ownKeys:...,\n  preventExtensions:...,\n  isExtensible:...\n}\n```\nBabel 不支持，使用时应注意\n## Symbols\nSymbol保证每个属性的名字都是独一无二的，这样就从根本上防止了属性名的冲突；\n它是一种类似于字符串的数据类型,Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述；\nSymbols是唯一的，单并非私有的，通过Object.getOwnPropertySymbols可以获取对应的值；\nSymbol 值作为对象属性名时，不能用点运算符。\n```javascript\nvar MyClass = (function() {\n\n  // module scoped symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  return MyClass;\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined\n由于语言限制，Babel只提供部分支持，使用时需要注意\n内置类的继承\n在ES6中，内置的Array,Date,DOM Element可以被继承以拓展了。\n\n// User code of Array subclass\nclass MyArray extends Array {\n    constructor(...args) { super(...args); }\n}\n\nvar arr = new MyArray();\narr[1] = 12;\narr.length == 2\nbabel 部分支持，由于ES5引擎的限制Date,Array,Error不被支持，但是HTMLElement是被支持的\nMath + Number + String + Array + Object APIs\nES6 为很多旧有对象添加了新的API，这些对象包括Math,Array器，String,Object，如下：\n\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".includes(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll('*')) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1, 2, 3].find(x => x == 3) // 3\n[1, 2, 3].findIndex(x => x == 2) // 1\n[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n```\nbabel 通过 polyfill 提供部分支持\n二进制和八进制字面量\nES6添加了二进制和八进制数值的字面量定义方法：\n```javascript\n0b111110111 === 503 // true\n0o767 === 503 // true\n```\nbabel 只支持字面量形式，不支持 Number(\"0o767\")形式\nPromise\nPromise为异步编程提供了一种新的方式，Promise把未来将用到的值当做一等对象，Promise在很多前端库中已经有所支持了。这个平时用得最多了，还没使用的推荐试试。\n```javascript\nfunction timeout(duration = 0) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, duration);\n    })\n}\n\nvar p = timeout(1000).then(() => {\n    return timeout(2000);\n}).then(() => {\n    throw new Error(\"hmm\");\n}).catch(err => {\n    return Promise.all([timeout(100), timeout(200)]);\n})\n```\n实际使用时需引入polyfill\n## Reflect API\nReflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API，作用如下：\n\n将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上；\n修改某些Object方法的返回结果，让其变得更合理；\n让Object操作都变成函数行为，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\nReflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法；\n```javascript\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\n\nReflect.ownKeys(O); // ['a', 'b', Symbol(c)]\n\nfunction C(a, b){\n  this.c = a + b;\n}\nvar instance = Reflect.construct(C, [20, 22]);\ninstance.c; // 42\n```\n实际使用时需引入polyfill\n## Tail Calls\n尾部调用被保证不能无限拓展栈，这让有无限制输入时的递归算法更加安全。\n```javascript\nfunction factorial(n, acc = 1) {\n    'use strict';\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}\n\n// 堆栈越来越常用，在ES6中其使用更加安全了\nfactorial(100000)\n```\n说明\n上文对ES6的新特性都做了简单的描述，但是关于Reflect API和Proxies,由于本人对他们的理解还不够透彻，说得可能有些不清不楚。希望阅读本文让你有收获，有任何疑问，大家也可以一起讨论。","source":"_posts/ES6.md","raw":"title: ES6新特性列表\nauthor: Ao\ndate: 2017-06-23 17:20:28\ntags:\n---\n相比ES5，ES6提供了太多的更新，简单说来，主要为以下方面（大家可以依据自己不算清晰的点选择性查看本文）：\n\n- Arrows,箭头函数，\n- Classes，类\n- Enhanced object literals，增强的对象字面值\n- Template strings：模板字符串\n- Destructuring：解构\n- Default + rest + spread：参数默认值，rest参数,扩展运算符\n- Let + const:命名声明的新方式\n- Iterators + for..of：遍历器\n- Generators：生成器\n- Unicode：更广泛的编码支持\n- Modules：语言层面上支持的模块机制\n- Module loaders：模块加载器\n<!--more-->\n- Map + set + weakmap + weakset：新的数据结构\n- Proxies：代理器\n- Symbols：新的基本类型，独一无二的值\n- Subclassable built-ins：类的继承\n- Promises：\n- Math + number + string + array + object apis：拓展了一些内置对象的方法\n- Binary and octal literals：二进制八进制字面量\n- Reflect api：操作对象的新api\n- Tail calls:尾调用\n## Arrows箭头函数\n箭头函数使用类似于=>这样的语法定义函数，支持表达式模式和语句模式，不过其最大特点在于和父作用域具有一样的this。我们知道普通函数的this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。使用箭头函数时再也不用担心this跳来跳去了。\n此外如果箭头函数如果定义在另一个函数里面，箭头函数会共享它父函数的arguments变量。\n```javascript\n// 表达式模式箭头函数\nvar odds = evens.map(v => v + 1);\nvar nums = evens.map((v, i) => v + i);\nvar pairs = evens.map(v => ({even: v, odd: v + 1}));\n\n// 语句模式箭头函数\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// 和父作用域具有相同的this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(this._name + \" knows \" + f));\n  }\n}\n\nfunction square() {\n  let example = () => {\n    let numbers = [];\n    for (let number of arguments) {\n      numbers.push(number * number);\n    }\n\n    return numbers;\n  };\n\n  return example();\n}\n\nsquare(2, 4, 7.5, 8, 11.5, 21); // returns: [4, 16, 56.25, 64, 132.25, 441]\n```\n## Classes\nJavaScript中其实并不存在真正的类，ES6的类其实是基于原型链模拟面向对象的一种语法糖。其本质上可以看做是构造函数的另一种写法。\n与真的类一样，它支持super继承，实例，静态方法和constructor方法。\n如果你也使用React，工作中定义模块时一定没少写过class A extends React.Component{}吧。\n```javascript\n// 定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n// 通过extends关键字实现继承\nclass SkinnedMesh extends THREE.Mesh {\n  //constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。\n  //一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。\n  constructor(geometry, materials) {\n    // super表示父类的构造函数，用来新建父类的this对象,\n    // 子类必须在constructor方法中调用super方法，否则新建实例时会报错。如果不调用super方法，子类就得不到this对象。\n    super(geometry, materials);\n\n    //在构造方法中绑定this,可以防止实例找不到this\n    this.idMatrix = SkinnedMesh.defaultMatrix();\n    this.bones = [];\n    this.boneMatrices = [];\n    //...\n  }\n  \n  // 非定义在this上的方法都会被直接定义在原型链上\n  update(camera) {\n    //...\n    // super在此处作为对象，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n    super.update();\n  }\n  // 可以使用get和set关键字，对某个属性设置存值函数和取值函数\n  get boneCount() {\n  // 类的方法内部如果含有this，它默认指向类的实例\n    return this.bones.length;\n  }\n  set matrixType(matrixType) {\n    this.idMatrix = SkinnedMesh[matrixType]();\n  }\n  \n  // 加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n  static defaultMatrix() {\n    return new THREE.Matrix4();\n  }\n}\n\n// 类的所有实例共享一个原型对象\nlet skin = new SkinnedMesh();\n// 静态方法需要直接通过类调用\nSkinnedMesh.defaultMatrix()\n```\n## 对象的拓展\nES6中对象的使用方法得以拓展，主要包括以下几点：\n\n- 属性和方法可以简洁表示；\n- 允许以表达式的模式定义属性名；\n- 可以通过__proto__读取或设置当前对象的prototype对象;\n- 使用Object.is({},{})判断两个对象是否完全相对，类似于===;\n- Object.assign(target, source1, source2)合并对象；（浅拷贝）\n```javascript\nvar obj = {\n    // __proto__用以设置当前对象的prototype对象，不推荐使用，推荐使用Object.setPrototypeOf() \n    __proto__: theProtoObj,\n    //‘handler:handler’可简写为handler（只需要写变量名就可以实现变量名为变量名，变量值为属性值）\n    handler,\n    // 简写在定义方法的时候同样有效\n    toString() {\n     // Super calls\n     return \"d \" + super.toString();\n    },\n    // 方括号内的表达式用以计算属性名\n    [ 'prop_' + (() => 42)() ]: 42\n};\n```\n## 模板字符串\n模板字符串是一种组合字符串的语法糖，其使用类似于Perl,Python等语言的字符串修改方法类似，它的出现让我们拼合字符串时方便多了。目前相互中几乎所有字符串的拼接都用这个了，异常方便。\n\n模板字符串定义在两个反撇号中；\n在模板字符串中可以直接换行，格式会得以保留；\n通过${}可以很方便的在模板字符串中添加变量；\n```javascript\n// 把字符串放在``(注意不是引号)中就可以使用\n`In JavaScript '\\n' is a line-feed.`\n\n// 模板字符串保留了换行\n`In JavaScript this is\n not legal.`\n\n// 在字符串中添加变量的方法，变量直接放在${}中即可\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n// 拼合请求时异常方便了\nPOST`http://foo.org/bar?a=${a}&b=${b}\n     Content-Type: application/json\n     X-Credentials: ${credentials}\n     { \"foo\": ${foo},\n       \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n```\n## Destructuring 解构\n解构使用模式匹配的方法绑定变量和值，数组和对象都可使用。解构在绑定失败的时会实现软绑定，即没有匹配值时，返回undefined。使用方法可见示例：\n```javascript\n// 数组解构\nvar [a, , b] = [1,2,3];\n// a = 1,b = 3\n\n// React中常见以下用法\nvar {a, b, c} = this.props;\n\n// 对象解构也能用在函数的参数中\nfunction g({name: x}) {\n  console.log(x);\n}\ng({name: 5})\n\n// 绑定失败时返回undefined\nvar [a] = [];\na === undefined;\n\n// 解构时也可以绑定默认值\nvar [a = 1] = [];\na === 1;\n\n// 配合默认参数使用结构\nfunction r({x, y, w = 10, h = 10}) {\n  return x + y + w + h;\n}\nr({x:1, y:2}) === 23\n```\n## 默认值，剩余值和拓展值\nES6允许我们在给变量添加默认值\n使用拓展值使得函数调用时可传入数组作为连续的参数\n利用剩余值特性我们可以把函数尾部的参数转换为一个数组，现在使用rest就可以替换以前的arguments对象了。\n```javascript\n// 给函数的参数添加默认值\nfunction f(x, y=12) {\n  // y is 12 if not passed (or passed as undefined)\n  return x + y;\n}\n// 可以只传参数x的值了\nf(3) == 15\n\n// 使用rest\nfunction f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\n\n// 传入数组作为参数\nfunction f(x, y, z) {\n  return x + y + z;\n}\n// 直接传入数组当作上面函数的参数\nf(...[1,2,3]) == 6\n```\n## Let 和 Const\nES6新增了块作用域，新增了两种定义变量的方法，定义变量时推荐使用let替代var，let定义的变量在块作用域内有效，const用以指定固定值，这两类新定义的变量不允许在定义前使用，也不允许重复定义。\n```javascript\nfunction f() {\n  {\n    let x;\n    {\n      const x = \"sneaky\";\n      // 改变const\n      x = \"foo\";\n    }\n    // 重复定义会出错\n    let x = \"inner\";\n  }\n}\n\n// 在这里想到一个使用var时新手特别容易犯的问题\nfor (var i=0; i<10; ++i) {\n    setTimeout(function(){\n        console.log(i);\n    }, i*1000);\n}\n// 使用var 所有的结果都是10\n// 使用let 结果就是预想要的结果\nfor (let i=0; i<10; ++i) {\n    setTimeout(function(){\n        console.log(i);\n    }, i*1000);\n}\n```\n## Iterators + For..Of\nES6为部署了Iterator接口的各种不同的数据结构提供了统一的访问机制。其本质是一个指针对象。每次调用next方法，可以把指针指向数据结构的下一个成员。具体说来，每一次调用next方法，都会返回数据结构的当前成员的信息（一个包含value和done两个属性的对象，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束）。\n\n凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。\n```javascript\nlet fibonacci = {\n  // 一个数据结构只要具有Symbol.iterator属性，就可被认为是可遍历的，`Symbol.iterator`是一个表达式，返回Symbol对象的iterator属性，所以需要放在[]中，本质上它是当前数据结构的遍历器生成函数。\n  [Symbol.iterator]() {\n    let pre = 0, cur = 1;\n    return {\n      next() {\n        [pre, cur] = [cur, pre + cur];\n        return { done: false, value: cur }\n      }\n    }\n  }\n}\n\n// fibonacci部署了Symbol.iterator属性，只要done不为true就会一直遍历\nfor (var n of fibonacci) {\n// 调用1000以内的值做遍历\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n```\n原生具备Iterator接口的数据结构有以下几种:数组、某些类似数组的对象（字符串、DOM NodeList 对象、arguments对象）、Set和Map结构。\n对象（Object）之所以没有默认部署Iterator接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。\n\n实际使用时需引入polyfill\n## Generators\n可以从两个角度理解Generators，它既是状态机也是一个遍历器对象生成函数。执行该函数可以理解为启动了遍历器，之后每次执行next()函数则每次执行到yield处。\n\n值得注意的是执行next()时可添加参数，这实现了在函数运行的不同阶段，可以从外部向内部注入不同的值，\n\n生成器使用function*和yield简化了迭代过程，使用function*定义的函数返回了一个生成器实例。\n生成器是迭代器的子类，但是包含next和throw。这使得值可以回流到生成器，yield是一个可以返回值的表达式。\n\nfor...of循环可以自动遍历 Generator 函数时生成的Iterator对象，此时不再需要调用next方法。\n\nGenerator的return方法会返回固定的值，终结遍历Generator函数。返回值的value属性就是return方法的参数，返回值的done属性为true。\n\n结合co模块可以实现比Promise更加优雅的异步调用方式\n```javascript\n// 使用generator函数实现上述遍历器对象\nvar fibonacci = {\n  [Symbol.iterator]: function*() {\n    var pre = 0, cur = 1;\n    for (;;) {\n      var temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n\n// 使用co模块（基于 Promise 对象的自动执行器），可以实现异步函数的自动执行\nvar gen = function* () {\n  var f1 = yield somethingAsync();\n  var f2 = yield anotherThingAsync();\n};\n\nvar co = require('co');\nco(gen);\n```\n实际使用时需引入polyfill\n## Unicode\nES6完整支持所有的Unicode,包括新的Unicode字面量和u模式正则，提供了新的API来处理21bit级别的字符串。这些新加特性使得我们的JavaScript应用有能力支持各种语言。\n```javascript\n// same as ES5.1\n\"𠮷\".length == 2\n\n// 新的正则匹配模式\n\"𠮷\".match(/./u)[0].length == 2\n\n// 新形式\n\"\\u{20BB7}\"==\"𠮷\"==\"\\uD842\\uDFB7\"\n\n// codePointAt()能够正确处理4个字节储存的字符，返回一个字符的码点\n\"𠮷\".codePointAt(0) == 0x20BB7\n\n// for-of 遍历字符，以整体输出\nfor(var c of \"𠮷\") {\n  console.log(c);\n}\n// 𠮷\n```\n我们也可以在JS中写出Emoji了，很有趣，对不对：\n\n\n\nModules\n现代JS应用的开发离不开模块了，ES6对模块的定义提供了语言层面的支持。规范化了各种JavaScript模块加载器，支持运行时动态加载模块，支持异步加载模块。\n\nES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量，效率要比 CommonJS 模块的加载方式高。\n```javascript\n// lib/math.js 模块的定义\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n\n// app.js 模块的全部引用\nimport * as math from \"lib/math\";\nalert(\"2π = \" + math.sum(math.pi, math.pi));\n\n// otherApp.js 模块的部分引用\nimport {sum, pi} from \"lib/math\";\nalert(\"2π = \" + sum(pi, pi));\n\n// 模块导出方法\n// lib/mathplusplus.js\nexport * from \"lib/math\";\nexport var e = 2.71828182846;\nexport default function(x) {\n    return Math.log(x);\n}\n\n// 混合引入方法\nimport ln, {pi, e} from \"lib/mathplusplus\";\nalert(\"2π = \" + ln(e)*pi*2);\n```\nModule Loaders（其实并非ES6标准的一部分，只是草案）\n模块加载器支持以下功能：\n\n动态加载\n状态隔离\n全局命名空间隔离\n编写钩子\n嵌套\n默认的模块加载器可以被配置，新的加载器可以被配置来评估加载独立上下文中的内容。\n```javascript\n// 动态加载 – ‘System’ 是默认的加载器\nSystem.import('lib/math').then(function(m) {\n  alert(\"2π = \" + m.sum(m.pi, m.pi));\n});\n\n// 新的加载器创建了执行沙盒\nvar loader = new Loader({\n  global: fixup(window) // replace ‘console.log’\n});\nloader.eval(\"console.log('hello world!');\");\n\n// 可以直接修改模块的缓存\nSystem.get('jquery');\nSystem.set('jquery', Module({$: $})); // WARNING: not yet finalized\nMap Set WeakMap WeakSet\nES6为算法提供了新的高效的数据结构，WeakMaps提供了防泄漏的键值对表。\n\n// Set类似于数组，但是成员的值都是唯一的，没有重复的值。\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n\n// WeakMap结构与Map结构类似，也是用于生成键值对的集合，但是WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名，此外WeakMap的键名所指向的对象，不计入垃圾回收机制。\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// WeakSet 结构与 Set 类似，也是不重复的值的集合,但是WeakSet 的成员只能是对象，而不能是其他类型的值，此外WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用\nvar ws = new WeakSet();\nws.add({ data: 42 });\n// Because the added object has no other references, it will not be held in the set\n```\n实际使用时需引入polyfill\n## Proxies\nProxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。\n\n可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。\n\n需要注意的是目前未被Babel支持，使用时需谨慎\n```javascript\n// target参数表示所要拦截的目标对象;\nvar target = {};\n\n// handler参数也是一个对象，用来定制拦截行为;\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\n\n// 生成一个Proxy实例\nvar p = new Proxy(target, handler);\np.world === 'Hello, world!';\n\n\n// 对函数同样可以使用代理\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function (receiver, ...args) {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === 'I am the proxy';\n// Proxy支持的拦截操作如下\n\nvar handler =\n{\n  get:...,\n  set:...,\n  has:...,\n  deleteProperty:...,\n  apply:...,\n  construct:...,\n  getOwnPropertyDescriptor:...,\n  defineProperty:...,\n  getPrototypeOf:...,\n  setPrototypeOf:...,\n  enumerate:...,\n  ownKeys:...,\n  preventExtensions:...,\n  isExtensible:...\n}\n```\nBabel 不支持，使用时应注意\n## Symbols\nSymbol保证每个属性的名字都是独一无二的，这样就从根本上防止了属性名的冲突；\n它是一种类似于字符串的数据类型,Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述；\nSymbols是唯一的，单并非私有的，通过Object.getOwnPropertySymbols可以获取对应的值；\nSymbol 值作为对象属性名时，不能用点运算符。\n```javascript\nvar MyClass = (function() {\n\n  // module scoped symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  return MyClass;\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined\n由于语言限制，Babel只提供部分支持，使用时需要注意\n内置类的继承\n在ES6中，内置的Array,Date,DOM Element可以被继承以拓展了。\n\n// User code of Array subclass\nclass MyArray extends Array {\n    constructor(...args) { super(...args); }\n}\n\nvar arr = new MyArray();\narr[1] = 12;\narr.length == 2\nbabel 部分支持，由于ES5引擎的限制Date,Array,Error不被支持，但是HTMLElement是被支持的\nMath + Number + String + Array + Object APIs\nES6 为很多旧有对象添加了新的API，这些对象包括Math,Array器，String,Object，如下：\n\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".includes(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll('*')) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1, 2, 3].find(x => x == 3) // 3\n[1, 2, 3].findIndex(x => x == 2) // 1\n[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n```\nbabel 通过 polyfill 提供部分支持\n二进制和八进制字面量\nES6添加了二进制和八进制数值的字面量定义方法：\n```javascript\n0b111110111 === 503 // true\n0o767 === 503 // true\n```\nbabel 只支持字面量形式，不支持 Number(\"0o767\")形式\nPromise\nPromise为异步编程提供了一种新的方式，Promise把未来将用到的值当做一等对象，Promise在很多前端库中已经有所支持了。这个平时用得最多了，还没使用的推荐试试。\n```javascript\nfunction timeout(duration = 0) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, duration);\n    })\n}\n\nvar p = timeout(1000).then(() => {\n    return timeout(2000);\n}).then(() => {\n    throw new Error(\"hmm\");\n}).catch(err => {\n    return Promise.all([timeout(100), timeout(200)]);\n})\n```\n实际使用时需引入polyfill\n## Reflect API\nReflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API，作用如下：\n\n将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上；\n修改某些Object方法的返回结果，让其变得更合理；\n让Object操作都变成函数行为，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\nReflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法；\n```javascript\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\n\nReflect.ownKeys(O); // ['a', 'b', Symbol(c)]\n\nfunction C(a, b){\n  this.c = a + b;\n}\nvar instance = Reflect.construct(C, [20, 22]);\ninstance.c; // 42\n```\n实际使用时需引入polyfill\n## Tail Calls\n尾部调用被保证不能无限拓展栈，这让有无限制输入时的递归算法更加安全。\n```javascript\nfunction factorial(n, acc = 1) {\n    'use strict';\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}\n\n// 堆栈越来越常用，在ES6中其使用更加安全了\nfactorial(100000)\n```\n说明\n上文对ES6的新特性都做了简单的描述，但是关于Reflect API和Proxies,由于本人对他们的理解还不够透彻，说得可能有些不清不楚。希望阅读本文让你有收获，有任何疑问，大家也可以一起讨论。","slug":"ES6","published":1,"updated":"2017-08-02T02:25:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4imn00017wu5oplsmvup","content":"<p>相比ES5，ES6提供了太多的更新，简单说来，主要为以下方面（大家可以依据自己不算清晰的点选择性查看本文）：</p>\n<ul>\n<li>Arrows,箭头函数，</li>\n<li>Classes，类</li>\n<li>Enhanced object literals，增强的对象字面值</li>\n<li>Template strings：模板字符串</li>\n<li>Destructuring：解构</li>\n<li>Default + rest + spread：参数默认值，rest参数,扩展运算符</li>\n<li>Let + const:命名声明的新方式</li>\n<li>Iterators + for..of：遍历器</li>\n<li>Generators：生成器</li>\n<li>Unicode：更广泛的编码支持</li>\n<li>Modules：语言层面上支持的模块机制</li>\n<li>Module loaders：模块加载器<a id=\"more\"></a></li>\n<li>Map + set + weakmap + weakset：新的数据结构</li>\n<li>Proxies：代理器</li>\n<li>Symbols：新的基本类型，独一无二的值</li>\n<li>Subclassable built-ins：类的继承</li>\n<li>Promises：</li>\n<li>Math + number + string + array + object apis：拓展了一些内置对象的方法</li>\n<li>Binary and octal literals：二进制八进制字面量</li>\n<li>Reflect api：操作对象的新api</li>\n<li>Tail calls:尾调用<h2 id=\"Arrows箭头函数\"><a href=\"#Arrows箭头函数\" class=\"headerlink\" title=\"Arrows箭头函数\"></a>Arrows箭头函数</h2>箭头函数使用类似于=&gt;这样的语法定义函数，支持表达式模式和语句模式，不过其最大特点在于和父作用域具有一样的this。我们知道普通函数的this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。使用箭头函数时再也不用担心this跳来跳去了。<br>此外如果箭头函数如果定义在另一个函数里面，箭头函数会共享它父函数的arguments变量。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 表达式模式箭头函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> odds = evens.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> nums = evens.map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> v + i);</div><div class=\"line\"><span class=\"keyword\">var</span> pairs = evens.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> (&#123;<span class=\"attr\">even</span>: v, <span class=\"attr\">odd</span>: v + <span class=\"number\">1</span>&#125;));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 语句模式箭头函数</span></div><div class=\"line\">nums.forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (v % <span class=\"number\">5</span> === <span class=\"number\">0</span>)</div><div class=\"line\">    fives.push(v);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 和父作用域具有相同的this</span></div><div class=\"line\"><span class=\"keyword\">var</span> bob = &#123;</div><div class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">  <span class=\"attr\">_friends</span>: [],</div><div class=\"line\">  printFriends() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._name + <span class=\"string\">\" knows \"</span> + f));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> example = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> numbers = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> number <span class=\"keyword\">of</span> <span class=\"built_in\">arguments</span>) &#123;</div><div class=\"line\">      numbers.push(number * number);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> numbers;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> example();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">square(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7.5</span>, <span class=\"number\">8</span>, <span class=\"number\">11.5</span>, <span class=\"number\">21</span>); <span class=\"comment\">// returns: [4, 16, 56.25, 64, 132.25, 441]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><p>JavaScript中其实并不存在真正的类，ES6的类其实是基于原型链模拟面向对象的一种语法糖。其本质上可以看做是构造函数的另一种写法。<br>与真的类一样，它支持super继承，实例，静态方法和constructor方法。<br>如果你也使用React，工作中定义模块时一定没少写过class A extends React.Component{}吧。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 通过extends关键字实现继承</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SkinnedMesh</span> <span class=\"keyword\">extends</span> <span class=\"title\">THREE</span>.<span class=\"title\">Mesh</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。</span></div><div class=\"line\">  <span class=\"comment\">//一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(geometry, materials) &#123;</div><div class=\"line\">    <span class=\"comment\">// super表示父类的构造函数，用来新建父类的this对象,</span></div><div class=\"line\">    <span class=\"comment\">// 子类必须在constructor方法中调用super方法，否则新建实例时会报错。如果不调用super方法，子类就得不到this对象。</span></div><div class=\"line\">    <span class=\"keyword\">super</span>(geometry, materials);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//在构造方法中绑定this,可以防止实例找不到this</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.idMatrix = SkinnedMesh.defaultMatrix();</div><div class=\"line\">    <span class=\"keyword\">this</span>.bones = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.boneMatrices = [];</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 非定义在this上的方法都会被直接定义在原型链上</span></div><div class=\"line\">  update(camera) &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"comment\">// super在此处作为对象，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.update();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 可以使用get和set关键字，对某个属性设置存值函数和取值函数</span></div><div class=\"line\">  get boneCount() &#123;</div><div class=\"line\">  <span class=\"comment\">// 类的方法内部如果含有this，它默认指向类的实例</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bones.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set matrixType(matrixType) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.idMatrix = SkinnedMesh[matrixType]();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</span></div><div class=\"line\">  <span class=\"keyword\">static</span> defaultMatrix() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> THREE.Matrix4();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 类的所有实例共享一个原型对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> skin = <span class=\"keyword\">new</span> SkinnedMesh();</div><div class=\"line\"><span class=\"comment\">// 静态方法需要直接通过类调用</span></div><div class=\"line\">SkinnedMesh.defaultMatrix()</div></pre></td></tr></table></figure></p>\n<h2 id=\"对象的拓展\"><a href=\"#对象的拓展\" class=\"headerlink\" title=\"对象的拓展\"></a>对象的拓展</h2><p>ES6中对象的使用方法得以拓展，主要包括以下几点：</p>\n<ul>\n<li>属性和方法可以简洁表示；</li>\n<li>允许以表达式的模式定义属性名；</li>\n<li>可以通过<strong>proto</strong>读取或设置当前对象的prototype对象;</li>\n<li>使用Object.is({},{})判断两个对象是否完全相对，类似于===;</li>\n<li>Object.assign(target, source1, source2)合并对象；（浅拷贝）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"comment\">// __proto__用以设置当前对象的prototype对象，不推荐使用，推荐使用Object.setPrototypeOf() </span></div><div class=\"line\">    __proto__: theProtoObj,</div><div class=\"line\">    <span class=\"comment\">//‘handler:handler’可简写为handler（只需要写变量名就可以实现变量名为变量名，变量值为属性值）</span></div><div class=\"line\">    handler,</div><div class=\"line\">    <span class=\"comment\">// 简写在定义方法的时候同样有效</span></div><div class=\"line\">    toString() &#123;</div><div class=\"line\">     <span class=\"comment\">// Super calls</span></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">\"d \"</span> + <span class=\"keyword\">super</span>.toString();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 方括号内的表达式用以计算属性名</span></div><div class=\"line\">    [ <span class=\"string\">'prop_'</span> + <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"number\">42</span>)() ]: <span class=\"number\">42</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>模板字符串是一种组合字符串的语法糖，其使用类似于Perl,Python等语言的字符串修改方法类似，它的出现让我们拼合字符串时方便多了。目前相互中几乎所有字符串的拼接都用这个了，异常方便。</p>\n<p>模板字符串定义在两个反撇号中；<br>在模板字符串中可以直接换行，格式会得以保留；<br>通过${}可以很方便的在模板字符串中添加变量；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 把字符串放在``(注意不是引号)中就可以使用</span></div><div class=\"line\"><span class=\"string\">`In JavaScript '\\n' is a line-feed.`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 模板字符串保留了换行</span></div><div class=\"line\"><span class=\"string\">`In JavaScript this is</span></div><div class=\"line\"> not legal.`</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在字符串中添加变量的方法，变量直接放在$&#123;&#125;中即可</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 拼合请求时异常方便了</span></div><div class=\"line\">POST<span class=\"string\">`http://foo.org/bar?a=<span class=\"subst\">$&#123;a&#125;</span>&amp;b=<span class=\"subst\">$&#123;b&#125;</span></span></div><div class=\"line\">     Content-Type: application/json</div><div class=\"line\">     X-Credentials: <span class=\"subst\">$&#123;credentials&#125;</span></div><div class=\"line\">     &#123; \"foo\": <span class=\"subst\">$&#123;foo&#125;</span>,</div><div class=\"line\">       \"bar\": <span class=\"subst\">$&#123;bar&#125;</span>&#125;`(myOnReadyStateChangeHandler);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Destructuring-解构\"><a href=\"#Destructuring-解构\" class=\"headerlink\" title=\"Destructuring 解构\"></a>Destructuring 解构</h2><p>解构使用模式匹配的方法绑定变量和值，数组和对象都可使用。解构在绑定失败的时会实现软绑定，即没有匹配值时，返回undefined。使用方法可见示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组解构</span></div><div class=\"line\"><span class=\"keyword\">var</span> [a, , b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"comment\">// a = 1,b = 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// React中常见以下用法</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;a, b, c&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对象解构也能用在函数的参数中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\">&#123;name: x&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\">g(&#123;<span class=\"attr\">name</span>: <span class=\"number\">5</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 绑定失败时返回undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> [a] = [];</div><div class=\"line\">a === <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 解构时也可以绑定默认值</span></div><div class=\"line\"><span class=\"keyword\">var</span> [a = <span class=\"number\">1</span>] = [];</div><div class=\"line\">a === <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 配合默认参数使用结构</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\">&#123;x, y, w = <span class=\"number\">10</span>, h = <span class=\"number\">10</span>&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y + w + h;</div><div class=\"line\">&#125;</div><div class=\"line\">r(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;) === <span class=\"number\">23</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"默认值，剩余值和拓展值\"><a href=\"#默认值，剩余值和拓展值\" class=\"headerlink\" title=\"默认值，剩余值和拓展值\"></a>默认值，剩余值和拓展值</h2><p>ES6允许我们在给变量添加默认值<br>使用拓展值使得函数调用时可传入数组作为连续的参数<br>利用剩余值特性我们可以把函数尾部的参数转换为一个数组，现在使用rest就可以替换以前的arguments对象了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 给函数的参数添加默认值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y=<span class=\"number\">12</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// y is 12 if not passed (or passed as undefined)</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 可以只传参数x的值了</span></div><div class=\"line\">f(<span class=\"number\">3</span>) == <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用rest</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, ...y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// y is an Array</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x * y.length;</div><div class=\"line\">&#125;</div><div class=\"line\">f(<span class=\"number\">3</span>, <span class=\"string\">\"hello\"</span>, <span class=\"literal\">true</span>) == <span class=\"number\">6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传入数组作为参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 直接传入数组当作上面函数的参数</span></div><div class=\"line\">f(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) == <span class=\"number\">6</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Let-和-Const\"><a href=\"#Let-和-Const\" class=\"headerlink\" title=\"Let 和 Const\"></a>Let 和 Const</h2><p>ES6新增了块作用域，新增了两种定义变量的方法，定义变量时推荐使用let替代var，let定义的变量在块作用域内有效，const用以指定固定值，这两类新定义的变量不允许在定义前使用，也不允许重复定义。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> x;</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> x = <span class=\"string\">\"sneaky\"</span>;</div><div class=\"line\">      <span class=\"comment\">// 改变const</span></div><div class=\"line\">      x = <span class=\"string\">\"foo\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 重复定义会出错</span></div><div class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"string\">\"inner\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里想到一个使用var时新手特别容易犯的问题</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;, i*<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用var 所有的结果都是10</span></div><div class=\"line\"><span class=\"comment\">// 使用let 结果就是预想要的结果</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;, i*<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Iterators-For-Of\"><a href=\"#Iterators-For-Of\" class=\"headerlink\" title=\"Iterators + For..Of\"></a>Iterators + For..Of</h2><p>ES6为部署了Iterator接口的各种不同的数据结构提供了统一的访问机制。其本质是一个指针对象。每次调用next方法，可以把指针指向数据结构的下一个成员。具体说来，每一次调用next方法，都会返回数据结构的当前成员的信息（一个包含value和done两个属性的对象，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束）。</p>\n<p>凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> fibonacci = &#123;</div><div class=\"line\">  <span class=\"comment\">// 一个数据结构只要具有Symbol.iterator属性，就可被认为是可遍历的，`Symbol.iterator`是一个表达式，返回Symbol对象的iterator属性，所以需要放在[]中，本质上它是当前数据结构的遍历器生成函数。</span></div><div class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>, cur = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      next() &#123;</div><div class=\"line\">        [pre, cur] = [cur, pre + cur];</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: cur &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fibonacci部署了Symbol.iterator属性，只要done不为true就会一直遍历</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> fibonacci) &#123;</div><div class=\"line\"><span class=\"comment\">// 调用1000以内的值做遍历</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>原生具备Iterator接口的数据结构有以下几种:数组、某些类似数组的对象（字符串、DOM NodeList 对象、arguments对象）、Set和Map结构。<br>对象（Object）之所以没有默认部署Iterator接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。</p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>可以从两个角度理解Generators，它既是状态机也是一个遍历器对象生成函数。执行该函数可以理解为启动了遍历器，之后每次执行next()函数则每次执行到yield处。</p>\n<p>值得注意的是执行next()时可添加参数，这实现了在函数运行的不同阶段，可以从外部向内部注入不同的值，</p>\n<p>生成器使用function<em>和yield简化了迭代过程，使用function</em>定义的函数返回了一个生成器实例。<br>生成器是迭代器的子类，但是包含next和throw。这使得值可以回流到生成器，yield是一个可以返回值的表达式。</p>\n<p>for…of循环可以自动遍历 Generator 函数时生成的Iterator对象，此时不再需要调用next方法。</p>\n<p>Generator的return方法会返回固定的值，终结遍历Generator函数。返回值的value属性就是return方法的参数，返回值的done属性为true。</p>\n<p>结合co模块可以实现比Promise更加优雅的异步调用方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用generator函数实现上述遍历器对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> fibonacci = &#123;</div><div class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pre = <span class=\"number\">0</span>, cur = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> temp = pre;</div><div class=\"line\">      pre = cur;</div><div class=\"line\">      cur += temp;</div><div class=\"line\">      <span class=\"keyword\">yield</span> cur;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> fibonacci) &#123;</div><div class=\"line\">  <span class=\"comment\">// truncate the sequence at 1000</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用co模块（基于 Promise 对象的自动执行器），可以实现异步函数的自动执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> somethingAsync();</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> anotherThingAsync();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\">co(gen);</div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>ES6完整支持所有的Unicode,包括新的Unicode字面量和u模式正则，提供了新的API来处理21bit级别的字符串。这些新加特性使得我们的JavaScript应用有能力支持各种语言。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// same as ES5.1</span></div><div class=\"line\"><span class=\"string\">\"𠮷\"</span>.length == <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新的正则匹配模式</span></div><div class=\"line\"><span class=\"string\">\"𠮷\"</span>.match(<span class=\"regexp\">/./u</span>)[<span class=\"number\">0</span>].length == <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新形式</span></div><div class=\"line\"><span class=\"string\">\"\\u&#123;20BB7&#125;\"</span>==<span class=\"string\">\"𠮷\"</span>==<span class=\"string\">\"\\uD842\\uDFB7\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// codePointAt()能够正确处理4个字节储存的字符，返回一个字符的码点</span></div><div class=\"line\"><span class=\"string\">\"𠮷\"</span>.codePointAt(<span class=\"number\">0</span>) == <span class=\"number\">0x20BB7</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// for-of 遍历字符，以整体输出</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> c <span class=\"keyword\">of</span> <span class=\"string\">\"𠮷\"</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(c);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 𠮷</span></div></pre></td></tr></table></figure></p>\n<p>我们也可以在JS中写出Emoji了，很有趣，对不对：</p>\n<p>Modules<br>现代JS应用的开发离不开模块了，ES6对模块的定义提供了语言层面的支持。规范化了各种JavaScript模块加载器，支持运行时动态加载模块，支持异步加载模块。</p>\n<p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量，效率要比 CommonJS 模块的加载方式高。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// lib/math.js 模块的定义</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> pi = <span class=\"number\">3.141593</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// app.js 模块的全部引用</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> math <span class=\"keyword\">from</span> <span class=\"string\">\"lib/math\"</span>;</div><div class=\"line\">alert(<span class=\"string\">\"2π = \"</span> + math.sum(math.pi, math.pi));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// otherApp.js 模块的部分引用</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;sum, pi&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"lib/math\"</span>;</div><div class=\"line\">alert(<span class=\"string\">\"2π = \"</span> + sum(pi, pi));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 模块导出方法</span></div><div class=\"line\"><span class=\"comment\">// lib/mathplusplus.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">\"lib/math\"</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> e = <span class=\"number\">2.71828182846</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 混合引入方法</span></div><div class=\"line\"><span class=\"keyword\">import</span> ln, &#123;pi, e&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"lib/mathplusplus\"</span>;</div><div class=\"line\">alert(<span class=\"string\">\"2π = \"</span> + ln(e)*pi*<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>Module Loaders（其实并非ES6标准的一部分，只是草案）<br>模块加载器支持以下功能：</p>\n<p>动态加载<br>状态隔离<br>全局命名空间隔离<br>编写钩子<br>嵌套<br>默认的模块加载器可以被配置，新的加载器可以被配置来评估加载独立上下文中的内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 动态加载 – ‘System’ 是默认的加载器</span></div><div class=\"line\">System.import(<span class=\"string\">'lib/math'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">\"2π = \"</span> + m.sum(m.pi, m.pi));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新的加载器创建了执行沙盒</span></div><div class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> Loader(&#123;</div><div class=\"line\">  <span class=\"attr\">global</span>: fixup(<span class=\"built_in\">window</span>) <span class=\"comment\">// replace ‘console.log’</span></div><div class=\"line\">&#125;);</div><div class=\"line\">loader.eval(<span class=\"string\">\"console.log('hello world!');\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以直接修改模块的缓存</span></div><div class=\"line\">System.get(<span class=\"string\">'jquery'</span>);</div><div class=\"line\">System.set(<span class=\"string\">'jquery'</span>, Module(&#123;<span class=\"attr\">$</span>: $&#125;)); <span class=\"comment\">// WARNING: not yet finalized</span></div><div class=\"line\"><span class=\"built_in\">Map</span> <span class=\"built_in\">Set</span> <span class=\"built_in\">WeakMap</span> <span class=\"built_in\">WeakSet</span></div><div class=\"line\">ES6为算法提供了新的高效的数据结构，WeakMaps提供了防泄漏的键值对表。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Set类似于数组，但是成员的值都是唯一的，没有重复的值。</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">s.add(<span class=\"string\">\"hello\"</span>).add(<span class=\"string\">\"goodbye\"</span>).add(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">s.size === <span class=\"number\">2</span>;</div><div class=\"line\">s.has(<span class=\"string\">\"hello\"</span>) === <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</span></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">m.set(<span class=\"string\">\"hello\"</span>, <span class=\"number\">42</span>);</div><div class=\"line\">m.set(s, <span class=\"number\">34</span>);</div><div class=\"line\">m.get(s) == <span class=\"number\">34</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// WeakMap结构与Map结构类似，也是用于生成键值对的集合，但是WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名，此外WeakMap的键名所指向的对象，不计入垃圾回收机制。</span></div><div class=\"line\"><span class=\"keyword\">var</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</div><div class=\"line\">wm.set(s, &#123; <span class=\"attr\">extra</span>: <span class=\"number\">42</span> &#125;);</div><div class=\"line\">wm.size === <span class=\"literal\">undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// WeakSet 结构与 Set 类似，也是不重复的值的集合,但是WeakSet 的成员只能是对象，而不能是其他类型的值，此外WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用</span></div><div class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>();</div><div class=\"line\">ws.add(&#123; <span class=\"attr\">data</span>: <span class=\"number\">42</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// Because the added object has no other references, it will not be held in the set</span></div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Proxies\"><a href=\"#Proxies\" class=\"headerlink\" title=\"Proxies\"></a>Proxies</h2><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p>\n<p>可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p>\n<p>需要注意的是目前未被Babel支持，使用时需谨慎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// target参数表示所要拦截的目标对象;</span></div><div class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// handler参数也是一个对象，用来定制拦截行为;</span></div><div class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</div><div class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`Hello, <span class=\"subst\">$&#123;name&#125;</span>!`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成一个Proxy实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</div><div class=\"line\">p.world === <span class=\"string\">'Hello, world!'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对函数同样可以使用代理</span></div><div class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>; &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</div><div class=\"line\">  <span class=\"attr\">apply</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, ...args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</div><div class=\"line\">p() === <span class=\"string\">'I am the proxy'</span>;</div><div class=\"line\"><span class=\"comment\">// Proxy支持的拦截操作如下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handler =</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">get</span>:...,</div><div class=\"line\">  <span class=\"attr\">set</span>:...,</div><div class=\"line\">  <span class=\"attr\">has</span>:...,</div><div class=\"line\">  <span class=\"attr\">deleteProperty</span>:...,</div><div class=\"line\">  <span class=\"attr\">apply</span>:...,</div><div class=\"line\">  <span class=\"attr\">construct</span>:...,</div><div class=\"line\">  <span class=\"attr\">getOwnPropertyDescriptor</span>:...,</div><div class=\"line\">  <span class=\"attr\">defineProperty</span>:...,</div><div class=\"line\">  <span class=\"attr\">getPrototypeOf</span>:...,</div><div class=\"line\">  <span class=\"attr\">setPrototypeOf</span>:...,</div><div class=\"line\">  <span class=\"attr\">enumerate</span>:...,</div><div class=\"line\">  <span class=\"attr\">ownKeys</span>:...,</div><div class=\"line\">  <span class=\"attr\">preventExtensions</span>:...,</div><div class=\"line\">  <span class=\"attr\">isExtensible</span>:...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Babel 不支持，使用时应注意</p>\n<h2 id=\"Symbols\"><a href=\"#Symbols\" class=\"headerlink\" title=\"Symbols\"></a>Symbols</h2><p>Symbol保证每个属性的名字都是独一无二的，这样就从根本上防止了属性名的冲突；<br>它是一种类似于字符串的数据类型,Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述；<br>Symbols是唯一的，单并非私有的，通过Object.getOwnPropertySymbols可以获取对应的值；<br>Symbol 值作为对象属性名时，不能用点运算符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// module scoped symbol</span></div><div class=\"line\">  <span class=\"keyword\">var</span> key = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"key\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\">privateData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[key] = privateData;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  MyClass.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">doStuff</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      ... this[key] ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">c[<span class=\"string\">\"key\"</span>] === <span class=\"literal\">undefined</span></div><div class=\"line\">由于语言限制，Babel只提供部分支持，使用时需要注意</div><div class=\"line\">内置类的继承</div><div class=\"line\">在ES6中，内置的<span class=\"built_in\">Array</span>,<span class=\"built_in\">Date</span>,DOM Element可以被继承以拓展了。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// User code of Array subclass</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(...args) &#123; <span class=\"keyword\">super</span>(...args); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> MyArray();</div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">12</span>;</div><div class=\"line\">arr.length == <span class=\"number\">2</span></div><div class=\"line\">babel 部分支持，由于ES5引擎的限制<span class=\"built_in\">Date</span>,<span class=\"built_in\">Array</span>,<span class=\"built_in\">Error</span>不被支持，但是HTMLElement是被支持的</div><div class=\"line\"><span class=\"built_in\">Math</span> + <span class=\"built_in\">Number</span> + <span class=\"built_in\">String</span> + <span class=\"built_in\">Array</span> + <span class=\"built_in\">Object</span> APIs</div><div class=\"line\">ES6 为很多旧有对象添加了新的API，这些对象包括<span class=\"built_in\">Math</span>,<span class=\"built_in\">Array</span>器，<span class=\"built_in\">String</span>,<span class=\"built_in\">Object</span>，如下：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Number</span>.EPSILON</div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"NaN\"</span>) <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Math</span>.acosh(<span class=\"number\">3</span>) <span class=\"comment\">// 1.762747174039086</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.hypot(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.imul(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">32</span>) - <span class=\"number\">1</span>, <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">32</span>) - <span class=\"number\">2</span>) <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"abcde\"</span>.includes(<span class=\"string\">\"cd\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"string\">\"abc\"</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"abcabcabc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'*'</span>)) <span class=\"comment\">// Returns a real Array</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// Similar to new Array(...), but without special one-arg behavior</span></div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>) <span class=\"comment\">// [0,7,7]</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].find(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x == <span class=\"number\">3</span>) <span class=\"comment\">// 3</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].findIndex(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x == <span class=\"number\">2</span>) <span class=\"comment\">// 1</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">3</span>, <span class=\"number\">0</span>) <span class=\"comment\">// [1, 2, 3, 1, 2]</span></div><div class=\"line\">[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].entries() <span class=\"comment\">// iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]</span></div><div class=\"line\">[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].keys() <span class=\"comment\">// iterator 0, 1, 2</span></div><div class=\"line\">[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].values() <span class=\"comment\">// iterator \"a\", \"b\", \"c\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(Point, &#123; <span class=\"attr\">origin</span>: <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>,<span class=\"number\">0</span>) &#125;)</div></pre></td></tr></table></figure></p>\n<p>babel 通过 polyfill 提供部分支持<br>二进制和八进制字面量<br>ES6添加了二进制和八进制数值的字面量定义方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0b111110111</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"number\">0o767</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>babel 只支持字面量形式，不支持 Number(“0o767”)形式<br>Promise<br>Promise为异步编程提供了一种新的方式，Promise把未来将用到的值当做一等对象，Promise在很多前端库中已经有所支持了。这个平时用得最多了，还没使用的推荐试试。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">duration = <span class=\"number\">0</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(resolve, duration);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = timeout(<span class=\"number\">1000</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> timeout(<span class=\"number\">2000</span>);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"hmm\"</span>);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([timeout(<span class=\"number\">100</span>), timeout(<span class=\"number\">200</span>)]);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Reflect-API\"><a href=\"#Reflect-API\" class=\"headerlink\" title=\"Reflect API\"></a>Reflect API</h2><p>Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API，作用如下：</p>\n<p>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上；<br>修改某些Object方法的返回结果，让其变得更合理；<br>让Object操作都变成函数行为，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。<br>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> O = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(O, <span class=\"string\">'b'</span>, &#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>&#125;);</div><div class=\"line\">O[<span class=\"built_in\">Symbol</span>(<span class=\"string\">'c'</span>)] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(O); <span class=\"comment\">// ['a', 'b', Symbol(c)]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.c = a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"built_in\">Reflect</span>.construct(C, [<span class=\"number\">20</span>, <span class=\"number\">22</span>]);</div><div class=\"line\">instance.c; <span class=\"comment\">// 42</span></div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Tail-Calls\"><a href=\"#Tail-Calls\" class=\"headerlink\" title=\"Tail Calls\"></a>Tail Calls</h2><p>尾部调用被保证不能无限拓展栈，这让有无限制输入时的递归算法更加安全。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, acc = <span class=\"number\">1</span></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> acc;</div><div class=\"line\">    <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * acc);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 堆栈越来越常用，在ES6中其使用更加安全了</span></div><div class=\"line\">factorial(<span class=\"number\">100000</span>)</div></pre></td></tr></table></figure></p>\n<p>说明<br>上文对ES6的新特性都做了简单的描述，但是关于Reflect API和Proxies,由于本人对他们的理解还不够透彻，说得可能有些不清不楚。希望阅读本文让你有收获，有任何疑问，大家也可以一起讨论。</p>\n","site":{"data":{}},"excerpt":"<p>相比ES5，ES6提供了太多的更新，简单说来，主要为以下方面（大家可以依据自己不算清晰的点选择性查看本文）：</p>\n<ul>\n<li>Arrows,箭头函数，</li>\n<li>Classes，类</li>\n<li>Enhanced object literals，增强的对象字面值</li>\n<li>Template strings：模板字符串</li>\n<li>Destructuring：解构</li>\n<li>Default + rest + spread：参数默认值，rest参数,扩展运算符</li>\n<li>Let + const:命名声明的新方式</li>\n<li>Iterators + for..of：遍历器</li>\n<li>Generators：生成器</li>\n<li>Unicode：更广泛的编码支持</li>\n<li>Modules：语言层面上支持的模块机制</li>\n<li>Module loaders：模块加载器","more":"</li>\n<li>Map + set + weakmap + weakset：新的数据结构</li>\n<li>Proxies：代理器</li>\n<li>Symbols：新的基本类型，独一无二的值</li>\n<li>Subclassable built-ins：类的继承</li>\n<li>Promises：</li>\n<li>Math + number + string + array + object apis：拓展了一些内置对象的方法</li>\n<li>Binary and octal literals：二进制八进制字面量</li>\n<li>Reflect api：操作对象的新api</li>\n<li>Tail calls:尾调用<h2 id=\"Arrows箭头函数\"><a href=\"#Arrows箭头函数\" class=\"headerlink\" title=\"Arrows箭头函数\"></a>Arrows箭头函数</h2>箭头函数使用类似于=&gt;这样的语法定义函数，支持表达式模式和语句模式，不过其最大特点在于和父作用域具有一样的this。我们知道普通函数的this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。使用箭头函数时再也不用担心this跳来跳去了。<br>此外如果箭头函数如果定义在另一个函数里面，箭头函数会共享它父函数的arguments变量。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 表达式模式箭头函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> odds = evens.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> nums = evens.map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> v + i);</div><div class=\"line\"><span class=\"keyword\">var</span> pairs = evens.map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> (&#123;<span class=\"attr\">even</span>: v, <span class=\"attr\">odd</span>: v + <span class=\"number\">1</span>&#125;));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 语句模式箭头函数</span></div><div class=\"line\">nums.forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (v % <span class=\"number\">5</span> === <span class=\"number\">0</span>)</div><div class=\"line\">    fives.push(v);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 和父作用域具有相同的this</span></div><div class=\"line\"><span class=\"keyword\">var</span> bob = &#123;</div><div class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">  <span class=\"attr\">_friends</span>: [],</div><div class=\"line\">  printFriends() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._name + <span class=\"string\">\" knows \"</span> + f));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> example = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> numbers = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> number <span class=\"keyword\">of</span> <span class=\"built_in\">arguments</span>) &#123;</div><div class=\"line\">      numbers.push(number * number);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> numbers;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> example();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">square(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7.5</span>, <span class=\"number\">8</span>, <span class=\"number\">11.5</span>, <span class=\"number\">21</span>); <span class=\"comment\">// returns: [4, 16, 56.25, 64, 132.25, 441]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><p>JavaScript中其实并不存在真正的类，ES6的类其实是基于原型链模拟面向对象的一种语法糖。其本质上可以看做是构造函数的另一种写法。<br>与真的类一样，它支持super继承，实例，静态方法和constructor方法。<br>如果你也使用React，工作中定义模块时一定没少写过class A extends React.Component{}吧。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 通过extends关键字实现继承</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SkinnedMesh</span> <span class=\"keyword\">extends</span> <span class=\"title\">THREE</span>.<span class=\"title\">Mesh</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。</span></div><div class=\"line\">  <span class=\"comment\">//一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(geometry, materials) &#123;</div><div class=\"line\">    <span class=\"comment\">// super表示父类的构造函数，用来新建父类的this对象,</span></div><div class=\"line\">    <span class=\"comment\">// 子类必须在constructor方法中调用super方法，否则新建实例时会报错。如果不调用super方法，子类就得不到this对象。</span></div><div class=\"line\">    <span class=\"keyword\">super</span>(geometry, materials);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//在构造方法中绑定this,可以防止实例找不到this</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.idMatrix = SkinnedMesh.defaultMatrix();</div><div class=\"line\">    <span class=\"keyword\">this</span>.bones = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.boneMatrices = [];</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 非定义在this上的方法都会被直接定义在原型链上</span></div><div class=\"line\">  update(camera) &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">    <span class=\"comment\">// super在此处作为对象，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.update();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 可以使用get和set关键字，对某个属性设置存值函数和取值函数</span></div><div class=\"line\">  get boneCount() &#123;</div><div class=\"line\">  <span class=\"comment\">// 类的方法内部如果含有this，它默认指向类的实例</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.bones.length;</div><div class=\"line\">  &#125;</div><div class=\"line\">  set matrixType(matrixType) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.idMatrix = SkinnedMesh[matrixType]();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</span></div><div class=\"line\">  <span class=\"keyword\">static</span> defaultMatrix() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> THREE.Matrix4();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 类的所有实例共享一个原型对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> skin = <span class=\"keyword\">new</span> SkinnedMesh();</div><div class=\"line\"><span class=\"comment\">// 静态方法需要直接通过类调用</span></div><div class=\"line\">SkinnedMesh.defaultMatrix()</div></pre></td></tr></table></figure></p>\n<h2 id=\"对象的拓展\"><a href=\"#对象的拓展\" class=\"headerlink\" title=\"对象的拓展\"></a>对象的拓展</h2><p>ES6中对象的使用方法得以拓展，主要包括以下几点：</p>\n<ul>\n<li>属性和方法可以简洁表示；</li>\n<li>允许以表达式的模式定义属性名；</li>\n<li>可以通过<strong>proto</strong>读取或设置当前对象的prototype对象;</li>\n<li>使用Object.is({},{})判断两个对象是否完全相对，类似于===;</li>\n<li>Object.assign(target, source1, source2)合并对象；（浅拷贝）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"comment\">// __proto__用以设置当前对象的prototype对象，不推荐使用，推荐使用Object.setPrototypeOf() </span></div><div class=\"line\">    __proto__: theProtoObj,</div><div class=\"line\">    <span class=\"comment\">//‘handler:handler’可简写为handler（只需要写变量名就可以实现变量名为变量名，变量值为属性值）</span></div><div class=\"line\">    handler,</div><div class=\"line\">    <span class=\"comment\">// 简写在定义方法的时候同样有效</span></div><div class=\"line\">    toString() &#123;</div><div class=\"line\">     <span class=\"comment\">// Super calls</span></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">\"d \"</span> + <span class=\"keyword\">super</span>.toString();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 方括号内的表达式用以计算属性名</span></div><div class=\"line\">    [ <span class=\"string\">'prop_'</span> + <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> <span class=\"number\">42</span>)() ]: <span class=\"number\">42</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>模板字符串是一种组合字符串的语法糖，其使用类似于Perl,Python等语言的字符串修改方法类似，它的出现让我们拼合字符串时方便多了。目前相互中几乎所有字符串的拼接都用这个了，异常方便。</p>\n<p>模板字符串定义在两个反撇号中；<br>在模板字符串中可以直接换行，格式会得以保留；<br>通过${}可以很方便的在模板字符串中添加变量；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 把字符串放在``(注意不是引号)中就可以使用</span></div><div class=\"line\"><span class=\"string\">`In JavaScript '\\n' is a line-feed.`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 模板字符串保留了换行</span></div><div class=\"line\"><span class=\"string\">`In JavaScript this is</span></div><div class=\"line\"> not legal.`</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在字符串中添加变量的方法，变量直接放在$&#123;&#125;中即可</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 拼合请求时异常方便了</span></div><div class=\"line\">POST<span class=\"string\">`http://foo.org/bar?a=<span class=\"subst\">$&#123;a&#125;</span>&amp;b=<span class=\"subst\">$&#123;b&#125;</span></span></div><div class=\"line\">     Content-Type: application/json</div><div class=\"line\">     X-Credentials: <span class=\"subst\">$&#123;credentials&#125;</span></div><div class=\"line\">     &#123; \"foo\": <span class=\"subst\">$&#123;foo&#125;</span>,</div><div class=\"line\">       \"bar\": <span class=\"subst\">$&#123;bar&#125;</span>&#125;`(myOnReadyStateChangeHandler);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Destructuring-解构\"><a href=\"#Destructuring-解构\" class=\"headerlink\" title=\"Destructuring 解构\"></a>Destructuring 解构</h2><p>解构使用模式匹配的方法绑定变量和值，数组和对象都可使用。解构在绑定失败的时会实现软绑定，即没有匹配值时，返回undefined。使用方法可见示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组解构</span></div><div class=\"line\"><span class=\"keyword\">var</span> [a, , b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"comment\">// a = 1,b = 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// React中常见以下用法</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;a, b, c&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对象解构也能用在函数的参数中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\">&#123;name: x&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\">g(&#123;<span class=\"attr\">name</span>: <span class=\"number\">5</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 绑定失败时返回undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> [a] = [];</div><div class=\"line\">a === <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 解构时也可以绑定默认值</span></div><div class=\"line\"><span class=\"keyword\">var</span> [a = <span class=\"number\">1</span>] = [];</div><div class=\"line\">a === <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 配合默认参数使用结构</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">r</span>(<span class=\"params\">&#123;x, y, w = <span class=\"number\">10</span>, h = <span class=\"number\">10</span>&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y + w + h;</div><div class=\"line\">&#125;</div><div class=\"line\">r(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;) === <span class=\"number\">23</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"默认值，剩余值和拓展值\"><a href=\"#默认值，剩余值和拓展值\" class=\"headerlink\" title=\"默认值，剩余值和拓展值\"></a>默认值，剩余值和拓展值</h2><p>ES6允许我们在给变量添加默认值<br>使用拓展值使得函数调用时可传入数组作为连续的参数<br>利用剩余值特性我们可以把函数尾部的参数转换为一个数组，现在使用rest就可以替换以前的arguments对象了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 给函数的参数添加默认值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y=<span class=\"number\">12</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// y is 12 if not passed (or passed as undefined)</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 可以只传参数x的值了</span></div><div class=\"line\">f(<span class=\"number\">3</span>) == <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用rest</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, ...y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// y is an Array</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x * y.length;</div><div class=\"line\">&#125;</div><div class=\"line\">f(<span class=\"number\">3</span>, <span class=\"string\">\"hello\"</span>, <span class=\"literal\">true</span>) == <span class=\"number\">6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 传入数组作为参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 直接传入数组当作上面函数的参数</span></div><div class=\"line\">f(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) == <span class=\"number\">6</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Let-和-Const\"><a href=\"#Let-和-Const\" class=\"headerlink\" title=\"Let 和 Const\"></a>Let 和 Const</h2><p>ES6新增了块作用域，新增了两种定义变量的方法，定义变量时推荐使用let替代var，let定义的变量在块作用域内有效，const用以指定固定值，这两类新定义的变量不允许在定义前使用，也不允许重复定义。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> x;</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> x = <span class=\"string\">\"sneaky\"</span>;</div><div class=\"line\">      <span class=\"comment\">// 改变const</span></div><div class=\"line\">      x = <span class=\"string\">\"foo\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 重复定义会出错</span></div><div class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"string\">\"inner\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里想到一个使用var时新手特别容易犯的问题</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;, i*<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用var 所有的结果都是10</span></div><div class=\"line\"><span class=\"comment\">// 使用let 结果就是预想要的结果</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">    &#125;, i*<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Iterators-For-Of\"><a href=\"#Iterators-For-Of\" class=\"headerlink\" title=\"Iterators + For..Of\"></a>Iterators + For..Of</h2><p>ES6为部署了Iterator接口的各种不同的数据结构提供了统一的访问机制。其本质是一个指针对象。每次调用next方法，可以把指针指向数据结构的下一个成员。具体说来，每一次调用next方法，都会返回数据结构的当前成员的信息（一个包含value和done两个属性的对象，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束）。</p>\n<p>凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> fibonacci = &#123;</div><div class=\"line\">  <span class=\"comment\">// 一个数据结构只要具有Symbol.iterator属性，就可被认为是可遍历的，`Symbol.iterator`是一个表达式，返回Symbol对象的iterator属性，所以需要放在[]中，本质上它是当前数据结构的遍历器生成函数。</span></div><div class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>, cur = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      next() &#123;</div><div class=\"line\">        [pre, cur] = [cur, pre + cur];</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: cur &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fibonacci部署了Symbol.iterator属性，只要done不为true就会一直遍历</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> fibonacci) &#123;</div><div class=\"line\"><span class=\"comment\">// 调用1000以内的值做遍历</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>原生具备Iterator接口的数据结构有以下几种:数组、某些类似数组的对象（字符串、DOM NodeList 对象、arguments对象）、Set和Map结构。<br>对象（Object）之所以没有默认部署Iterator接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。</p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>可以从两个角度理解Generators，它既是状态机也是一个遍历器对象生成函数。执行该函数可以理解为启动了遍历器，之后每次执行next()函数则每次执行到yield处。</p>\n<p>值得注意的是执行next()时可添加参数，这实现了在函数运行的不同阶段，可以从外部向内部注入不同的值，</p>\n<p>生成器使用function<em>和yield简化了迭代过程，使用function</em>定义的函数返回了一个生成器实例。<br>生成器是迭代器的子类，但是包含next和throw。这使得值可以回流到生成器，yield是一个可以返回值的表达式。</p>\n<p>for…of循环可以自动遍历 Generator 函数时生成的Iterator对象，此时不再需要调用next方法。</p>\n<p>Generator的return方法会返回固定的值，终结遍历Generator函数。返回值的value属性就是return方法的参数，返回值的done属性为true。</p>\n<p>结合co模块可以实现比Promise更加优雅的异步调用方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用generator函数实现上述遍历器对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> fibonacci = &#123;</div><div class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pre = <span class=\"number\">0</span>, cur = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> temp = pre;</div><div class=\"line\">      pre = cur;</div><div class=\"line\">      cur += temp;</div><div class=\"line\">      <span class=\"keyword\">yield</span> cur;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> fibonacci) &#123;</div><div class=\"line\">  <span class=\"comment\">// truncate the sequence at 1000</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(n);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用co模块（基于 Promise 对象的自动执行器），可以实现异步函数的自动执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> somethingAsync();</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> anotherThingAsync();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\">co(gen);</div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>ES6完整支持所有的Unicode,包括新的Unicode字面量和u模式正则，提供了新的API来处理21bit级别的字符串。这些新加特性使得我们的JavaScript应用有能力支持各种语言。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// same as ES5.1</span></div><div class=\"line\"><span class=\"string\">\"𠮷\"</span>.length == <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新的正则匹配模式</span></div><div class=\"line\"><span class=\"string\">\"𠮷\"</span>.match(<span class=\"regexp\">/./u</span>)[<span class=\"number\">0</span>].length == <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新形式</span></div><div class=\"line\"><span class=\"string\">\"\\u&#123;20BB7&#125;\"</span>==<span class=\"string\">\"𠮷\"</span>==<span class=\"string\">\"\\uD842\\uDFB7\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// codePointAt()能够正确处理4个字节储存的字符，返回一个字符的码点</span></div><div class=\"line\"><span class=\"string\">\"𠮷\"</span>.codePointAt(<span class=\"number\">0</span>) == <span class=\"number\">0x20BB7</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// for-of 遍历字符，以整体输出</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> c <span class=\"keyword\">of</span> <span class=\"string\">\"𠮷\"</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(c);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 𠮷</span></div></pre></td></tr></table></figure></p>\n<p>我们也可以在JS中写出Emoji了，很有趣，对不对：</p>\n<p>Modules<br>现代JS应用的开发离不开模块了，ES6对模块的定义提供了语言层面的支持。规范化了各种JavaScript模块加载器，支持运行时动态加载模块，支持异步加载模块。</p>\n<p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量，效率要比 CommonJS 模块的加载方式高。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// lib/math.js 模块的定义</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> pi = <span class=\"number\">3.141593</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// app.js 模块的全部引用</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> math <span class=\"keyword\">from</span> <span class=\"string\">\"lib/math\"</span>;</div><div class=\"line\">alert(<span class=\"string\">\"2π = \"</span> + math.sum(math.pi, math.pi));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// otherApp.js 模块的部分引用</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;sum, pi&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"lib/math\"</span>;</div><div class=\"line\">alert(<span class=\"string\">\"2π = \"</span> + sum(pi, pi));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 模块导出方法</span></div><div class=\"line\"><span class=\"comment\">// lib/mathplusplus.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">\"lib/math\"</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> e = <span class=\"number\">2.71828182846</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 混合引入方法</span></div><div class=\"line\"><span class=\"keyword\">import</span> ln, &#123;pi, e&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"lib/mathplusplus\"</span>;</div><div class=\"line\">alert(<span class=\"string\">\"2π = \"</span> + ln(e)*pi*<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>Module Loaders（其实并非ES6标准的一部分，只是草案）<br>模块加载器支持以下功能：</p>\n<p>动态加载<br>状态隔离<br>全局命名空间隔离<br>编写钩子<br>嵌套<br>默认的模块加载器可以被配置，新的加载器可以被配置来评估加载独立上下文中的内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 动态加载 – ‘System’ 是默认的加载器</span></div><div class=\"line\">System.import(<span class=\"string\">'lib/math'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">\"2π = \"</span> + m.sum(m.pi, m.pi));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 新的加载器创建了执行沙盒</span></div><div class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> Loader(&#123;</div><div class=\"line\">  <span class=\"attr\">global</span>: fixup(<span class=\"built_in\">window</span>) <span class=\"comment\">// replace ‘console.log’</span></div><div class=\"line\">&#125;);</div><div class=\"line\">loader.eval(<span class=\"string\">\"console.log('hello world!');\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以直接修改模块的缓存</span></div><div class=\"line\">System.get(<span class=\"string\">'jquery'</span>);</div><div class=\"line\">System.set(<span class=\"string\">'jquery'</span>, Module(&#123;<span class=\"attr\">$</span>: $&#125;)); <span class=\"comment\">// WARNING: not yet finalized</span></div><div class=\"line\"><span class=\"built_in\">Map</span> <span class=\"built_in\">Set</span> <span class=\"built_in\">WeakMap</span> <span class=\"built_in\">WeakSet</span></div><div class=\"line\">ES6为算法提供了新的高效的数据结构，WeakMaps提供了防泄漏的键值对表。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Set类似于数组，但是成员的值都是唯一的，没有重复的值。</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">s.add(<span class=\"string\">\"hello\"</span>).add(<span class=\"string\">\"goodbye\"</span>).add(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">s.size === <span class=\"number\">2</span>;</div><div class=\"line\">s.has(<span class=\"string\">\"hello\"</span>) === <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</span></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">m.set(<span class=\"string\">\"hello\"</span>, <span class=\"number\">42</span>);</div><div class=\"line\">m.set(s, <span class=\"number\">34</span>);</div><div class=\"line\">m.get(s) == <span class=\"number\">34</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// WeakMap结构与Map结构类似，也是用于生成键值对的集合，但是WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名，此外WeakMap的键名所指向的对象，不计入垃圾回收机制。</span></div><div class=\"line\"><span class=\"keyword\">var</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</div><div class=\"line\">wm.set(s, &#123; <span class=\"attr\">extra</span>: <span class=\"number\">42</span> &#125;);</div><div class=\"line\">wm.size === <span class=\"literal\">undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// WeakSet 结构与 Set 类似，也是不重复的值的集合,但是WeakSet 的成员只能是对象，而不能是其他类型的值，此外WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用</span></div><div class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>();</div><div class=\"line\">ws.add(&#123; <span class=\"attr\">data</span>: <span class=\"number\">42</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// Because the added object has no other references, it will not be held in the set</span></div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Proxies\"><a href=\"#Proxies\" class=\"headerlink\" title=\"Proxies\"></a>Proxies</h2><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p>\n<p>可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p>\n<p>需要注意的是目前未被Babel支持，使用时需谨慎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// target参数表示所要拦截的目标对象;</span></div><div class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// handler参数也是一个对象，用来定制拦截行为;</span></div><div class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</div><div class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`Hello, <span class=\"subst\">$&#123;name&#125;</span>!`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成一个Proxy实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</div><div class=\"line\">p.world === <span class=\"string\">'Hello, world!'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对函数同样可以使用代理</span></div><div class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>; &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</div><div class=\"line\">  <span class=\"attr\">apply</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, ...args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</div><div class=\"line\">p() === <span class=\"string\">'I am the proxy'</span>;</div><div class=\"line\"><span class=\"comment\">// Proxy支持的拦截操作如下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handler =</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">get</span>:...,</div><div class=\"line\">  <span class=\"attr\">set</span>:...,</div><div class=\"line\">  <span class=\"attr\">has</span>:...,</div><div class=\"line\">  <span class=\"attr\">deleteProperty</span>:...,</div><div class=\"line\">  <span class=\"attr\">apply</span>:...,</div><div class=\"line\">  <span class=\"attr\">construct</span>:...,</div><div class=\"line\">  <span class=\"attr\">getOwnPropertyDescriptor</span>:...,</div><div class=\"line\">  <span class=\"attr\">defineProperty</span>:...,</div><div class=\"line\">  <span class=\"attr\">getPrototypeOf</span>:...,</div><div class=\"line\">  <span class=\"attr\">setPrototypeOf</span>:...,</div><div class=\"line\">  <span class=\"attr\">enumerate</span>:...,</div><div class=\"line\">  <span class=\"attr\">ownKeys</span>:...,</div><div class=\"line\">  <span class=\"attr\">preventExtensions</span>:...,</div><div class=\"line\">  <span class=\"attr\">isExtensible</span>:...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Babel 不支持，使用时应注意</p>\n<h2 id=\"Symbols\"><a href=\"#Symbols\" class=\"headerlink\" title=\"Symbols\"></a>Symbols</h2><p>Symbol保证每个属性的名字都是独一无二的，这样就从根本上防止了属性名的冲突；<br>它是一种类似于字符串的数据类型,Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述；<br>Symbols是唯一的，单并非私有的，通过Object.getOwnPropertySymbols可以获取对应的值；<br>Symbol 值作为对象属性名时，不能用点运算符。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyClass = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// module scoped symbol</span></div><div class=\"line\">  <span class=\"keyword\">var</span> key = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"key\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\">privateData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[key] = privateData;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  MyClass.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">doStuff</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      ... this[key] ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> MyClass;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">c[<span class=\"string\">\"key\"</span>] === <span class=\"literal\">undefined</span></div><div class=\"line\">由于语言限制，Babel只提供部分支持，使用时需要注意</div><div class=\"line\">内置类的继承</div><div class=\"line\">在ES6中，内置的<span class=\"built_in\">Array</span>,<span class=\"built_in\">Date</span>,DOM Element可以被继承以拓展了。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// User code of Array subclass</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(...args) &#123; <span class=\"keyword\">super</span>(...args); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> MyArray();</div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">12</span>;</div><div class=\"line\">arr.length == <span class=\"number\">2</span></div><div class=\"line\">babel 部分支持，由于ES5引擎的限制<span class=\"built_in\">Date</span>,<span class=\"built_in\">Array</span>,<span class=\"built_in\">Error</span>不被支持，但是HTMLElement是被支持的</div><div class=\"line\"><span class=\"built_in\">Math</span> + <span class=\"built_in\">Number</span> + <span class=\"built_in\">String</span> + <span class=\"built_in\">Array</span> + <span class=\"built_in\">Object</span> APIs</div><div class=\"line\">ES6 为很多旧有对象添加了新的API，这些对象包括<span class=\"built_in\">Math</span>,<span class=\"built_in\">Array</span>器，<span class=\"built_in\">String</span>,<span class=\"built_in\">Object</span>，如下：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Number</span>.EPSILON</div><div class=\"line\"><span class=\"built_in\">Number</span>.isInteger(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">\"NaN\"</span>) <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Math</span>.acosh(<span class=\"number\">3</span>) <span class=\"comment\">// 1.762747174039086</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.hypot(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.imul(<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">32</span>) - <span class=\"number\">1</span>, <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">32</span>) - <span class=\"number\">2</span>) <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"abcde\"</span>.includes(<span class=\"string\">\"cd\"</span>) <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"string\">\"abc\"</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"abcabcabc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'*'</span>)) <span class=\"comment\">// Returns a real Array</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// Similar to new Array(...), but without special one-arg behavior</span></div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>) <span class=\"comment\">// [0,7,7]</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].find(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x == <span class=\"number\">3</span>) <span class=\"comment\">// 3</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].findIndex(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x == <span class=\"number\">2</span>) <span class=\"comment\">// 1</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">3</span>, <span class=\"number\">0</span>) <span class=\"comment\">// [1, 2, 3, 1, 2]</span></div><div class=\"line\">[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].entries() <span class=\"comment\">// iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]</span></div><div class=\"line\">[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].keys() <span class=\"comment\">// iterator 0, 1, 2</span></div><div class=\"line\">[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].values() <span class=\"comment\">// iterator \"a\", \"b\", \"c\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(Point, &#123; <span class=\"attr\">origin</span>: <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>,<span class=\"number\">0</span>) &#125;)</div></pre></td></tr></table></figure></p>\n<p>babel 通过 polyfill 提供部分支持<br>二进制和八进制字面量<br>ES6添加了二进制和八进制数值的字面量定义方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0b111110111</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"number\">0o767</span> === <span class=\"number\">503</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>babel 只支持字面量形式，不支持 Number(“0o767”)形式<br>Promise<br>Promise为异步编程提供了一种新的方式，Promise把未来将用到的值当做一等对象，Promise在很多前端库中已经有所支持了。这个平时用得最多了，还没使用的推荐试试。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">duration = <span class=\"number\">0</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(resolve, duration);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = timeout(<span class=\"number\">1000</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> timeout(<span class=\"number\">2000</span>);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"hmm\"</span>);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([timeout(<span class=\"number\">100</span>), timeout(<span class=\"number\">200</span>)]);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Reflect-API\"><a href=\"#Reflect-API\" class=\"headerlink\" title=\"Reflect API\"></a>Reflect API</h2><p>Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API，作用如下：</p>\n<p>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上；<br>修改某些Object方法的返回结果，让其变得更合理；<br>让Object操作都变成函数行为，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。<br>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> O = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(O, <span class=\"string\">'b'</span>, &#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>&#125;);</div><div class=\"line\">O[<span class=\"built_in\">Symbol</span>(<span class=\"string\">'c'</span>)] = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(O); <span class=\"comment\">// ['a', 'b', Symbol(c)]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.c = a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"built_in\">Reflect</span>.construct(C, [<span class=\"number\">20</span>, <span class=\"number\">22</span>]);</div><div class=\"line\">instance.c; <span class=\"comment\">// 42</span></div></pre></td></tr></table></figure></p>\n<p>实际使用时需引入polyfill</p>\n<h2 id=\"Tail-Calls\"><a href=\"#Tail-Calls\" class=\"headerlink\" title=\"Tail Calls\"></a>Tail Calls</h2><p>尾部调用被保证不能无限拓展栈，这让有无限制输入时的递归算法更加安全。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, acc = <span class=\"number\">1</span></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    'use strict'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> acc;</div><div class=\"line\">    <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * acc);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 堆栈越来越常用，在ES6中其使用更加安全了</span></div><div class=\"line\">factorial(<span class=\"number\">100000</span>)</div></pre></td></tr></table></figure></p>\n<p>说明<br>上文对ES6的新特性都做了简单的描述，但是关于Reflect API和Proxies,由于本人对他们的理解还不够透彻，说得可能有些不清不楚。希望阅读本文让你有收获，有任何疑问，大家也可以一起讨论。</p>"},{"title":"Vue 动态组件","author":"Ao","date":"2017-08-08T09:26:15.000Z","_content":"<div><p>翻译自 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dynamic Components in Vue.js</a></p>\n<p>这篇文章将会教你如何使用Vue中的<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcn.vuejs.org%2Fguide%2Fcomponents.html%23u52A8_u6001_u7EC4_u4EF6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动态组件</a>。当创建小型的单页应用时，这些小型应用可能并不需要vue-router来控制路由，我们只想简单地切换不同的组件来达到不同的展示效果。<br><a></a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/ec713d14e8c651b1f465981025a9a268?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>Vue中的动态组件要求你指定一个挂载点，在这个挂载点下你可以动态地切换组件。在这篇教程中，我们将通过几个例子来展示如何使用动态组件。我们会创建一个动态组件，学习使用keep-alive指令参数，最后我们还会在组件的切换之间添加一些过渡效果。下面开始吧：</p>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" title=\"创建动态组件\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>创建动态组件</h2><p>假设我们正在为一个Blog做个简单的导航栏，我们想添加两个页面：</p>\n<ul>\n<li>一个用于管理已经存在的博客文章</li>\n<li>一个用于创建新的博客文章</li>\n</ul>\n<p>稍后，我们会组件化这两个页面。现在，让我们从头一步步来吧，我们把这个简单的应用挂载到body下：</p>\n\n\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({\n  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">'body'</span>\n})</code></pre>\n\n \n\n<p>添加导航栏，在头部引入<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcdn.bootcss.com%2Fbootstrap%2F3.3.6%2Fcss%2Fbootstrap.min.css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BootStrop 3.3.6</a>：</p>\n\n\n<pre><code class=\"hljs sql\"><div class=\"header clearfix\">\n  <nav>\n    <ul class=\"nav nav-pills pull-right\">\n      <li role=\"presentation\">\n        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Manage Posts</a>\n      </li>\n      <li role=\"presentation\">\n        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span class=\"hljs-keyword\">Create</span> Post</a>\n      </li>\n    </ul>\n  </nav>\n  <h3 class=\"text-muted\"><span class=\"hljs-keyword\">Admin</span> Panel</h3>\n</div>\n<div class=\"container\">\n  \n</div></code></pre>\n\n\n\n<p>运行程序，我们会得到如下图所示的效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/d84bc4f141f8195f8bdbeb1f271d56be?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>现在，我们这个小小的应用已经有了一个大概的结构，下面我们开始创建两个组件：一个用于管理已经存在的博客文章，一个用于创建新的博客文章。如果你还不了解如何在Vue中创建组件，建议你看看<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个教程</a>，或者看官方的教程，那里已经说得够明白了。</p>\n<p>下面创建一个<code>manage-posts</code>组件，并模拟一些文章标题数据：</p>\n\n\n<pre><code class=\"hljs haskell\"><span class=\"hljs-type\">Vue</span>\n.component('manage-posts', {\n  template: '#manage-template',\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: function() {\n    <span class=\"hljs-title\">return</span> {\n      <span class=\"hljs-title\">posts</span>: [\n        '<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span>: <span class=\"hljs-type\">The</span> <span class=\"hljs-type\">Basics</span>',\n        '<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span> <span class=\"hljs-type\">Components</span>',\n        '<span class=\"hljs-type\">Server</span> <span class=\"hljs-type\">Side</span> <span class=\"hljs-type\">Rendering</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-type\">Vue</span>',\n        '<span class=\"hljs-type\">Vue</span> + <span class=\"hljs-type\">Firebase</span>'\n      ]\n    }</span>\n  }\n})</code></pre>\n\n<p>接着为组件<code>manage-posts</code>创建一个模板：</p>\n\n<pre><code class=\"hljs\"><template id=\"manage-template\"></template></code></pre>\n\n\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/eb0c391f556ed90e1f22f0ffb4b1e7dd?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>目前为止，我们已经有了导航栏和<code>mange-posts</code>组件，下面我们添加<code>create-post</code>组件，并把它们结合起来：</p>\n\n<pre><code class=\"hljs sql\">Vue.component('<span class=\"hljs-keyword\">create</span>-post<span class=\"hljs-string\">', {\n  template: '</span>#<span class=\"hljs-keyword\">create</span>-<span class=\"hljs-keyword\">template</span><span class=\"hljs-string\">'\n})</span></code></pre>\n\n\n\n<p>模板：</p>\n\n<pre><code class=\"hljs\"><template id=\"create-template\"></template></code></pre>\n\n\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/731e983132a27b38d35b681c908ce17b?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>好了，组件都已准备完毕，下面我们进入本文重点：把这些组件制作成动态组件。</p>\n<p>当一个用户点击<strong>Manage Posts</strong>按钮，我们想让Vue渲染manage-posts组件。同样的，当点击<strong>Create Post</strong>按钮，渲染create-post组件，</p>\n<p>实现动态组件我们需要<code><component></component></code>元素，我们把它当做动态组件的挂载点，然后在该元素上通过<code>is</code>属性指定我们需要渲染的组件。如此，我们可以通过下面的方式渲染manage-post组件：</p>\n\n<pre><code class=\"hljs\"><div class=\"container\">\n  \n  <component is=\"manage-posts\"></component>\n</div></code></pre>\n<p>效果图如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/84cc80b518f5581e5730df0dd4f026f8?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>然而，这种硬编码的方式似乎不是所谓地<strong>动态</strong>，我们目前仍然无法通过点击不同的按钮来展示不同的组件。</p>\n<p>聪明的你也许已经想到了Vue的数据绑定。我们只需在data中定义一个名为currentView的属性，然后再对is属性进行数据绑定就行了，很简单：</p>\n\n\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({\n  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">'body'</span>,\n  <span class=\"hljs-attribute\">data</span>: {\n    <span class=\"hljs-attribute\">currentView</span>: <span class=\"hljs-string\">'manage-posts'</span>\n  }\n})</code></pre>\n<pre><code class=\"hljs\"><div class=\"container\">\n  \n  <component :is=\"currentView\"></component>\n</div></code></pre>\n<p>最后，我们再给导航栏的两个按钮添加点击事件，这样用户每次点击即不同的按钮都会改变currentView的值，从而显示不同的组件：</p>\n\n<pre><code class=\"hljs r\"><span class=\"hljs-keyword\">...</span>\n<li role=\"presentation\">\n  <a href=\"#\" @click=\"currentView='manage-posts'\">Manage Posts</a>\n</li>\n<li role=\"presentation\">\n  <a href=\"#\" @click=\"currentView='create-post'\">Create Post</a>\n</li>\n<span class=\"hljs-keyword\">...</span></code></pre>\n\n\n<p>下面是完整的代码：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/mfxb9aeh/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23keep-alive\" title=\"keep-alive\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>keep-alive</h2><p>目前我们已经知道了如何创建动态组件，下面我们说说更加重要的keep-alive。</p>\n<p>现在当我们每次点击按钮切换组件时，旧的组件就会被销毁而新的组件会被渲染出来。</p>\n<p>这样一来就存在一个问题，旧的组件因为被销毁从而丢失了所有的状态，当重新渲染这个组件时不得不重新调用它所需要的API来获取已经发表的文章（这里我们假设是从服务器获取文章）。为了避免这个问题，我们可以使用keep-alive指令参数来把切出去的组件保留在内存中，以保留它的状态或避免重新渲染：</p>\n\n<pre><code class=\"hljs http\">\n<div class=\"container\">\n<span class=\"undefined\">  \n  </span><component :is=\"currentView\" keep-alive=\"\"></component><span class=\"undefined\">\n</span></div></code></pre>\n\n\n\n<p>在下面，我们可以验证被切出去的组件是否被保存在了内存中。我们可以在create-post组件中输入一些内容，接着切换组件，然后再切换回来。你会发现，我们输入的内容还在。</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/43kxkm3d/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<p>如果你的组件需要调用很多API或者渲染时需要大量的数据，那么这个指令参数会很有用。</p>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E8%BF%87%E6%B8%A1\" title=\"组件间的过渡\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>组件间的过渡</h2><p>下面，我们在组件切换间添加一些过度效果。</p>\n<p>在组件的挂载点上，增加<code>transition</code>属性，我们使用简单的淡入淡出的过渡效果。</p>\n\n\n\n<pre><code class=\"hljs\"><div class=\"container\">\n  <component :is=\"currentView\" transition=\"fade\" transition-mode=\"out-in\"></component>\n</div></code></pre>\n\n\n<p>添加CSS过渡控制：</p>\n\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.fade-transition</span> {\n  <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.2s</span> ease;\n}\n<span class=\"hljs-selector-class\">.fade-enter</span>, <span class=\"hljs-selector-class\">.fade-leave</span> {\n  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n\n<p>OK了：</p><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/8mdso9fj/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>你可能已经注意到了<code>transition-mode=\"out-in\"</code>。这个属性告诉Vue，我们希望旧的组件先淡出，然后新的组件再淡入。否则的话，就会同时出现两个组件，一个淡出一个淡入，看上去相当别扭。</p>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%93%E6%9D%9F%E8%AF%AD\" title=\"结束语\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>结束语</h2><p>希望这篇教程能使你学会如何使用动态组件。这篇教程并不是为了说明动态组件可以替代<a href=\"https://link.juejin.im?target=http%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-router</a>，vue-router具有更多更有用的特性。对于一些简单的组件切换，我想动态组件可能会更合适。为了构建更好的SPA我觉得你应该学习一下vue-router。</p>\n</div>","source":"_drafts/Vue-动态组件.md","raw":"title: Vue 动态组件\nauthor: Ao\ndate: 2017-08-08 17:26:15\ntags:\n---\n<div><p>翻译自 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dynamic Components in Vue.js</a></p>\n<p>这篇文章将会教你如何使用Vue中的<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcn.vuejs.org%2Fguide%2Fcomponents.html%23u52A8_u6001_u7EC4_u4EF6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动态组件</a>。当创建小型的单页应用时，这些小型应用可能并不需要vue-router来控制路由，我们只想简单地切换不同的组件来达到不同的展示效果。<br><a></a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/ec713d14e8c651b1f465981025a9a268?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>Vue中的动态组件要求你指定一个挂载点，在这个挂载点下你可以动态地切换组件。在这篇教程中，我们将通过几个例子来展示如何使用动态组件。我们会创建一个动态组件，学习使用keep-alive指令参数，最后我们还会在组件的切换之间添加一些过渡效果。下面开始吧：</p>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" title=\"创建动态组件\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>创建动态组件</h2><p>假设我们正在为一个Blog做个简单的导航栏，我们想添加两个页面：</p>\n<ul>\n<li>一个用于管理已经存在的博客文章</li>\n<li>一个用于创建新的博客文章</li>\n</ul>\n<p>稍后，我们会组件化这两个页面。现在，让我们从头一步步来吧，我们把这个简单的应用挂载到body下：</p>\n\n\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({\n  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">'body'</span>\n})</code></pre>\n\n \n\n<p>添加导航栏，在头部引入<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcdn.bootcss.com%2Fbootstrap%2F3.3.6%2Fcss%2Fbootstrap.min.css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BootStrop 3.3.6</a>：</p>\n\n\n<pre><code class=\"hljs sql\"><div class=\"header clearfix\">\n  <nav>\n    <ul class=\"nav nav-pills pull-right\">\n      <li role=\"presentation\">\n        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Manage Posts</a>\n      </li>\n      <li role=\"presentation\">\n        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span class=\"hljs-keyword\">Create</span> Post</a>\n      </li>\n    </ul>\n  </nav>\n  <h3 class=\"text-muted\"><span class=\"hljs-keyword\">Admin</span> Panel</h3>\n</div>\n<div class=\"container\">\n  \n</div></code></pre>\n\n\n\n<p>运行程序，我们会得到如下图所示的效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/d84bc4f141f8195f8bdbeb1f271d56be?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>现在，我们这个小小的应用已经有了一个大概的结构，下面我们开始创建两个组件：一个用于管理已经存在的博客文章，一个用于创建新的博客文章。如果你还不了解如何在Vue中创建组件，建议你看看<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个教程</a>，或者看官方的教程，那里已经说得够明白了。</p>\n<p>下面创建一个<code>manage-posts</code>组件，并模拟一些文章标题数据：</p>\n\n\n<pre><code class=\"hljs haskell\"><span class=\"hljs-type\">Vue</span>\n.component('manage-posts', {\n  template: '#manage-template',\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: function() {\n    <span class=\"hljs-title\">return</span> {\n      <span class=\"hljs-title\">posts</span>: [\n        '<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span>: <span class=\"hljs-type\">The</span> <span class=\"hljs-type\">Basics</span>',\n        '<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span> <span class=\"hljs-type\">Components</span>',\n        '<span class=\"hljs-type\">Server</span> <span class=\"hljs-type\">Side</span> <span class=\"hljs-type\">Rendering</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-type\">Vue</span>',\n        '<span class=\"hljs-type\">Vue</span> + <span class=\"hljs-type\">Firebase</span>'\n      ]\n    }</span>\n  }\n})</code></pre>\n\n<p>接着为组件<code>manage-posts</code>创建一个模板：</p>\n\n<pre><code class=\"hljs\"><template id=\"manage-template\"></template></code></pre>\n\n\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/eb0c391f556ed90e1f22f0ffb4b1e7dd?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>目前为止，我们已经有了导航栏和<code>mange-posts</code>组件，下面我们添加<code>create-post</code>组件，并把它们结合起来：</p>\n\n<pre><code class=\"hljs sql\">Vue.component('<span class=\"hljs-keyword\">create</span>-post<span class=\"hljs-string\">', {\n  template: '</span>#<span class=\"hljs-keyword\">create</span>-<span class=\"hljs-keyword\">template</span><span class=\"hljs-string\">'\n})</span></code></pre>\n\n\n\n<p>模板：</p>\n\n<pre><code class=\"hljs\"><template id=\"create-template\"></template></code></pre>\n\n\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/731e983132a27b38d35b681c908ce17b?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>好了，组件都已准备完毕，下面我们进入本文重点：把这些组件制作成动态组件。</p>\n<p>当一个用户点击<strong>Manage Posts</strong>按钮，我们想让Vue渲染manage-posts组件。同样的，当点击<strong>Create Post</strong>按钮，渲染create-post组件，</p>\n<p>实现动态组件我们需要<code><component></component></code>元素，我们把它当做动态组件的挂载点，然后在该元素上通过<code>is</code>属性指定我们需要渲染的组件。如此，我们可以通过下面的方式渲染manage-post组件：</p>\n\n<pre><code class=\"hljs\"><div class=\"container\">\n  \n  <component is=\"manage-posts\"></component>\n</div></code></pre>\n<p>效果图如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/84cc80b518f5581e5730df0dd4f026f8?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p>\n<p>然而，这种硬编码的方式似乎不是所谓地<strong>动态</strong>，我们目前仍然无法通过点击不同的按钮来展示不同的组件。</p>\n<p>聪明的你也许已经想到了Vue的数据绑定。我们只需在data中定义一个名为currentView的属性，然后再对is属性进行数据绑定就行了，很简单：</p>\n\n\n<pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({\n  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">'body'</span>,\n  <span class=\"hljs-attribute\">data</span>: {\n    <span class=\"hljs-attribute\">currentView</span>: <span class=\"hljs-string\">'manage-posts'</span>\n  }\n})</code></pre>\n<pre><code class=\"hljs\"><div class=\"container\">\n  \n  <component :is=\"currentView\"></component>\n</div></code></pre>\n<p>最后，我们再给导航栏的两个按钮添加点击事件，这样用户每次点击即不同的按钮都会改变currentView的值，从而显示不同的组件：</p>\n\n<pre><code class=\"hljs r\"><span class=\"hljs-keyword\">...</span>\n<li role=\"presentation\">\n  <a href=\"#\" @click=\"currentView='manage-posts'\">Manage Posts</a>\n</li>\n<li role=\"presentation\">\n  <a href=\"#\" @click=\"currentView='create-post'\">Create Post</a>\n</li>\n<span class=\"hljs-keyword\">...</span></code></pre>\n\n\n<p>下面是完整的代码：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/mfxb9aeh/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23keep-alive\" title=\"keep-alive\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>keep-alive</h2><p>目前我们已经知道了如何创建动态组件，下面我们说说更加重要的keep-alive。</p>\n<p>现在当我们每次点击按钮切换组件时，旧的组件就会被销毁而新的组件会被渲染出来。</p>\n<p>这样一来就存在一个问题，旧的组件因为被销毁从而丢失了所有的状态，当重新渲染这个组件时不得不重新调用它所需要的API来获取已经发表的文章（这里我们假设是从服务器获取文章）。为了避免这个问题，我们可以使用keep-alive指令参数来把切出去的组件保留在内存中，以保留它的状态或避免重新渲染：</p>\n\n<pre><code class=\"hljs http\">\n<div class=\"container\">\n<span class=\"undefined\">  \n  </span><component :is=\"currentView\" keep-alive=\"\"></component><span class=\"undefined\">\n</span></div></code></pre>\n\n\n\n<p>在下面，我们可以验证被切出去的组件是否被保存在了内存中。我们可以在create-post组件中输入一些内容，接着切换组件，然后再切换回来。你会发现，我们输入的内容还在。</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/43kxkm3d/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<p>如果你的组件需要调用很多API或者渲染时需要大量的数据，那么这个指令参数会很有用。</p>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E8%BF%87%E6%B8%A1\" title=\"组件间的过渡\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>组件间的过渡</h2><p>下面，我们在组件切换间添加一些过度效果。</p>\n<p>在组件的挂载点上，增加<code>transition</code>属性，我们使用简单的淡入淡出的过渡效果。</p>\n\n\n\n<pre><code class=\"hljs\"><div class=\"container\">\n  <component :is=\"currentView\" transition=\"fade\" transition-mode=\"out-in\"></component>\n</div></code></pre>\n\n\n<p>添加CSS过渡控制：</p>\n\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.fade-transition</span> {\n  <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.2s</span> ease;\n}\n<span class=\"hljs-selector-class\">.fade-enter</span>, <span class=\"hljs-selector-class\">.fade-leave</span> {\n  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n\n<p>OK了：</p><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/8mdso9fj/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n<p>你可能已经注意到了<code>transition-mode=\"out-in\"</code>。这个属性告诉Vue，我们希望旧的组件先淡出，然后新的组件再淡入。否则的话，就会同时出现两个组件，一个淡出一个淡入，看上去相当别扭。</p>\n<h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%93%E6%9D%9F%E8%AF%AD\" title=\"结束语\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>结束语</h2><p>希望这篇教程能使你学会如何使用动态组件。这篇教程并不是为了说明动态组件可以替代<a href=\"https://link.juejin.im?target=http%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-router</a>，vue-router具有更多更有用的特性。对于一些简单的组件切换，我想动态组件可能会更合适。为了构建更好的SPA我觉得你应该学习一下vue-router。</p>\n</div>","slug":"Vue-动态组件","published":0,"updated":"2017-09-12T11:49:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4imw00037wu5ib0b4in5","content":"<div><p>翻译自 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dynamic Components in Vue.js</a></p><br><p>这篇文章将会教你如何使用Vue中的<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcn.vuejs.org%2Fguide%2Fcomponents.html%23u52A8_u6001_u7EC4_u4EF6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动态组件</a>。当创建小型的单页应用时，这些小型应用可能并不需要vue-router来控制路由，我们只想简单地切换不同的组件来达到不同的展示效果。<br><a></a></p><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/ec713d14e8c651b1f465981025a9a268?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>Vue中的动态组件要求你指定一个挂载点，在这个挂载点下你可以动态地切换组件。在这篇教程中，我们将通过几个例子来展示如何使用动态组件。我们会创建一个动态组件，学习使用keep-alive指令参数，最后我们还会在组件的切换之间添加一些过渡效果。下面开始吧：</p><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" title=\"创建动态组件\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>创建动态组件</h2><p>假设我们正在为一个Blog做个简单的导航栏，我们想添加两个页面：</p><br><ul><br><li>一个用于管理已经存在的博客文章</li><br><li>一个用于创建新的博客文章</li><br></ul><br><p>稍后，我们会组件化这两个页面。现在，让我们从头一步步来吧，我们把这个简单的应用挂载到body下：</p><br><br><br><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({<br>  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">‘body’</span><br>})</code></pre><br><br><br><br><p>添加导航栏，在头部引入<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcdn.bootcss.com%2Fbootstrap%2F3.3.6%2Fcss%2Fbootstrap.min.css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BootStrop 3.3.6</a>：</p><br><br><br><pre><code class=\"hljs sql\"><div class=\"header clearfix\"><br>  <nav><br>    <ul class=\"nav nav-pills pull-right\"><br>      <li role=\"presentation\"><br>        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Manage Posts</a><br>      </li><br>      <li role=\"presentation\"><br>        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span class=\"hljs-keyword\">Create</span> Post</a><br>      </li><br>    </ul><br>  </nav><br>  <h3 class=\"text-muted\"><span class=\"hljs-keyword\">Admin</span> Panel</h3><br></div><br><div class=\"container\"><br><br></div></code></pre><br><br><br><br><p>运行程序，我们会得到如下图所示的效果：</p><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/d84bc4f141f8195f8bdbeb1f271d56be?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>现在，我们这个小小的应用已经有了一个大概的结构，下面我们开始创建两个组件：一个用于管理已经存在的博客文章，一个用于创建新的博客文章。如果你还不了解如何在Vue中创建组件，建议你看看<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个教程</a>，或者看官方的教程，那里已经说得够明白了。</p><br><p>下面创建一个<code>manage-posts</code>组件，并模拟一些文章标题数据：</p><br><br><br><pre><code class=\"hljs haskell\"><span class=\"hljs-type\">Vue</span><br>.component(‘manage-posts’, {<br>  template: ‘#manage-template’,<br>  <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: function() {<br>    <span class=\"hljs-title\">return</span> {<br>      <span class=\"hljs-title\">posts</span>: [<br>        ‘<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span>: <span class=\"hljs-type\">The</span> <span class=\"hljs-type\">Basics</span>‘,<br>        ‘<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span> <span class=\"hljs-type\">Components</span>‘,<br>        ‘<span class=\"hljs-type\">Server</span> <span class=\"hljs-type\">Side</span> <span class=\"hljs-type\">Rendering</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-type\">Vue</span>‘,<br>        ‘<span class=\"hljs-type\">Vue</span> + <span class=\"hljs-type\">Firebase</span>‘<br>      ]<br>    }</span><br>  }<br>})</code></pre><br><br><p>接着为组件<code>manage-posts</code>创建一个模板：</p><br><br><pre><code class=\"hljs\"><template id=\"manage-template\"></template></code></pre><br><br><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/eb0c391f556ed90e1f22f0ffb4b1e7dd?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>目前为止，我们已经有了导航栏和<code>mange-posts</code>组件，下面我们添加<code>create-post</code>组件，并把它们结合起来：</p><br><br><pre><code class=\"hljs sql\">Vue.component(‘<span class=\"hljs-keyword\">create</span>-post<span class=\"hljs-string\">‘, {<br>  template: ‘</span>#<span class=\"hljs-keyword\">create</span>-<span class=\"hljs-keyword\">template</span><span class=\"hljs-string\">‘<br>})</span></code></pre><br><br><br><br><p>模板：</p><br><br><pre><code class=\"hljs\"><template id=\"create-template\"></template></code></pre><br><br><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/731e983132a27b38d35b681c908ce17b?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>好了，组件都已准备完毕，下面我们进入本文重点：把这些组件制作成动态组件。</p><br><p>当一个用户点击<strong>Manage Posts</strong>按钮，我们想让Vue渲染manage-posts组件。同样的，当点击<strong>Create Post</strong>按钮，渲染create-post组件，</p><br><p>实现动态组件我们需要<code><component></component></code>元素，我们把它当做动态组件的挂载点，然后在该元素上通过<code>is</code>属性指定我们需要渲染的组件。如此，我们可以通过下面的方式渲染manage-post组件：</p><br><br><pre><code class=\"hljs\"><div class=\"container\"><br><br>  <component is=\"manage-posts\"></component><br></div></code></pre><br><p>效果图如下：</p><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/84cc80b518f5581e5730df0dd4f026f8?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>然而，这种硬编码的方式似乎不是所谓地<strong>动态</strong>，我们目前仍然无法通过点击不同的按钮来展示不同的组件。</p><br><p>聪明的你也许已经想到了Vue的数据绑定。我们只需在data中定义一个名为currentView的属性，然后再对is属性进行数据绑定就行了，很简单：</p><br><br><br><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({<br>  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">‘body’</span>,<br>  <span class=\"hljs-attribute\">data</span>: {<br>    <span class=\"hljs-attribute\">currentView</span>: <span class=\"hljs-string\">‘manage-posts’</span><br>  }<br>})</code></pre><br><pre><code class=\"hljs\"><div class=\"container\"><br><br>  <component :is=\"currentView\"></component><br></div></code></pre><br><p>最后，我们再给导航栏的两个按钮添加点击事件，这样用户每次点击即不同的按钮都会改变currentView的值，从而显示不同的组件：</p><br><br><pre><code class=\"hljs r\"><span class=\"hljs-keyword\">…</span><br><li role=\"presentation\"><br>  <a href=\"#\" @click=\"currentView='manage-posts'\">Manage Posts</a><br></li><br><li role=\"presentation\"><br>  <a href=\"#\" @click=\"currentView='create-post'\">Create Post</a><br></li><br><span class=\"hljs-keyword\">…</span></code></pre><br><br><br><p>下面是完整的代码：</p><br><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/mfxb9aeh/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23keep-alive\" title=\"keep-alive\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>keep-alive</h2><p>目前我们已经知道了如何创建动态组件，下面我们说说更加重要的keep-alive。</p><br><p>现在当我们每次点击按钮切换组件时，旧的组件就会被销毁而新的组件会被渲染出来。</p><br><p>这样一来就存在一个问题，旧的组件因为被销毁从而丢失了所有的状态，当重新渲染这个组件时不得不重新调用它所需要的API来获取已经发表的文章（这里我们假设是从服务器获取文章）。为了避免这个问题，我们可以使用keep-alive指令参数来把切出去的组件保留在内存中，以保留它的状态或避免重新渲染：</p><br><br><pre><code class=\"hljs http\"><br><div class=\"container\"><br><span class=\"undefined\"><br>  </span><component :is=\"currentView\" keep-alive=\"\"></component><span class=\"undefined\"><br></span></div></code></pre><br><br><br><br><p>在下面，我们可以验证被切出去的组件是否被保存在了内存中。我们可以在create-post组件中输入一些内容，接着切换组件，然后再切换回来。你会发现，我们输入的内容还在。</p><br><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/43kxkm3d/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe><br><p>如果你的组件需要调用很多API或者渲染时需要大量的数据，那么这个指令参数会很有用。</p><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E8%BF%87%E6%B8%A1\" title=\"组件间的过渡\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>组件间的过渡</h2><p>下面，我们在组件切换间添加一些过度效果。</p><br><p>在组件的挂载点上，增加<code>transition</code>属性，我们使用简单的淡入淡出的过渡效果。</p><br><br><br><br><pre><code class=\"hljs\"><div class=\"container\"><br>  <component :is=\"currentView\" transition=\"fade\" transition-mode=\"out-in\"></component><br></div></code></pre><br><br><br><p>添加CSS过渡控制：</p><br><br><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.fade-transition</span> {<br>  <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.2s</span> ease;<br>}<br><span class=\"hljs-selector-class\">.fade-enter</span>, <span class=\"hljs-selector-class\">.fade-leave</span> {<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>}</code></pre><br><br><br><p>OK了：</p><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/8mdso9fj/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe><br><br><p>你可能已经注意到了<code>transition-mode=”out-in”</code>。这个属性告诉Vue，我们希望旧的组件先淡出，然后新的组件再淡入。否则的话，就会同时出现两个组件，一个淡出一个淡入，看上去相当别扭。</p><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%93%E6%9D%9F%E8%AF%AD\" title=\"结束语\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>结束语</h2><p>希望这篇教程能使你学会如何使用动态组件。这篇教程并不是为了说明动态组件可以替代<a href=\"https://link.juejin.im?target=http%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-router</a>，vue-router具有更多更有用的特性。对于一些简单的组件切换，我想动态组件可能会更合适。为了构建更好的SPA我觉得你应该学习一下vue-router。</p><br></div>","site":{"data":{}},"excerpt":"","more":"<div><p>翻译自 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dynamic Components in Vue.js</a></p><br><p>这篇文章将会教你如何使用Vue中的<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcn.vuejs.org%2Fguide%2Fcomponents.html%23u52A8_u6001_u7EC4_u4EF6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">动态组件</a>。当创建小型的单页应用时，这些小型应用可能并不需要vue-router来控制路由，我们只想简单地切换不同的组件来达到不同的展示效果。<br><a></a></p><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/ec713d14e8c651b1f465981025a9a268?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>Vue中的动态组件要求你指定一个挂载点，在这个挂载点下你可以动态地切换组件。在这篇教程中，我们将通过几个例子来展示如何使用动态组件。我们会创建一个动态组件，学习使用keep-alive指令参数，最后我们还会在组件的切换之间添加一些过渡效果。下面开始吧：</p><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" title=\"创建动态组件\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>创建动态组件</h2><p>假设我们正在为一个Blog做个简单的导航栏，我们想添加两个页面：</p><br><ul><br><li>一个用于管理已经存在的博客文章</li><br><li>一个用于创建新的博客文章</li><br></ul><br><p>稍后，我们会组件化这两个页面。现在，让我们从头一步步来吧，我们把这个简单的应用挂载到body下：</p><br><br><br><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({<br>  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">‘body’</span><br>})</code></pre><br><br><br><br><p>添加导航栏，在头部引入<a href=\"https://link.juejin.im?target=http%3A%2F%2Fcdn.bootcss.com%2Fbootstrap%2F3.3.6%2Fcss%2Fbootstrap.min.css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BootStrop 3.3.6</a>：</p><br><br><br><pre><code class=\"hljs sql\"><div class=\"header clearfix\"><br>  <nav><br>    <ul class=\"nav nav-pills pull-right\"><br>      <li role=\"presentation\"><br>        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Manage Posts</a><br>      </li><br>      <li role=\"presentation\"><br>        <a href=\"https://link.juejin.im?target=javascript%3Avoid(0)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span class=\"hljs-keyword\">Create</span> Post</a><br>      </li><br>    </ul><br>  </nav><br>  <h3 class=\"text-muted\"><span class=\"hljs-keyword\">Admin</span> Panel</h3><br></div><br><div class=\"container\"><br><br></div></code></pre><br><br><br><br><p>运行程序，我们会得到如下图所示的效果：</p><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/d84bc4f141f8195f8bdbeb1f271d56be?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>现在，我们这个小小的应用已经有了一个大概的结构，下面我们开始创建两个组件：一个用于管理已经存在的博客文章，一个用于创建新的博客文章。如果你还不了解如何在Vue中创建组件，建议你看看<a href=\"https://link.juejin.im?target=https%3A%2F%2Fcoligo.io%2Fdynamic-components-in-vuejs%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这个教程</a>，或者看官方的教程，那里已经说得够明白了。</p><br><p>下面创建一个<code>manage-posts</code>组件，并模拟一些文章标题数据：</p><br><br><br><pre><code class=\"hljs haskell\"><span class=\"hljs-type\">Vue</span><br>.component(‘manage-posts’, {<br>  template: ‘#manage-template’,<br>  <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: function() {<br>    <span class=\"hljs-title\">return</span> {<br>      <span class=\"hljs-title\">posts</span>: [<br>        ‘<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span>: <span class=\"hljs-type\">The</span> <span class=\"hljs-type\">Basics</span>‘,<br>        ‘<span class=\"hljs-type\">Vue</span>.<span class=\"hljs-title\">js</span> <span class=\"hljs-type\">Components</span>‘,<br>        ‘<span class=\"hljs-type\">Server</span> <span class=\"hljs-type\">Side</span> <span class=\"hljs-type\">Rendering</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-type\">Vue</span>‘,<br>        ‘<span class=\"hljs-type\">Vue</span> + <span class=\"hljs-type\">Firebase</span>‘<br>      ]<br>    }</span><br>  }<br>})</code></pre><br><br><p>接着为组件<code>manage-posts</code>创建一个模板：</p><br><br><pre><code class=\"hljs\"><template id=\"manage-template\"></template></code></pre><br><br><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/eb0c391f556ed90e1f22f0ffb4b1e7dd?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>目前为止，我们已经有了导航栏和<code>mange-posts</code>组件，下面我们添加<code>create-post</code>组件，并把它们结合起来：</p><br><br><pre><code class=\"hljs sql\">Vue.component(‘<span class=\"hljs-keyword\">create</span>-post<span class=\"hljs-string\">‘, {<br>  template: ‘</span>#<span class=\"hljs-keyword\">create</span>-<span class=\"hljs-keyword\">template</span><span class=\"hljs-string\">‘<br>})</span></code></pre><br><br><br><br><p>模板：</p><br><br><pre><code class=\"hljs\"><template id=\"create-template\"></template></code></pre><br><br><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/731e983132a27b38d35b681c908ce17b?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>好了，组件都已准备完毕，下面我们进入本文重点：把这些组件制作成动态组件。</p><br><p>当一个用户点击<strong>Manage Posts</strong>按钮，我们想让Vue渲染manage-posts组件。同样的，当点击<strong>Create Post</strong>按钮，渲染create-post组件，</p><br><p>实现动态组件我们需要<code><component></component></code>元素，我们把它当做动态组件的挂载点，然后在该元素上通过<code>is</code>属性指定我们需要渲染的组件。如此，我们可以通过下面的方式渲染manage-post组件：</p><br><br><pre><code class=\"hljs\"><div class=\"container\"><br><br>  <component is=\"manage-posts\"></component><br></div></code></pre><br><p>效果图如下：</p><br><p><img src=\"https://user-gold-cdn.xitu.io/2016/11/29/84cc80b518f5581e5730df0dd4f026f8?imageView2/0/w/1280/h/960\" alt=\"\" style=\"\"></p><br><p>然而，这种硬编码的方式似乎不是所谓地<strong>动态</strong>，我们目前仍然无法通过点击不同的按钮来展示不同的组件。</p><br><p>聪明的你也许已经想到了Vue的数据绑定。我们只需在data中定义一个名为currentView的属性，然后再对is属性进行数据绑定就行了，很简单：</p><br><br><br><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">Vue</span>({<br>  <span class=\"hljs-attribute\">el</span>: <span class=\"hljs-string\">‘body’</span>,<br>  <span class=\"hljs-attribute\">data</span>: {<br>    <span class=\"hljs-attribute\">currentView</span>: <span class=\"hljs-string\">‘manage-posts’</span><br>  }<br>})</code></pre><br><pre><code class=\"hljs\"><div class=\"container\"><br><br>  <component :is=\"currentView\"></component><br></div></code></pre><br><p>最后，我们再给导航栏的两个按钮添加点击事件，这样用户每次点击即不同的按钮都会改变currentView的值，从而显示不同的组件：</p><br><br><pre><code class=\"hljs r\"><span class=\"hljs-keyword\">…</span><br><li role=\"presentation\"><br>  <a href=\"#\" @click=\"currentView='manage-posts'\">Manage Posts</a><br></li><br><li role=\"presentation\"><br>  <a href=\"#\" @click=\"currentView='create-post'\">Create Post</a><br></li><br><span class=\"hljs-keyword\">…</span></code></pre><br><br><br><p>下面是完整的代码：</p><br><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/mfxb9aeh/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23keep-alive\" title=\"keep-alive\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>keep-alive</h2><p>目前我们已经知道了如何创建动态组件，下面我们说说更加重要的keep-alive。</p><br><p>现在当我们每次点击按钮切换组件时，旧的组件就会被销毁而新的组件会被渲染出来。</p><br><p>这样一来就存在一个问题，旧的组件因为被销毁从而丢失了所有的状态，当重新渲染这个组件时不得不重新调用它所需要的API来获取已经发表的文章（这里我们假设是从服务器获取文章）。为了避免这个问题，我们可以使用keep-alive指令参数来把切出去的组件保留在内存中，以保留它的状态或避免重新渲染：</p><br><br><pre><code class=\"hljs http\"><br><div class=\"container\"><br><span class=\"undefined\"><br>  </span><component :is=\"currentView\" keep-alive=\"\"></component><span class=\"undefined\"><br></span></div></code></pre><br><br><br><br><p>在下面，我们可以验证被切出去的组件是否被保存在了内存中。我们可以在create-post组件中输入一些内容，接着切换组件，然后再切换回来。你会发现，我们输入的内容还在。</p><br><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/43kxkm3d/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe><br><p>如果你的组件需要调用很多API或者渲染时需要大量的数据，那么这个指令参数会很有用。</p><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E8%BF%87%E6%B8%A1\" title=\"组件间的过渡\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>组件间的过渡</h2><p>下面，我们在组件切换间添加一些过度效果。</p><br><p>在组件的挂载点上，增加<code>transition</code>属性，我们使用简单的淡入淡出的过渡效果。</p><br><br><br><br><pre><code class=\"hljs\"><div class=\"container\"><br>  <component :is=\"currentView\" transition=\"fade\" transition-mode=\"out-in\"></component><br></div></code></pre><br><br><br><p>添加CSS过渡控制：</p><br><br><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.fade-transition</span> {<br>  <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.2s</span> ease;<br>}<br><span class=\"hljs-selector-class\">.fade-enter</span>, <span class=\"hljs-selector-class\">.fade-leave</span> {<br>  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>}</code></pre><br><br><br><p>OK了：</p><iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/coligo/8mdso9fj/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe><br><br><p>你可能已经注意到了<code>transition-mode=”out-in”</code>。这个属性告诉Vue，我们希望旧的组件先淡出，然后新的组件再淡入。否则的话，就会同时出现两个组件，一个淡出一个淡入，看上去相当别扭。</p><br><h2><a href=\"https://link.juejin.im?target=http%3A%2F%2Fylcui.top%2F2016%2F08%2F08%2F%25E3%2580%2590%25E7%25BF%25BB%25E8%25AF%2591%25E3%2580%2591Vue%25E5%258A%25A8%25E6%2580%2581%25E7%25BB%2584%25E4%25BB%25B6%2F%23%E7%BB%93%E6%9D%9F%E8%AF%AD\" title=\"结束语\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"></a>结束语</h2><p>希望这篇教程能使你学会如何使用动态组件。这篇教程并不是为了说明动态组件可以替代<a href=\"https://link.juejin.im?target=http%3A%2F%2Frouter.vuejs.org%2Fzh-cn%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-router</a>，vue-router具有更多更有用的特性。对于一些简单的组件切换，我想动态组件可能会更合适。为了构建更好的SPA我觉得你应该学习一下vue-router。</p><br></div>"},{"title":"19 个 JavaScript 常用的简写技术","author":"","date":"2017-06-22T03:59:00.000Z","_content":"## 1.三元操作符\n当想写if...else语句时，使用三元操作符来代替。\n```javascript\nconst x = 20;\nlet answer;\nif (x > 10) {\n    answer = 'is greater';\n} else {\n    answer = 'is lesser';\n}\n```\n<!--more-->\n简写\n```javascript\nconst answer = x > 10 ? 'is greater' : 'is lesser';\n```\n也可以嵌套if语句：\n```javascript\nconst big = x > 10 ? \" greater 10\" : x\n```\n## 2.短路求值简写方式\n当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。\n```javascript\nif (variable1 !== null || variable1 !== undefined || variable1 !== '') {\n     let variable2 = variable1;\n}\n```\n或者可以使用短路求值方法：\n```javascript\nconst variable2 = variable1  || 'new';\n```\n## 3.声明变量简写方法\n```javascript\nlet x;\nlet y;\nlet z = 3;\n```\n简写方法：\n\n```javascript\nlet x, y, z=3;\n```\n## 4.if存在条件简写方法\n```javascript\nif (likeJavaScript === true)\n```\n简写：\n\n```javascript\nif (likeJavaScript)\n```\n只有likeJavaScript是真值时，二者语句才相等\n如果判断值不是真值，则可以这样：\n\n```javascript\nlet a;\nif ( a !== true ) {\n// do something...\n}\n```\n简写：\n\n```javascript\nlet a;\nif ( !a ) {\n// do something...\n}\n```\n## 5.JavaScript循环简写方法\n```javascript\nfor (let i = 0; i < allImgs.length; i++)\n```\n简写：\n\n```javascript\nfor (let index in allImgs)\n```\n也可以使用Array.forEach：\n\n```javascript\nfunction logArrayElements(element, index, array) {\n  console.log(\"a[\" + index + \"] = \" + element);\n}\n[2, 5, 9].forEach(logArrayElements);\n// logs:\n// a[0] = 2\n// a[1] = 5\n// a[2] = 9\n```\n## 6.短路评价\n给一个变量分配的值是通过判断其值是否为null或undefined，则可以：\n\n```javascript\nlet dbHost;\nif (process.env.DB_HOST) {\n  dbHost = process.env.DB_HOST;\n} else {\n  dbHost = 'localhost';\n}\n```\n简写：\n\n```javascript\nconst dbHost = process.env.DB_HOST || 'localhost';\n```\n## 7.十进制指数\n当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字：\n\n```javascript\nfor (let i = 0; i < 10000; i++) {}\n```\n简写：\n\n```javascript\nfor (let i = 0; i < 1e7; i++) {}\n\n// 下面都是返回true\n1e0 === 1;\n1e1 === 10;\n1e2 === 100;\n1e3 === 1000;\n1e4 === 10000;\n1e5 === 100000;\n```\n## 8.对象属性简写\n如果属性名与key名相同，则可以采用ES6的方法：\n\n```javascript\nconst obj = { x:x, y:y };\n```\n简写：\n\n```javascript\nconst obj = { x, y };\n```\n## 9.箭头函数简写\n传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。\n\n```javascript\nfunction sayHello(name) {\n  console.log('Hello', name);\n}\n\nsetTimeout(function() {\n  console.log('Loaded')\n}, 2000);\n\nlist.forEach(function(item) {\n  console.log(item);\n});\n```\n简写：\n\n```javascript\nsayHello = name => console.log('Hello', name);\n\nsetTimeout(() => console.log('Loaded'), 2000);\n\nlist.forEach(item => console.log(item));\n```\n## 10.隐式返回值简写\n经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字）\n\n为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。\n\n```javascript\nfunction calcCircumference(diameter) {\n  return Math.PI * diameter\n}\n\nvar func = function func() {\n  return { foo: 1 };\n};\n```\n简写：\n\n```javascript\ncalcCircumference = diameter => (\n  Math.PI * diameter;\n)\n\nvar func = () => ({ foo: 1 });\n```\n## 11.默认参数值\n为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁：\n\n```javascript\nfunction volume(l, w, h) {\n  if (w === undefined)\n    w = 3;\n  if (h === undefined)\n    h = 4;\n  return l * w * h;\n}\n```\n简写：\n\n```javascript\nvolume = (l, w = 3, h = 4 ) => (l * w * h);\n\nvolume(2) //output: 24\n```\n## 12.模板字符串\n传统的JavaScript语言，输出模板通常是这样写的。\n\n```javascript\nconst welcome = 'You have logged in as ' + first + ' ' + last + '.'\n\nconst db = 'http://' + host + ':' + port + '/' + database;\n```\nES6可以使用反引号和${}简写：\n\n```javascript\nconst welcome = `You have logged in as ${first} ${last}`;\n\nconst db = `http://${host}:${port}/${database}`;\n```\n## 13.解构赋值简写方法\n在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它\n\n```javascript\nconst observable = require('mobx/observable');\nconst action = require('mobx/action');\nconst runInAction = require('mobx/runInAction');\n\nconst store = this.props.store;\nconst form = this.props.form;\nconst loading = this.props.loading;\nconst errors = this.props.errors;\nconst entity = this.props.entity;\n```\n简写：\n\n```javascript\nimport { observable, action, runInAction } from 'mobx';\n\nconst { store, form, loading, errors, entity } = this.props;\n```\n也可以分配变量名：\n\n```javascript\nconst { store, form, loading, errors, entity:contact } = this.props;\n//最后一个变量名为contact\n```\n## 14.多行字符串简写\n需要输出多行字符串，需要使用+来拼接：\n\n```javascript\nconst lorem = 'Lorem ipsum dolor sit amet, consectetur\\n\\t'\n    + 'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t'\n    + 'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t'\n    + 'veniam, quis nostrud exercitation ullamco laboris\\n\\t'\n    + 'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t'\n    + 'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'\n```\n使用反引号，则可以达到简写作用：\n\n```javascript\nconst lorem = `Lorem ipsum dolor sit amet, consectetur\n    adipisicing elit, sed do eiusmod tempor incididunt\n    ut labore et dolore magna aliqua. Ut enim ad minim\n    veniam, quis nostrud exercitation ullamco laboris\n    nisi ut aliquip ex ea commodo consequat. Duis aute\n    irure dolor in reprehenderit in voluptate velit esse.`\n```\n## 15.扩展运算符简写\n扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。\n\n```javascript\n// joining arrays\nconst odd = [1, 3, 5];\nconst nums = [2 ,4 , 6].concat(odd);\n\n// cloning arrays\nconst arr = [1, 2, 3, 4];\nconst arr2 = arr.slice()\n```\n简写：\n\n```javascript\n// joining arrays\nconst odd = [1, 3, 5 ];\nconst nums = [2 ,4 , 6, ...odd];\nconsole.log(nums); // [ 2, 4, 6, 1, 3, 5 ]\n\n// cloning arrays\nconst arr = [1, 2, 3, 4];\nconst arr2 = [...arr];\n```\n不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。\n\n```javascript\nconst odd = [1, 3, 5 ];\nconst nums = [2, ...odd, 4 , 6];\n```\n也可以使用扩展运算符解构：\n\n```javascript\nconst { a, b, ...z } = { a: 1, b: 2, c: 3, d: 4 };\nconsole.log(a) // 1\nconsole.log(b) // 2\nconsole.log(z) // { c: 3, d: 4 }\n```\n## 16.强制参数简写\nJavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。\n\n```javascript\nfunction foo(bar) {\n  if(bar === undefined) {\n    throw new Error('Missing parameter!');\n  }\n  return bar;\n}\n```\n简写：\n\n```javascript\nmandatory = () => {\n  throw new Error('Missing parameter!');\n}\n\nfoo = (bar = mandatory()) => {\n  return bar;\n}\n```\n## 17.Array.find简写\n想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。\n\n```javascript\nconst pets = [\n  { type: 'Dog', name: 'Max'},\n  { type: 'Cat', name: 'Karl'},\n  { type: 'Dog', name: 'Tommy'},\n]\n\nfunction findDog(name) {\n  for(let i = 0; i<pets.length; ++i) {\n    if(pets[i].type === 'Dog' && pets[i].name === name) {\n      return pets[i];\n    }\n  }\n}\n```\n简写：\n\n```javascript\npet = pets.find(pet => pet.type ==='Dog' && pet.name === 'Tommy');\nconsole.log(pet); // { type: 'Dog', name: 'Tommy' }\n```\n## 18.Object[key]简写\n考虑一个验证函数\n\n```javascript\nfunction validate(values) {\n  if(!values.first)\n    return false;\n  if(!values.last)\n    return false;\n  return true;\n}\n\nconsole.log(validate({first:'Bruce',last:'Wayne'})); // true\n```\n假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？\n\n```javascript\n// 对象验证规则\nconst schema = {\n  first: {\n    required:true\n  },\n  last: {\n    required:true\n  }\n}\n\n// 通用验证函数\nconst validate = (schema, values) => {\n  for(field in schema) {\n    if(schema[field].required) {\n      if(!values[field]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\nconsole.log(validate(schema, {first:'Bruce'})); // false\nconsole.log(validate(schema, {first:'Bruce',last:'Wayne'})); // true\n```\n现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了\n\n## 19.双重非位运算简写\n有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。\n\n```javascript\nMath.floor(4.9) === 4  //true\n```\n简写\n\n```javascript\n~~4.9 === 4  //true\n```","source":"_posts/hello-world.md","raw":"title: 19 个 JavaScript 常用的简写技术\ntags:\n  - javaScript\ncategories:\n  - javaScript\nauthor: ''\ndate: 2017-06-22 11:59:00\n---\n## 1.三元操作符\n当想写if...else语句时，使用三元操作符来代替。\n```javascript\nconst x = 20;\nlet answer;\nif (x > 10) {\n    answer = 'is greater';\n} else {\n    answer = 'is lesser';\n}\n```\n<!--more-->\n简写\n```javascript\nconst answer = x > 10 ? 'is greater' : 'is lesser';\n```\n也可以嵌套if语句：\n```javascript\nconst big = x > 10 ? \" greater 10\" : x\n```\n## 2.短路求值简写方式\n当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。\n```javascript\nif (variable1 !== null || variable1 !== undefined || variable1 !== '') {\n     let variable2 = variable1;\n}\n```\n或者可以使用短路求值方法：\n```javascript\nconst variable2 = variable1  || 'new';\n```\n## 3.声明变量简写方法\n```javascript\nlet x;\nlet y;\nlet z = 3;\n```\n简写方法：\n\n```javascript\nlet x, y, z=3;\n```\n## 4.if存在条件简写方法\n```javascript\nif (likeJavaScript === true)\n```\n简写：\n\n```javascript\nif (likeJavaScript)\n```\n只有likeJavaScript是真值时，二者语句才相等\n如果判断值不是真值，则可以这样：\n\n```javascript\nlet a;\nif ( a !== true ) {\n// do something...\n}\n```\n简写：\n\n```javascript\nlet a;\nif ( !a ) {\n// do something...\n}\n```\n## 5.JavaScript循环简写方法\n```javascript\nfor (let i = 0; i < allImgs.length; i++)\n```\n简写：\n\n```javascript\nfor (let index in allImgs)\n```\n也可以使用Array.forEach：\n\n```javascript\nfunction logArrayElements(element, index, array) {\n  console.log(\"a[\" + index + \"] = \" + element);\n}\n[2, 5, 9].forEach(logArrayElements);\n// logs:\n// a[0] = 2\n// a[1] = 5\n// a[2] = 9\n```\n## 6.短路评价\n给一个变量分配的值是通过判断其值是否为null或undefined，则可以：\n\n```javascript\nlet dbHost;\nif (process.env.DB_HOST) {\n  dbHost = process.env.DB_HOST;\n} else {\n  dbHost = 'localhost';\n}\n```\n简写：\n\n```javascript\nconst dbHost = process.env.DB_HOST || 'localhost';\n```\n## 7.十进制指数\n当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字：\n\n```javascript\nfor (let i = 0; i < 10000; i++) {}\n```\n简写：\n\n```javascript\nfor (let i = 0; i < 1e7; i++) {}\n\n// 下面都是返回true\n1e0 === 1;\n1e1 === 10;\n1e2 === 100;\n1e3 === 1000;\n1e4 === 10000;\n1e5 === 100000;\n```\n## 8.对象属性简写\n如果属性名与key名相同，则可以采用ES6的方法：\n\n```javascript\nconst obj = { x:x, y:y };\n```\n简写：\n\n```javascript\nconst obj = { x, y };\n```\n## 9.箭头函数简写\n传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。\n\n```javascript\nfunction sayHello(name) {\n  console.log('Hello', name);\n}\n\nsetTimeout(function() {\n  console.log('Loaded')\n}, 2000);\n\nlist.forEach(function(item) {\n  console.log(item);\n});\n```\n简写：\n\n```javascript\nsayHello = name => console.log('Hello', name);\n\nsetTimeout(() => console.log('Loaded'), 2000);\n\nlist.forEach(item => console.log(item));\n```\n## 10.隐式返回值简写\n经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字）\n\n为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。\n\n```javascript\nfunction calcCircumference(diameter) {\n  return Math.PI * diameter\n}\n\nvar func = function func() {\n  return { foo: 1 };\n};\n```\n简写：\n\n```javascript\ncalcCircumference = diameter => (\n  Math.PI * diameter;\n)\n\nvar func = () => ({ foo: 1 });\n```\n## 11.默认参数值\n为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁：\n\n```javascript\nfunction volume(l, w, h) {\n  if (w === undefined)\n    w = 3;\n  if (h === undefined)\n    h = 4;\n  return l * w * h;\n}\n```\n简写：\n\n```javascript\nvolume = (l, w = 3, h = 4 ) => (l * w * h);\n\nvolume(2) //output: 24\n```\n## 12.模板字符串\n传统的JavaScript语言，输出模板通常是这样写的。\n\n```javascript\nconst welcome = 'You have logged in as ' + first + ' ' + last + '.'\n\nconst db = 'http://' + host + ':' + port + '/' + database;\n```\nES6可以使用反引号和${}简写：\n\n```javascript\nconst welcome = `You have logged in as ${first} ${last}`;\n\nconst db = `http://${host}:${port}/${database}`;\n```\n## 13.解构赋值简写方法\n在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它\n\n```javascript\nconst observable = require('mobx/observable');\nconst action = require('mobx/action');\nconst runInAction = require('mobx/runInAction');\n\nconst store = this.props.store;\nconst form = this.props.form;\nconst loading = this.props.loading;\nconst errors = this.props.errors;\nconst entity = this.props.entity;\n```\n简写：\n\n```javascript\nimport { observable, action, runInAction } from 'mobx';\n\nconst { store, form, loading, errors, entity } = this.props;\n```\n也可以分配变量名：\n\n```javascript\nconst { store, form, loading, errors, entity:contact } = this.props;\n//最后一个变量名为contact\n```\n## 14.多行字符串简写\n需要输出多行字符串，需要使用+来拼接：\n\n```javascript\nconst lorem = 'Lorem ipsum dolor sit amet, consectetur\\n\\t'\n    + 'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t'\n    + 'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t'\n    + 'veniam, quis nostrud exercitation ullamco laboris\\n\\t'\n    + 'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t'\n    + 'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'\n```\n使用反引号，则可以达到简写作用：\n\n```javascript\nconst lorem = `Lorem ipsum dolor sit amet, consectetur\n    adipisicing elit, sed do eiusmod tempor incididunt\n    ut labore et dolore magna aliqua. Ut enim ad minim\n    veniam, quis nostrud exercitation ullamco laboris\n    nisi ut aliquip ex ea commodo consequat. Duis aute\n    irure dolor in reprehenderit in voluptate velit esse.`\n```\n## 15.扩展运算符简写\n扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。\n\n```javascript\n// joining arrays\nconst odd = [1, 3, 5];\nconst nums = [2 ,4 , 6].concat(odd);\n\n// cloning arrays\nconst arr = [1, 2, 3, 4];\nconst arr2 = arr.slice()\n```\n简写：\n\n```javascript\n// joining arrays\nconst odd = [1, 3, 5 ];\nconst nums = [2 ,4 , 6, ...odd];\nconsole.log(nums); // [ 2, 4, 6, 1, 3, 5 ]\n\n// cloning arrays\nconst arr = [1, 2, 3, 4];\nconst arr2 = [...arr];\n```\n不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。\n\n```javascript\nconst odd = [1, 3, 5 ];\nconst nums = [2, ...odd, 4 , 6];\n```\n也可以使用扩展运算符解构：\n\n```javascript\nconst { a, b, ...z } = { a: 1, b: 2, c: 3, d: 4 };\nconsole.log(a) // 1\nconsole.log(b) // 2\nconsole.log(z) // { c: 3, d: 4 }\n```\n## 16.强制参数简写\nJavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。\n\n```javascript\nfunction foo(bar) {\n  if(bar === undefined) {\n    throw new Error('Missing parameter!');\n  }\n  return bar;\n}\n```\n简写：\n\n```javascript\nmandatory = () => {\n  throw new Error('Missing parameter!');\n}\n\nfoo = (bar = mandatory()) => {\n  return bar;\n}\n```\n## 17.Array.find简写\n想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。\n\n```javascript\nconst pets = [\n  { type: 'Dog', name: 'Max'},\n  { type: 'Cat', name: 'Karl'},\n  { type: 'Dog', name: 'Tommy'},\n]\n\nfunction findDog(name) {\n  for(let i = 0; i<pets.length; ++i) {\n    if(pets[i].type === 'Dog' && pets[i].name === name) {\n      return pets[i];\n    }\n  }\n}\n```\n简写：\n\n```javascript\npet = pets.find(pet => pet.type ==='Dog' && pet.name === 'Tommy');\nconsole.log(pet); // { type: 'Dog', name: 'Tommy' }\n```\n## 18.Object[key]简写\n考虑一个验证函数\n\n```javascript\nfunction validate(values) {\n  if(!values.first)\n    return false;\n  if(!values.last)\n    return false;\n  return true;\n}\n\nconsole.log(validate({first:'Bruce',last:'Wayne'})); // true\n```\n假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？\n\n```javascript\n// 对象验证规则\nconst schema = {\n  first: {\n    required:true\n  },\n  last: {\n    required:true\n  }\n}\n\n// 通用验证函数\nconst validate = (schema, values) => {\n  for(field in schema) {\n    if(schema[field].required) {\n      if(!values[field]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\nconsole.log(validate(schema, {first:'Bruce'})); // false\nconsole.log(validate(schema, {first:'Bruce',last:'Wayne'})); // true\n```\n现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了\n\n## 19.双重非位运算简写\n有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。\n\n```javascript\nMath.floor(4.9) === 4  //true\n```\n简写\n\n```javascript\n~~4.9 === 4  //true\n```","slug":"hello-world","published":1,"updated":"2017-08-02T02:26:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4inb00057wu5jfazlkur","content":"<h2 id=\"1-三元操作符\"><a href=\"#1-三元操作符\" class=\"headerlink\" title=\"1.三元操作符\"></a>1.三元操作符</h2><p>当想写if…else语句时，使用三元操作符来代替。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> answer;</div><div class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">    answer = <span class=\"string\">'is greater'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    answer = <span class=\"string\">'is lesser'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> answer = x &gt; <span class=\"number\">10</span> ? <span class=\"string\">'is greater'</span> : <span class=\"string\">'is lesser'</span>;</div></pre></td></tr></table></figure></p>\n<p>也可以嵌套if语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> big = x &gt; <span class=\"number\">10</span> ? <span class=\"string\">\" greater 10\"</span> : x</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-短路求值简写方式\"><a href=\"#2-短路求值简写方式\" class=\"headerlink\" title=\"2.短路求值简写方式\"></a>2.短路求值简写方式</h2><p>当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (variable1 !== <span class=\"literal\">null</span> || variable1 !== <span class=\"literal\">undefined</span> || variable1 !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">let</span> variable2 = variable1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或者可以使用短路求值方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> variable2 = variable1  || <span class=\"string\">'new'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-声明变量简写方法\"><a href=\"#3-声明变量简写方法\" class=\"headerlink\" title=\"3.声明变量简写方法\"></a>3.声明变量简写方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x;</div><div class=\"line\"><span class=\"keyword\">let</span> y;</div><div class=\"line\"><span class=\"keyword\">let</span> z = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<p>简写方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x, y, z=<span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"4-if存在条件简写方法\"><a href=\"#4-if存在条件简写方法\" class=\"headerlink\" title=\"4.if存在条件简写方法\"></a>4.if存在条件简写方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (likeJavaScript === <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (likeJavaScript)</div></pre></td></tr></table></figure>\n<p>只有likeJavaScript是真值时，二者语句才相等<br>如果判断值不是真值，则可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a;</div><div class=\"line\"><span class=\"keyword\">if</span> ( a !== <span class=\"literal\">true</span> ) &#123;</div><div class=\"line\"><span class=\"comment\">// do something...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a;</div><div class=\"line\"><span class=\"keyword\">if</span> ( !a ) &#123;</div><div class=\"line\"><span class=\"comment\">// do something...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"5-JavaScript循环简写方法\"><a href=\"#5-JavaScript循环简写方法\" class=\"headerlink\" title=\"5.JavaScript循环简写方法\"></a>5.JavaScript循环简写方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; allImgs.length; i++)</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> allImgs)</div></pre></td></tr></table></figure>\n<p>也可以使用Array.forEach：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArrayElements</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a[\"</span> + index + <span class=\"string\">\"] = \"</span> + element);</div><div class=\"line\">&#125;</div><div class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>].forEach(logArrayElements);</div><div class=\"line\"><span class=\"comment\">// logs:</span></div><div class=\"line\"><span class=\"comment\">// a[0] = 2</span></div><div class=\"line\"><span class=\"comment\">// a[1] = 5</span></div><div class=\"line\"><span class=\"comment\">// a[2] = 9</span></div></pre></td></tr></table></figure>\n<h2 id=\"6-短路评价\"><a href=\"#6-短路评价\" class=\"headerlink\" title=\"6.短路评价\"></a>6.短路评价</h2><p>给一个变量分配的值是通过判断其值是否为null或undefined，则可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dbHost;</div><div class=\"line\"><span class=\"keyword\">if</span> (process.env.DB_HOST) &#123;</div><div class=\"line\">  dbHost = process.env.DB_HOST;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  dbHost = <span class=\"string\">'localhost'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dbHost = process.env.DB_HOST || <span class=\"string\">'localhost'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"7-十进制指数\"><a href=\"#7-十进制指数\" class=\"headerlink\" title=\"7.十进制指数\"></a>7.十进制指数</h2><p>当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e7</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面都是返回true</span></div><div class=\"line\"><span class=\"number\">1e0</span> === <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"number\">1e1</span> === <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"number\">1e2</span> === <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"number\">1e3</span> === <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"number\">1e4</span> === <span class=\"number\">10000</span>;</div><div class=\"line\"><span class=\"number\">1e5</span> === <span class=\"number\">100000</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"8-对象属性简写\"><a href=\"#8-对象属性简写\" class=\"headerlink\" title=\"8.对象属性简写\"></a>8.对象属性简写</h2><p>如果属性名与key名相同，则可以采用ES6的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">x</span>:x, <span class=\"attr\">y</span>:y &#125;;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; x, y &#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"9-箭头函数简写\"><a href=\"#9-箭头函数简写\" class=\"headerlink\" title=\"9.箭头函数简写\"></a>9.箭头函数简写</h2><p>传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>, name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\">list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>, name);</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded'</span>), <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">console</span>.log(item));</div></pre></td></tr></table></figure>\n<h2 id=\"10-隐式返回值简写\"><a href=\"#10-隐式返回值简写\" class=\"headerlink\" title=\"10.隐式返回值简写\"></a>10.隐式返回值简写</h2><p>经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字）</p>\n<p>为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calcCircumference</span>(<span class=\"params\">diameter</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * diameter</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">calcCircumference = <span class=\"function\"><span class=\"params\">diameter</span> =&gt;</span> (</div><div class=\"line\">  <span class=\"built_in\">Math</span>.PI * diameter;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"11-默认参数值\"><a href=\"#11-默认参数值\" class=\"headerlink\" title=\"11.默认参数值\"></a>11.默认参数值</h2><p>为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span>(<span class=\"params\">l, w, h</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (w === <span class=\"literal\">undefined</span>)</div><div class=\"line\">    w = <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (h === <span class=\"literal\">undefined</span>)</div><div class=\"line\">    h = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> l * w * h;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">volume = <span class=\"function\">(<span class=\"params\">l, w = <span class=\"number\">3</span>, h = <span class=\"number\">4</span> </span>) =&gt;</span> (l * w * h);</div><div class=\"line\"></div><div class=\"line\">volume(<span class=\"number\">2</span>) <span class=\"comment\">//output: 24</span></div></pre></td></tr></table></figure>\n<h2 id=\"12-模板字符串\"><a href=\"#12-模板字符串\" class=\"headerlink\" title=\"12.模板字符串\"></a>12.模板字符串</h2><p>传统的JavaScript语言，输出模板通常是这样写的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"string\">'You have logged in as '</span> + first + <span class=\"string\">' '</span> + last + <span class=\"string\">'.'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'http://'</span> + host + <span class=\"string\">':'</span> + port + <span class=\"string\">'/'</span> + database;</div></pre></td></tr></table></figure>\n<p>ES6可以使用反引号和${}简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"string\">`You have logged in as <span class=\"subst\">$&#123;first&#125;</span> <span class=\"subst\">$&#123;last&#125;</span>`</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">`http://<span class=\"subst\">$&#123;host&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>/<span class=\"subst\">$&#123;database&#125;</span>`</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"13-解构赋值简写方法\"><a href=\"#13-解构赋值简写方法\" class=\"headerlink\" title=\"13.解构赋值简写方法\"></a>13.解构赋值简写方法</h2><p>在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/observable'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> action = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/action'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> runInAction = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/runInAction'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span>.props.store;</div><div class=\"line\"><span class=\"keyword\">const</span> form = <span class=\"keyword\">this</span>.props.form;</div><div class=\"line\"><span class=\"keyword\">const</span> loading = <span class=\"keyword\">this</span>.props.loading;</div><div class=\"line\"><span class=\"keyword\">const</span> errors = <span class=\"keyword\">this</span>.props.errors;</div><div class=\"line\"><span class=\"keyword\">const</span> entity = <span class=\"keyword\">this</span>.props.entity;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; observable, action, runInAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; store, form, loading, errors, entity &#125; = <span class=\"keyword\">this</span>.props;</div></pre></td></tr></table></figure>\n<p>也可以分配变量名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; store, form, loading, errors, <span class=\"attr\">entity</span>:contact &#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\"><span class=\"comment\">//最后一个变量名为contact</span></div></pre></td></tr></table></figure>\n<h2 id=\"14-多行字符串简写\"><a href=\"#14-多行字符串简写\" class=\"headerlink\" title=\"14.多行字符串简写\"></a>14.多行字符串简写</h2><p>需要输出多行字符串，需要使用+来拼接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lorem = <span class=\"string\">'Lorem ipsum dolor sit amet, consectetur\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'veniam, quis nostrud exercitation ullamco laboris\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'</span></div></pre></td></tr></table></figure>\n<p>使用反引号，则可以达到简写作用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lorem = <span class=\"string\">`Lorem ipsum dolor sit amet, consectetur</span></div><div class=\"line\">    adipisicing elit, sed do eiusmod tempor incididunt</div><div class=\"line\">    ut labore et dolore magna aliqua. Ut enim ad minim</div><div class=\"line\">    veniam, quis nostrud exercitation ullamco laboris</div><div class=\"line\">    nisi ut aliquip ex ea commodo consequat. Duis aute</div><div class=\"line\">    irure dolor in reprehenderit in voluptate velit esse.`</div></pre></td></tr></table></figure>\n<h2 id=\"15-扩展运算符简写\"><a href=\"#15-扩展运算符简写\" class=\"headerlink\" title=\"15.扩展运算符简写\"></a>15.扩展运算符简写</h2><p>扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// joining arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>].concat(odd);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cloning arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.slice()</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// joining arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ];</div><div class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(nums); <span class=\"comment\">// [ 2, 4, 6, 1, 3, 5 ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cloning arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr];</div></pre></td></tr></table></figure>\n<p>不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ];</div><div class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span>, ...odd, <span class=\"number\">4</span> , <span class=\"number\">6</span>];</div></pre></td></tr></table></figure>\n<p>也可以使用扩展运算符解构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; a, b, ...z &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(z) <span class=\"comment\">// &#123; c: 3, d: 4 &#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"16-强制参数简写\"><a href=\"#16-强制参数简写\" class=\"headerlink\" title=\"16.强制参数简写\"></a>16.强制参数简写</h2><p>JavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">bar</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(bar === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> bar;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mandatory = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo = <span class=\"function\">(<span class=\"params\">bar = mandatory(</span>)) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> bar;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"17-Array-find简写\"><a href=\"#17-Array-find简写\" class=\"headerlink\" title=\"17.Array.find简写\"></a>17.Array.find简写</h2><p>想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> pets = [</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Dog'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Max'</span>&#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Cat'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Karl'</span>&#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Dog'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tommy'</span>&#125;,</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findDog</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;pets.length; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(pets[i].type === <span class=\"string\">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> pets[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pet = pets.find(<span class=\"function\"><span class=\"params\">pet</span> =&gt;</span> pet.type ===<span class=\"string\">'Dog'</span> &amp;&amp; pet.name === <span class=\"string\">'Tommy'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"18-Object-key-简写\"><a href=\"#18-Object-key-简写\" class=\"headerlink\" title=\"18.Object[key]简写\"></a>18.Object[key]简写</h2><p>考虑一个验证函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!values.first)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!values.last)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(validate(&#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>,<span class=\"attr\">last</span>:<span class=\"string\">'Wayne'</span>&#125;)); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象验证规则</span></div><div class=\"line\"><span class=\"keyword\">const</span> schema = &#123;</div><div class=\"line\">  <span class=\"attr\">first</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">required</span>:<span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">last</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">required</span>:<span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通用验证函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> validate = <span class=\"function\">(<span class=\"params\">schema, values</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(field <span class=\"keyword\">in</span> schema) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(schema[field].required) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!values[field]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(validate(schema, &#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>&#125;)); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(validate(schema, &#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>,<span class=\"attr\">last</span>:<span class=\"string\">'Wayne'</span>&#125;)); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了</p>\n<h2 id=\"19-双重非位运算简写\"><a href=\"#19-双重非位运算简写\" class=\"headerlink\" title=\"19.双重非位运算简写\"></a>19.双重非位运算简写</h2><p>有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"number\">4.9</span>) === <span class=\"number\">4</span>  <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>简写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">~~<span class=\"number\">4.9</span> === <span class=\"number\">4</span>  <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"1-三元操作符\"><a href=\"#1-三元操作符\" class=\"headerlink\" title=\"1.三元操作符\"></a>1.三元操作符</h2><p>当想写if…else语句时，使用三元操作符来代替。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> answer;</div><div class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10</span>) &#123;</div><div class=\"line\">    answer = <span class=\"string\">'is greater'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    answer = <span class=\"string\">'is lesser'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> answer = x &gt; <span class=\"number\">10</span> ? <span class=\"string\">'is greater'</span> : <span class=\"string\">'is lesser'</span>;</div></pre></td></tr></table></figure></p>\n<p>也可以嵌套if语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> big = x &gt; <span class=\"number\">10</span> ? <span class=\"string\">\" greater 10\"</span> : x</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-短路求值简写方式\"><a href=\"#2-短路求值简写方式\" class=\"headerlink\" title=\"2.短路求值简写方式\"></a>2.短路求值简写方式</h2><p>当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (variable1 !== <span class=\"literal\">null</span> || variable1 !== <span class=\"literal\">undefined</span> || variable1 !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">let</span> variable2 = variable1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或者可以使用短路求值方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> variable2 = variable1  || <span class=\"string\">'new'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-声明变量简写方法\"><a href=\"#3-声明变量简写方法\" class=\"headerlink\" title=\"3.声明变量简写方法\"></a>3.声明变量简写方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x;</div><div class=\"line\"><span class=\"keyword\">let</span> y;</div><div class=\"line\"><span class=\"keyword\">let</span> z = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<p>简写方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x, y, z=<span class=\"number\">3</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"4-if存在条件简写方法\"><a href=\"#4-if存在条件简写方法\" class=\"headerlink\" title=\"4.if存在条件简写方法\"></a>4.if存在条件简写方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (likeJavaScript === <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (likeJavaScript)</div></pre></td></tr></table></figure>\n<p>只有likeJavaScript是真值时，二者语句才相等<br>如果判断值不是真值，则可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a;</div><div class=\"line\"><span class=\"keyword\">if</span> ( a !== <span class=\"literal\">true</span> ) &#123;</div><div class=\"line\"><span class=\"comment\">// do something...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a;</div><div class=\"line\"><span class=\"keyword\">if</span> ( !a ) &#123;</div><div class=\"line\"><span class=\"comment\">// do something...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"5-JavaScript循环简写方法\"><a href=\"#5-JavaScript循环简写方法\" class=\"headerlink\" title=\"5.JavaScript循环简写方法\"></a>5.JavaScript循环简写方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; allImgs.length; i++)</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> allImgs)</div></pre></td></tr></table></figure>\n<p>也可以使用Array.forEach：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArrayElements</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a[\"</span> + index + <span class=\"string\">\"] = \"</span> + element);</div><div class=\"line\">&#125;</div><div class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>].forEach(logArrayElements);</div><div class=\"line\"><span class=\"comment\">// logs:</span></div><div class=\"line\"><span class=\"comment\">// a[0] = 2</span></div><div class=\"line\"><span class=\"comment\">// a[1] = 5</span></div><div class=\"line\"><span class=\"comment\">// a[2] = 9</span></div></pre></td></tr></table></figure>\n<h2 id=\"6-短路评价\"><a href=\"#6-短路评价\" class=\"headerlink\" title=\"6.短路评价\"></a>6.短路评价</h2><p>给一个变量分配的值是通过判断其值是否为null或undefined，则可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dbHost;</div><div class=\"line\"><span class=\"keyword\">if</span> (process.env.DB_HOST) &#123;</div><div class=\"line\">  dbHost = process.env.DB_HOST;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  dbHost = <span class=\"string\">'localhost'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> dbHost = process.env.DB_HOST || <span class=\"string\">'localhost'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"7-十进制指数\"><a href=\"#7-十进制指数\" class=\"headerlink\" title=\"7.十进制指数\"></a>7.十进制指数</h2><p>当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e7</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面都是返回true</span></div><div class=\"line\"><span class=\"number\">1e0</span> === <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"number\">1e1</span> === <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"number\">1e2</span> === <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"number\">1e3</span> === <span class=\"number\">1000</span>;</div><div class=\"line\"><span class=\"number\">1e4</span> === <span class=\"number\">10000</span>;</div><div class=\"line\"><span class=\"number\">1e5</span> === <span class=\"number\">100000</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"8-对象属性简写\"><a href=\"#8-对象属性简写\" class=\"headerlink\" title=\"8.对象属性简写\"></a>8.对象属性简写</h2><p>如果属性名与key名相同，则可以采用ES6的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">x</span>:x, <span class=\"attr\">y</span>:y &#125;;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123; x, y &#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"9-箭头函数简写\"><a href=\"#9-箭头函数简写\" class=\"headerlink\" title=\"9.箭头函数简写\"></a>9.箭头函数简写</h2><p>传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>, name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded'</span>)</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\">list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sayHello = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>, name);</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loaded'</span>), <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">console</span>.log(item));</div></pre></td></tr></table></figure>\n<h2 id=\"10-隐式返回值简写\"><a href=\"#10-隐式返回值简写\" class=\"headerlink\" title=\"10.隐式返回值简写\"></a>10.隐式返回值简写</h2><p>经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字）</p>\n<p>为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calcCircumference</span>(<span class=\"params\">diameter</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * diameter</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">calcCircumference = <span class=\"function\"><span class=\"params\">diameter</span> =&gt;</span> (</div><div class=\"line\">  <span class=\"built_in\">Math</span>.PI * diameter;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"11-默认参数值\"><a href=\"#11-默认参数值\" class=\"headerlink\" title=\"11.默认参数值\"></a>11.默认参数值</h2><p>为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span>(<span class=\"params\">l, w, h</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (w === <span class=\"literal\">undefined</span>)</div><div class=\"line\">    w = <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (h === <span class=\"literal\">undefined</span>)</div><div class=\"line\">    h = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> l * w * h;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">volume = <span class=\"function\">(<span class=\"params\">l, w = <span class=\"number\">3</span>, h = <span class=\"number\">4</span> </span>) =&gt;</span> (l * w * h);</div><div class=\"line\"></div><div class=\"line\">volume(<span class=\"number\">2</span>) <span class=\"comment\">//output: 24</span></div></pre></td></tr></table></figure>\n<h2 id=\"12-模板字符串\"><a href=\"#12-模板字符串\" class=\"headerlink\" title=\"12.模板字符串\"></a>12.模板字符串</h2><p>传统的JavaScript语言，输出模板通常是这样写的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"string\">'You have logged in as '</span> + first + <span class=\"string\">' '</span> + last + <span class=\"string\">'.'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">'http://'</span> + host + <span class=\"string\">':'</span> + port + <span class=\"string\">'/'</span> + database;</div></pre></td></tr></table></figure>\n<p>ES6可以使用反引号和${}简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"string\">`You have logged in as <span class=\"subst\">$&#123;first&#125;</span> <span class=\"subst\">$&#123;last&#125;</span>`</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"string\">`http://<span class=\"subst\">$&#123;host&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>/<span class=\"subst\">$&#123;database&#125;</span>`</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"13-解构赋值简写方法\"><a href=\"#13-解构赋值简写方法\" class=\"headerlink\" title=\"13.解构赋值简写方法\"></a>13.解构赋值简写方法</h2><p>在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/observable'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> action = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/action'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> runInAction = <span class=\"built_in\">require</span>(<span class=\"string\">'mobx/runInAction'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">this</span>.props.store;</div><div class=\"line\"><span class=\"keyword\">const</span> form = <span class=\"keyword\">this</span>.props.form;</div><div class=\"line\"><span class=\"keyword\">const</span> loading = <span class=\"keyword\">this</span>.props.loading;</div><div class=\"line\"><span class=\"keyword\">const</span> errors = <span class=\"keyword\">this</span>.props.errors;</div><div class=\"line\"><span class=\"keyword\">const</span> entity = <span class=\"keyword\">this</span>.props.entity;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; observable, action, runInAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; store, form, loading, errors, entity &#125; = <span class=\"keyword\">this</span>.props;</div></pre></td></tr></table></figure>\n<p>也可以分配变量名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; store, form, loading, errors, <span class=\"attr\">entity</span>:contact &#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\"><span class=\"comment\">//最后一个变量名为contact</span></div></pre></td></tr></table></figure>\n<h2 id=\"14-多行字符串简写\"><a href=\"#14-多行字符串简写\" class=\"headerlink\" title=\"14.多行字符串简写\"></a>14.多行字符串简写</h2><p>需要输出多行字符串，需要使用+来拼接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lorem = <span class=\"string\">'Lorem ipsum dolor sit amet, consectetur\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'veniam, quis nostrud exercitation ullamco laboris\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t'</span></div><div class=\"line\">    + <span class=\"string\">'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'</span></div></pre></td></tr></table></figure>\n<p>使用反引号，则可以达到简写作用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lorem = <span class=\"string\">`Lorem ipsum dolor sit amet, consectetur</span></div><div class=\"line\">    adipisicing elit, sed do eiusmod tempor incididunt</div><div class=\"line\">    ut labore et dolore magna aliqua. Ut enim ad minim</div><div class=\"line\">    veniam, quis nostrud exercitation ullamco laboris</div><div class=\"line\">    nisi ut aliquip ex ea commodo consequat. Duis aute</div><div class=\"line\">    irure dolor in reprehenderit in voluptate velit esse.`</div></pre></td></tr></table></figure>\n<h2 id=\"15-扩展运算符简写\"><a href=\"#15-扩展运算符简写\" class=\"headerlink\" title=\"15.扩展运算符简写\"></a>15.扩展运算符简写</h2><p>扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// joining arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>].concat(odd);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cloning arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.slice()</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// joining arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ];</div><div class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span> ,<span class=\"number\">4</span> , <span class=\"number\">6</span>, ...odd];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(nums); <span class=\"comment\">// [ 2, 4, 6, 1, 3, 5 ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cloning arrays</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr];</div></pre></td></tr></table></figure>\n<p>不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> odd = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span> ];</div><div class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">2</span>, ...odd, <span class=\"number\">4</span> , <span class=\"number\">6</span>];</div></pre></td></tr></table></figure>\n<p>也可以使用扩展运算符解构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; a, b, ...z &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(z) <span class=\"comment\">// &#123; c: 3, d: 4 &#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"16-强制参数简写\"><a href=\"#16-强制参数简写\" class=\"headerlink\" title=\"16.强制参数简写\"></a>16.强制参数简写</h2><p>JavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">bar</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(bar === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> bar;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mandatory = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo = <span class=\"function\">(<span class=\"params\">bar = mandatory(</span>)) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> bar;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"17-Array-find简写\"><a href=\"#17-Array-find简写\" class=\"headerlink\" title=\"17.Array.find简写\"></a>17.Array.find简写</h2><p>想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> pets = [</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Dog'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Max'</span>&#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Cat'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Karl'</span>&#125;,</div><div class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'Dog'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Tommy'</span>&#125;,</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findDog</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;pets.length; ++i) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(pets[i].type === <span class=\"string\">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> pets[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pet = pets.find(<span class=\"function\"><span class=\"params\">pet</span> =&gt;</span> pet.type ===<span class=\"string\">'Dog'</span> &amp;&amp; pet.name === <span class=\"string\">'Tommy'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"18-Object-key-简写\"><a href=\"#18-Object-key-简写\" class=\"headerlink\" title=\"18.Object[key]简写\"></a>18.Object[key]简写</h2><p>考虑一个验证函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!values.first)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!values.last)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(validate(&#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>,<span class=\"attr\">last</span>:<span class=\"string\">'Wayne'</span>&#125;)); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象验证规则</span></div><div class=\"line\"><span class=\"keyword\">const</span> schema = &#123;</div><div class=\"line\">  <span class=\"attr\">first</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">required</span>:<span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">last</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">required</span>:<span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通用验证函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> validate = <span class=\"function\">(<span class=\"params\">schema, values</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(field <span class=\"keyword\">in</span> schema) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(schema[field].required) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!values[field]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(validate(schema, &#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>&#125;)); <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(validate(schema, &#123;<span class=\"attr\">first</span>:<span class=\"string\">'Bruce'</span>,<span class=\"attr\">last</span>:<span class=\"string\">'Wayne'</span>&#125;)); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了</p>\n<h2 id=\"19-双重非位运算简写\"><a href=\"#19-双重非位运算简写\" class=\"headerlink\" title=\"19.双重非位运算简写\"></a>19.双重非位运算简写</h2><p>有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"number\">4.9</span>) === <span class=\"number\">4</span>  <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>简写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">~~<span class=\"number\">4.9</span> === <span class=\"number\">4</span>  <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>"},{"title":"mac 查看、修改文件权限的命令","author":"Ao","date":"2017-11-01T06:47:56.000Z","_content":"### 查看文件/文件夹权限：\n1. 查看某个文件权限的命令\n```\nls -l + 要查看文件的文件名\n```\n2. 查看某个文件夹里所有文件/文件夹的权限\n```\nls -l + 文件夹名\n```\n3. 如果要查看某个文件夹的权限，需要在该文件夹外部目录下执行\n```\nls -l\n```\n<!--more-->\n\n### 修改文件的权限\n修改权限的命令格式 :\n\nchmod [<权限范围><权限操作><具体权限>] [文件或目录…]\n\n<权限范围> \n1. u：User，即文件或目录的拥有者。 \n2. g：Group，即文件或目录的所属群组。 \n3. o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。 \n4. a：All，即全部的用户，包含拥有者，所属群组以及其他用户。\n\n<权限操作> \n1. \"+\"：表示增加权限 \n2. \"-\" ：表示取消权限 \n3. \"=\"：表示唯一设定权限\n\n<具体权限> \n1. r：表示可读取 \n2. w：表示可写入 \n3. x ：表示可执行\n\n<b>让其他用户都可以对111.txt文件有写的权限，则执行<b>\n```\nchmod o+w 111.txt\n```","source":"_posts/mac-查看、修改文件权限的命令.md","raw":"title: mac 查看、修改文件权限的命令\nauthor: Ao\ndate: 2017-11-01 14:47:56\ntags:\n---\n### 查看文件/文件夹权限：\n1. 查看某个文件权限的命令\n```\nls -l + 要查看文件的文件名\n```\n2. 查看某个文件夹里所有文件/文件夹的权限\n```\nls -l + 文件夹名\n```\n3. 如果要查看某个文件夹的权限，需要在该文件夹外部目录下执行\n```\nls -l\n```\n<!--more-->\n\n### 修改文件的权限\n修改权限的命令格式 :\n\nchmod [<权限范围><权限操作><具体权限>] [文件或目录…]\n\n<权限范围> \n1. u：User，即文件或目录的拥有者。 \n2. g：Group，即文件或目录的所属群组。 \n3. o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。 \n4. a：All，即全部的用户，包含拥有者，所属群组以及其他用户。\n\n<权限操作> \n1. \"+\"：表示增加权限 \n2. \"-\" ：表示取消权限 \n3. \"=\"：表示唯一设定权限\n\n<具体权限> \n1. r：表示可读取 \n2. w：表示可写入 \n3. x ：表示可执行\n\n<b>让其他用户都可以对111.txt文件有写的权限，则执行<b>\n```\nchmod o+w 111.txt\n```","slug":"mac-查看、修改文件权限的命令","published":1,"updated":"2017-11-01T06:52:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4inf00077wu5ihns0ras","content":"<h3 id=\"查看文件-文件夹权限：\"><a href=\"#查看文件-文件夹权限：\" class=\"headerlink\" title=\"查看文件/文件夹权限：\"></a>查看文件/文件夹权限：</h3><ol>\n<li><p>查看某个文件权限的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l + 要查看文件的文件名</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看某个文件夹里所有文件/文件夹的权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l + 文件夹名</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果要查看某个文件夹的权限，需要在该文件夹外部目录下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"修改文件的权限\"><a href=\"#修改文件的权限\" class=\"headerlink\" title=\"修改文件的权限\"></a>修改文件的权限</h3><p>修改权限的命令格式 :</p>\n<p>chmod [&lt;权限范围&gt;&lt;权限操作&gt;&lt;具体权限&gt;] [文件或目录…]</p>\n<p>&lt;权限范围&gt; </p>\n<ol>\n<li>u：User，即文件或目录的拥有者。 </li>\n<li>g：Group，即文件或目录的所属群组。 </li>\n<li>o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。 </li>\n<li>a：All，即全部的用户，包含拥有者，所属群组以及其他用户。</li>\n</ol>\n<p>&lt;权限操作&gt; </p>\n<ol>\n<li>“+”：表示增加权限 </li>\n<li>“-“ ：表示取消权限 </li>\n<li>“=”：表示唯一设定权限</li>\n</ol>\n<p>&lt;具体权限&gt; </p>\n<ol>\n<li>r：表示可读取 </li>\n<li>w：表示可写入 </li>\n<li>x ：表示可执行</li>\n</ol>\n<p><b>让其他用户都可以对111.txt文件有写的权限，则执行<b><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod o+w 111.txt</div></pre></td></tr></table></figure></b></b></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"查看文件-文件夹权限：\"><a href=\"#查看文件-文件夹权限：\" class=\"headerlink\" title=\"查看文件/文件夹权限：\"></a>查看文件/文件夹权限：</h3><ol>\n<li><p>查看某个文件权限的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l + 要查看文件的文件名</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看某个文件夹里所有文件/文件夹的权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l + 文件夹名</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果要查看某个文件夹的权限，需要在该文件夹外部目录下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -l</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<h3 id=\"修改文件的权限\"><a href=\"#修改文件的权限\" class=\"headerlink\" title=\"修改文件的权限\"></a>修改文件的权限</h3><p>修改权限的命令格式 :</p>\n<p>chmod [&lt;权限范围&gt;&lt;权限操作&gt;&lt;具体权限&gt;] [文件或目录…]</p>\n<p>&lt;权限范围&gt; </p>\n<ol>\n<li>u：User，即文件或目录的拥有者。 </li>\n<li>g：Group，即文件或目录的所属群组。 </li>\n<li>o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。 </li>\n<li>a：All，即全部的用户，包含拥有者，所属群组以及其他用户。</li>\n</ol>\n<p>&lt;权限操作&gt; </p>\n<ol>\n<li>“+”：表示增加权限 </li>\n<li>“-“ ：表示取消权限 </li>\n<li>“=”：表示唯一设定权限</li>\n</ol>\n<p>&lt;具体权限&gt; </p>\n<ol>\n<li>r：表示可读取 </li>\n<li>w：表示可写入 </li>\n<li>x ：表示可执行</li>\n</ol>\n<p><b>让其他用户都可以对111.txt文件有写的权限，则执行<b><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod o+w 111.txt</div></pre></td></tr></table></figure></b></b></p>"},{"title":"删除已安装插件","author":"Ao","date":"2017-06-23T02:50:00.000Z","_content":"1. ctr+shift+p 调出插件窗口\n2. 然后输入remove, 选择remove Package\n3. 再输入要删除的插件名称，或者在下拉列表中选择要删除的插件名称\n\n<!--more-->","source":"_posts/test.md","raw":"title: 删除已安装插件\nauthor: Ao\ntags:\n  - sublime\ncategories:\n  - 编辑器\ndate: 2017-06-23 10:50:00\n---\n1. ctr+shift+p 调出插件窗口\n2. 然后输入remove, 选择remove Package\n3. 再输入要删除的插件名称，或者在下拉列表中选择要删除的插件名称\n\n<!--more-->","slug":"test","published":1,"updated":"2017-08-02T02:25:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4iny000b7wu5vdviruvt","content":"<ol>\n<li>ctr+shift+p 调出插件窗口</li>\n<li>然后输入remove, 选择remove Package</li>\n<li>再输入要删除的插件名称，或者在下拉列表中选择要删除的插件名称</li>\n</ol>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<ol>\n<li>ctr+shift+p 调出插件窗口</li>\n<li>然后输入remove, 选择remove Package</li>\n<li>再输入要删除的插件名称，或者在下拉列表中选择要删除的插件名称</li>\n</ol>","more":""},{"title":"使用markdown自动生成Restfull风格的文档","author":"Ao","date":"2017-09-11T03:04:22.000Z","_content":"### mkdocs环境搭建\npip是Python的包管理器，类似于nodejs中的npm、ruby的gem。\n安装都比较简单，windows下需要配置环境变量。\nmac 已经自带python，但是ipython要自己安装。\n##### 1.安装 pip \n```javascript\nsudo easy_install pip\n\n// 如果执行报错，可以执行： sudo easy_install -U pip\n```\n<!--more-->\n##### 2.使用pip安装mkdocs\n```javascript\npip install mkdocs\npip install mkdocs-material\n\n// mkdocs-material 是一款主题\n```\n\n##### 3 启动\n```javascript\nmkdocs serve\n```\nmkdocs内置server会将markdown编译成html并部署到8000端口，直接 http://localhost:8000 访问就可以了。","source":"_posts/使用markdown自动生成Restfull风格的文档.md","raw":"title: 使用markdown自动生成Restfull风格的文档\nauthor: Ao\ndate: 2017-09-11 11:04:22\ntags:\n---\n### mkdocs环境搭建\npip是Python的包管理器，类似于nodejs中的npm、ruby的gem。\n安装都比较简单，windows下需要配置环境变量。\nmac 已经自带python，但是ipython要自己安装。\n##### 1.安装 pip \n```javascript\nsudo easy_install pip\n\n// 如果执行报错，可以执行： sudo easy_install -U pip\n```\n<!--more-->\n##### 2.使用pip安装mkdocs\n```javascript\npip install mkdocs\npip install mkdocs-material\n\n// mkdocs-material 是一款主题\n```\n\n##### 3 启动\n```javascript\nmkdocs serve\n```\nmkdocs内置server会将markdown编译成html并部署到8000端口，直接 http://localhost:8000 访问就可以了。","slug":"使用markdown自动生成Restfull风格的文档","published":1,"updated":"2017-09-12T11:50:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4inz000c7wu51q6i7i5i","content":"<h3 id=\"mkdocs环境搭建\"><a href=\"#mkdocs环境搭建\" class=\"headerlink\" title=\"mkdocs环境搭建\"></a>mkdocs环境搭建</h3><p>pip是Python的包管理器，类似于nodejs中的npm、ruby的gem。<br>安装都比较简单，windows下需要配置环境变量。<br>mac 已经自带python，但是ipython要自己安装。</p>\n<h5 id=\"1-安装-pip\"><a href=\"#1-安装-pip\" class=\"headerlink\" title=\"1.安装 pip\"></a>1.安装 pip</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo easy_install pip</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果执行报错，可以执行： sudo easy_install -U pip</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"2-使用pip安装mkdocs\"><a href=\"#2-使用pip安装mkdocs\" class=\"headerlink\" title=\"2.使用pip安装mkdocs\"></a>2.使用pip安装mkdocs</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install mkdocs</div><div class=\"line\">pip install mkdocs-material</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// mkdocs-material 是一款主题</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3 启动\"></a>3 启动</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdocs serve</div></pre></td></tr></table></figure>\n<p>mkdocs内置server会将markdown编译成html并部署到8000端口，直接 <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"external\">http://localhost:8000</a> 访问就可以了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"mkdocs环境搭建\"><a href=\"#mkdocs环境搭建\" class=\"headerlink\" title=\"mkdocs环境搭建\"></a>mkdocs环境搭建</h3><p>pip是Python的包管理器，类似于nodejs中的npm、ruby的gem。<br>安装都比较简单，windows下需要配置环境变量。<br>mac 已经自带python，但是ipython要自己安装。</p>\n<h5 id=\"1-安装-pip\"><a href=\"#1-安装-pip\" class=\"headerlink\" title=\"1.安装 pip\"></a>1.安装 pip</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo easy_install pip</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果执行报错，可以执行： sudo easy_install -U pip</span></div></pre></td></tr></table></figure>","more":"<h5 id=\"2-使用pip安装mkdocs\"><a href=\"#2-使用pip安装mkdocs\" class=\"headerlink\" title=\"2.使用pip安装mkdocs\"></a>2.使用pip安装mkdocs</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install mkdocs</div><div class=\"line\">pip install mkdocs-material</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// mkdocs-material 是一款主题</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3 启动\"></a>3 启动</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdocs serve</div></pre></td></tr></table></figure>\n<p>mkdocs内置server会将markdown编译成html并部署到8000端口，直接 <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"external\">http://localhost:8000</a> 访问就可以了。</p>"},{"title":"node版本管理工具nvm-Mac下安装及使用","author":"Ao","date":"2017-09-29T06:31:00.000Z","_content":"### 前言\n\n目前主流的node版本管理工具有两种，nvm和n。\n两者差异挺大的，具体分析可以参考一下淘宝FED团队的一篇文章：\n\n<a href=\"http://taobaofed.org/blog/2015/11/17/nvm-or-n/\" target=\"_blank\">管理 node 版本，选择 nvm 还是 n？</a>\n\n总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。\n\n### 安装\n使用<b>curl</b>方式来安装：\n```javascript\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\n```\n<!--more-->\n完成后nvm就被安装在了<b>~/.nvm</b>下啦，接下来就需要配一下环境变量了，如果你也使用了<b>zsh</b>的话，就需要在<b>~/.zshrc</b>这个配置文件中配置，否则就找找看<b>~/.bash_profile</b>或者<b>~/.profile</b>吧。\n\n打开<b>~/.zshrc</b>，在最后一行加上：\n```javascript\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n这一步的作用是每次新打开一个bash，nvm都会被自动添加到环境变量中了。\n完成后输入<b>source ~/.zshrc</b>重新启动一下配置。\n输入<b>nvm</b>可以看到如下信息：\n```javascript\n➜  ~  nvm\n\nNode Version Manager\n\nNote: <version> refers to any version-like string nvm understands. This includes:\n  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)\n  - default (built-in) aliases: node, stable, unstable, iojs, system\n  - custom aliases you define with `nvm alias foo`\n\nUsage:\n  nvm help                                  Show this message\n  nvm --version                             Print out the latest released version of nvm\n  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available\n    --reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version number>\n  nvm uninstall <version>                   Uninstall a version\n  nvm use [--silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available\n  nvm exec [--silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available\n  nvm run [--silent] <version> [<args>]     Run `node` on <version> with <args> as arguments. Uses .nvmrc if available\n  nvm current                               Display currently activated version\n  nvm ls                                    List installed versions\n  nvm ls <version>                          List versions matching a given description\n  nvm ls-remote                             List remote versions available for install\n  nvm version <version>                     Resolve the given description to a single local version\n  nvm version-remote <version>              Resolve the given description to a single remote version\n  nvm deactivate                            Undo effects of `nvm` on current shell\n  nvm alias [<pattern>]                     Show all aliases beginning with <pattern>\n  nvm alias <name> <version>                Set an alias named <name> pointing to <version>\n  nvm unalias <name>                        Deletes the alias named <name>\n  nvm reinstall-packages <version>          Reinstall global `npm` packages contained in <version> to current version\n  nvm unload                                Unload `nvm` from shell\n  nvm which [<version>]                     Display path to installed node version. Uses .nvmrc if available\n\nExample:\n  nvm install v0.10.32                  Install a specific version number\n  nvm use 0.10                          Use the latest available 0.10.x release\n  nvm run 0.10.32 app.js                Run app.js using node v0.10.32\n  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32\n  nvm alias default 0.10.32             Set default node version on a shell\n\nNote:\n  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)\n```\n至此，nvm的安装就算是告一段落了，下面我们就来看一下如何使用它来对node版本进行切换使用。\n\n### 使用\n其实，上述最后一步打印出的信息已经可以清楚看到nvm的全部命令。\n各项命令的详细用法及含义可参考上文提到的<a href=\"https://github.com/creationix/nvm\" target=\"_blank\">nvm文档</a>。\n\n接下来就轮到安装我们的主角node大哥了。\n\n首先我们可以使用<b>nvm ls-remote</b>看一下node有哪些版本可以安装：\n```javascript\n➜  ~  nvm ls-remote\n            v0.1.14\n            v0.1.15\n            v0.1.16\n            ...\n```\n\n> Note：由于在写文章的时候网络有问题，无法展示所有结果出来，上面代码示意一下，正确情况下会显示非常多版本出来，大家都知道node更新速度非常非常快。\n\n安装这个版本：\n```javascript\n$ nvm install v4.1.0\n######################################################################## 100.0%\n\nNow using node v4.1.0\n```\n### 使用nvm轻松切换node版本\n按照上述安装方法的话，nvm会将各个版本的node安装在~/.nvm/versions/node目录下，我们可以打开这个目录看看有些什么东西：\n```javascript\n➜  ~  ls -a ~/.nvm/versions/node\n.      ..     v4.1.0\n```\n事实上v4.1.0这个目录分别存放node的binary档，nvm会在$PATH前面安插指定版本的目录，透过这种方式在使用node命令时就会用指定版本的node来运行了。\n\n可以确认实际的$PATH看看：\n```javascript\n➜  ~  echo $PATH\n/Users/***/.nvm/versions/node/v4.1.0/bin:...\n```\n由于刚刚我们通过nvm安装node，会自动把最后安装的版本设为当前使用的版本，因此上述路径结尾会是.../v5.5.0/bin（还可通过nvm ls命令查看当前已安装的所有node版本）。\n\n接下来我们可以使用nvm use <version>切换版本：\n```\n➜  ~  nvm use v4.1.0\nNow using node v4.1.0 (npm v2.14.3)\n➜  ~  node -v\nv4.1.0\n➜  ~  nvm use v5.5.0\nNow using node v5.5.0 (npm v3.3.12)\n➜  ~  node -v\nv5.5.0\n```\n轻轻松松完成切换！\n\n不过问题来了，这时如果你新打开一个bash，输入nvm current会发现显示为null，这是因为使用nvm use命令只会在当前bash里生效，重新打开一个bash你会发现$PATH的值已经不包含刚才的node目录了，要解决这个问题也很简单，使用nvm alias default <version>命令来指定一个默认的node版本就ok了，这里我使用了v4.1.0作为默认版本：\n```\n➜  ~  nvm alias default v4.1.0\ndefault -> v4.1.0\n```\n此时再打开一个bash输入nvm current就会显示为v4.1.0了。","source":"_posts/如何管理好10万行代码的前端单页面应用.md","raw":"title: node版本管理工具nvm-Mac下安装及使用\nauthor: Ao\ntags:\n  - node\n  - nvm\ncategories: []\ndate: 2017-09-29 14:31:00\n---\n### 前言\n\n目前主流的node版本管理工具有两种，nvm和n。\n两者差异挺大的，具体分析可以参考一下淘宝FED团队的一篇文章：\n\n<a href=\"http://taobaofed.org/blog/2015/11/17/nvm-or-n/\" target=\"_blank\">管理 node 版本，选择 nvm 还是 n？</a>\n\n总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。\n\n### 安装\n使用<b>curl</b>方式来安装：\n```javascript\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\n```\n<!--more-->\n完成后nvm就被安装在了<b>~/.nvm</b>下啦，接下来就需要配一下环境变量了，如果你也使用了<b>zsh</b>的话，就需要在<b>~/.zshrc</b>这个配置文件中配置，否则就找找看<b>~/.bash_profile</b>或者<b>~/.profile</b>吧。\n\n打开<b>~/.zshrc</b>，在最后一行加上：\n```javascript\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n这一步的作用是每次新打开一个bash，nvm都会被自动添加到环境变量中了。\n完成后输入<b>source ~/.zshrc</b>重新启动一下配置。\n输入<b>nvm</b>可以看到如下信息：\n```javascript\n➜  ~  nvm\n\nNode Version Manager\n\nNote: <version> refers to any version-like string nvm understands. This includes:\n  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)\n  - default (built-in) aliases: node, stable, unstable, iojs, system\n  - custom aliases you define with `nvm alias foo`\n\nUsage:\n  nvm help                                  Show this message\n  nvm --version                             Print out the latest released version of nvm\n  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available\n    --reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version number>\n  nvm uninstall <version>                   Uninstall a version\n  nvm use [--silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available\n  nvm exec [--silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available\n  nvm run [--silent] <version> [<args>]     Run `node` on <version> with <args> as arguments. Uses .nvmrc if available\n  nvm current                               Display currently activated version\n  nvm ls                                    List installed versions\n  nvm ls <version>                          List versions matching a given description\n  nvm ls-remote                             List remote versions available for install\n  nvm version <version>                     Resolve the given description to a single local version\n  nvm version-remote <version>              Resolve the given description to a single remote version\n  nvm deactivate                            Undo effects of `nvm` on current shell\n  nvm alias [<pattern>]                     Show all aliases beginning with <pattern>\n  nvm alias <name> <version>                Set an alias named <name> pointing to <version>\n  nvm unalias <name>                        Deletes the alias named <name>\n  nvm reinstall-packages <version>          Reinstall global `npm` packages contained in <version> to current version\n  nvm unload                                Unload `nvm` from shell\n  nvm which [<version>]                     Display path to installed node version. Uses .nvmrc if available\n\nExample:\n  nvm install v0.10.32                  Install a specific version number\n  nvm use 0.10                          Use the latest available 0.10.x release\n  nvm run 0.10.32 app.js                Run app.js using node v0.10.32\n  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32\n  nvm alias default 0.10.32             Set default node version on a shell\n\nNote:\n  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)\n```\n至此，nvm的安装就算是告一段落了，下面我们就来看一下如何使用它来对node版本进行切换使用。\n\n### 使用\n其实，上述最后一步打印出的信息已经可以清楚看到nvm的全部命令。\n各项命令的详细用法及含义可参考上文提到的<a href=\"https://github.com/creationix/nvm\" target=\"_blank\">nvm文档</a>。\n\n接下来就轮到安装我们的主角node大哥了。\n\n首先我们可以使用<b>nvm ls-remote</b>看一下node有哪些版本可以安装：\n```javascript\n➜  ~  nvm ls-remote\n            v0.1.14\n            v0.1.15\n            v0.1.16\n            ...\n```\n\n> Note：由于在写文章的时候网络有问题，无法展示所有结果出来，上面代码示意一下，正确情况下会显示非常多版本出来，大家都知道node更新速度非常非常快。\n\n安装这个版本：\n```javascript\n$ nvm install v4.1.0\n######################################################################## 100.0%\n\nNow using node v4.1.0\n```\n### 使用nvm轻松切换node版本\n按照上述安装方法的话，nvm会将各个版本的node安装在~/.nvm/versions/node目录下，我们可以打开这个目录看看有些什么东西：\n```javascript\n➜  ~  ls -a ~/.nvm/versions/node\n.      ..     v4.1.0\n```\n事实上v4.1.0这个目录分别存放node的binary档，nvm会在$PATH前面安插指定版本的目录，透过这种方式在使用node命令时就会用指定版本的node来运行了。\n\n可以确认实际的$PATH看看：\n```javascript\n➜  ~  echo $PATH\n/Users/***/.nvm/versions/node/v4.1.0/bin:...\n```\n由于刚刚我们通过nvm安装node，会自动把最后安装的版本设为当前使用的版本，因此上述路径结尾会是.../v5.5.0/bin（还可通过nvm ls命令查看当前已安装的所有node版本）。\n\n接下来我们可以使用nvm use <version>切换版本：\n```\n➜  ~  nvm use v4.1.0\nNow using node v4.1.0 (npm v2.14.3)\n➜  ~  node -v\nv4.1.0\n➜  ~  nvm use v5.5.0\nNow using node v5.5.0 (npm v3.3.12)\n➜  ~  node -v\nv5.5.0\n```\n轻轻松松完成切换！\n\n不过问题来了，这时如果你新打开一个bash，输入nvm current会发现显示为null，这是因为使用nvm use命令只会在当前bash里生效，重新打开一个bash你会发现$PATH的值已经不包含刚才的node目录了，要解决这个问题也很简单，使用nvm alias default <version>命令来指定一个默认的node版本就ok了，这里我使用了v4.1.0作为默认版本：\n```\n➜  ~  nvm alias default v4.1.0\ndefault -> v4.1.0\n```\n此时再打开一个bash输入nvm current就会显示为v4.1.0了。","slug":"如何管理好10万行代码的前端单页面应用","published":1,"updated":"2017-11-01T06:47:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9gp4io1000d7wu5bmjq2grc","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前主流的node版本管理工具有两种，nvm和n。<br>两者差异挺大的，具体分析可以参考一下淘宝FED团队的一篇文章：</p>\n<p><a href=\"http://taobaofed.org/blog/2015/11/17/nvm-or-n/\" target=\"_blank\">管理 node 版本，选择 nvm 还是 n？</a></p>\n<p>总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>使用<b>curl</b>方式来安装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https:<span class=\"comment\">//raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>完成后nvm就被安装在了<b>~/.nvm</b>下啦，接下来就需要配一下环境变量了，如果你也使用了<b>zsh</b>的话，就需要在<b>~/.zshrc</b>这个配置文件中配置，否则就找找看<b>~/.bash_profile</b>或者<b>~/.profile</b>吧。</p>\n<p>打开<b>~/.zshrc</b>，在最后一行加上：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NVM_DIR=\"$HOME/.nvm\"</div><div class=\"line\">[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; . \"$NVM_DIR/nvm.sh\" # This loads nvm</div></pre></td></tr></table></figure></p>\n<p>这一步的作用是每次新打开一个bash，nvm都会被自动添加到环境变量中了。<br>完成后输入<b>source ~/.zshrc</b>重新启动一下配置。<br>输入<b>nvm</b>可以看到如下信息：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm</div><div class=\"line\"></div><div class=\"line\">Node Version Manager</div><div class=\"line\"></div><div class=\"line\">Note: &lt;version&gt; refers to any version-like string nvm understands. This includes:</div><div class=\"line\">  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)</div><div class=\"line\">  - default (built-in) aliases: node, stable, unstable, iojs, system</div><div class=\"line\">  - custom aliases you define with `nvm alias foo`</div><div class=\"line\"></div><div class=\"line\">Usage:</div><div class=\"line\">  nvm help                                  Show this message</div><div class=\"line\">  nvm --version                             Print out the latest released version of nvm</div><div class=\"line\">  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available</div><div class=\"line\">    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</div><div class=\"line\">  nvm uninstall &lt;version&gt;                   Uninstall a version</div><div class=\"line\">  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</div><div class=\"line\">  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</div><div class=\"line\">  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</div><div class=\"line\">  nvm current                               Display currently activated version</div><div class=\"line\">  nvm ls                                    List installed versions</div><div class=\"line\">  nvm ls &lt;version&gt;                          List versions matching a given description</div><div class=\"line\">  nvm ls-remote                             List remote versions available for install</div><div class=\"line\">  nvm version &lt;version&gt;                     Resolve the given description to a single local version</div><div class=\"line\">  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version</div><div class=\"line\">  nvm deactivate                            Undo effects of `nvm` on current shell</div><div class=\"line\">  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;</div><div class=\"line\">  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;</div><div class=\"line\">  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;</div><div class=\"line\">  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version</div><div class=\"line\">  nvm unload                                Unload `nvm` from shell</div><div class=\"line\">  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available</div><div class=\"line\"></div><div class=\"line\">Example:</div><div class=\"line\">  nvm install v0.10.32                  Install a specific version number</div><div class=\"line\">  nvm use 0.10                          Use the latest available 0.10.x release</div><div class=\"line\">  nvm run 0.10.32 app.js                Run app.js using node v0.10.32</div><div class=\"line\">  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32</div><div class=\"line\">  nvm alias default 0.10.32             Set default node version on a shell</div><div class=\"line\"></div><div class=\"line\">Note:</div><div class=\"line\">  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)</div></pre></td></tr></table></figure></p>\n<p>至此，nvm的安装就算是告一段落了，下面我们就来看一下如何使用它来对node版本进行切换使用。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>其实，上述最后一步打印出的信息已经可以清楚看到nvm的全部命令。<br>各项命令的详细用法及含义可参考上文提到的<a href=\"https://github.com/creationix/nvm\" target=\"_blank\">nvm文档</a>。</p>\n<p>接下来就轮到安装我们的主角node大哥了。</p>\n<p>首先我们可以使用<b>nvm ls-remote</b>看一下node有哪些版本可以安装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm ls-remote</div><div class=\"line\">            v0<span class=\"number\">.1</span><span class=\"number\">.14</span></div><div class=\"line\">            v0<span class=\"number\">.1</span><span class=\"number\">.15</span></div><div class=\"line\">            v0<span class=\"number\">.1</span><span class=\"number\">.16</span></div><div class=\"line\">            ...</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note：由于在写文章的时候网络有问题，无法展示所有结果出来，上面代码示意一下，正确情况下会显示非常多版本出来，大家都知道node更新速度非常非常快。</p>\n</blockquote>\n<p>安装这个版本：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm install v4.1.0</div><div class=\"line\">######################################################################## 100.0%</div><div class=\"line\"></div><div class=\"line\">Now using node v4.1.0</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用nvm轻松切换node版本\"><a href=\"#使用nvm轻松切换node版本\" class=\"headerlink\" title=\"使用nvm轻松切换node版本\"></a>使用nvm轻松切换node版本</h3><p>按照上述安装方法的话，nvm会将各个版本的node安装在~/.nvm/versions/node目录下，我们可以打开这个目录看看有些什么东西：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  ls -a ~<span class=\"regexp\">/.nvm/</span>versions/node</div><div class=\"line\">.      ..     v4<span class=\"number\">.1</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure></p>\n<p>事实上v4.1.0这个目录分别存放node的binary档，nvm会在$PATH前面安插指定版本的目录，透过这种方式在使用node命令时就会用指定版本的node来运行了。</p>\n<p>可以确认实际的$PATH看看：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  echo $PATH</div><div class=\"line\">/Users<span class=\"comment\">/***/</span>.nvm/versions/node/v4<span class=\"number\">.1</span><span class=\"number\">.0</span>/bin:...</div></pre></td></tr></table></figure></p>\n<p>由于刚刚我们通过nvm安装node，会自动把最后安装的版本设为当前使用的版本，因此上述路径结尾会是…/v5.5.0/bin（还可通过nvm ls命令查看当前已安装的所有node版本）。</p>\n<p>接下来我们可以使用nvm use <version>切换版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm use v4.1.0</div><div class=\"line\">Now using node v4.1.0 (npm v2.14.3)</div><div class=\"line\">➜  ~  node -v</div><div class=\"line\">v4.1.0</div><div class=\"line\">➜  ~  nvm use v5.5.0</div><div class=\"line\">Now using node v5.5.0 (npm v3.3.12)</div><div class=\"line\">➜  ~  node -v</div><div class=\"line\">v5.5.0</div></pre></td></tr></table></figure></version></p>\n<p>轻轻松松完成切换！</p>\n<p>不过问题来了，这时如果你新打开一个bash，输入nvm current会发现显示为null，这是因为使用nvm use命令只会在当前bash里生效，重新打开一个bash你会发现$PATH的值已经不包含刚才的node目录了，要解决这个问题也很简单，使用nvm alias default <version>命令来指定一个默认的node版本就ok了，这里我使用了v4.1.0作为默认版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm alias default v4.1.0</div><div class=\"line\">default -&gt; v4.1.0</div></pre></td></tr></table></figure></version></p>\n<p>此时再打开一个bash输入nvm current就会显示为v4.1.0了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前主流的node版本管理工具有两种，nvm和n。<br>两者差异挺大的，具体分析可以参考一下淘宝FED团队的一篇文章：</p>\n<p><a href=\"http://taobaofed.org/blog/2015/11/17/nvm-or-n/\" target=\"_blank\">管理 node 版本，选择 nvm 还是 n？</a></p>\n<p>总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>使用<b>curl</b>方式来安装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https:<span class=\"comment\">//raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</span></div></pre></td></tr></table></figure></p>","more":"<p>完成后nvm就被安装在了<b>~/.nvm</b>下啦，接下来就需要配一下环境变量了，如果你也使用了<b>zsh</b>的话，就需要在<b>~/.zshrc</b>这个配置文件中配置，否则就找找看<b>~/.bash_profile</b>或者<b>~/.profile</b>吧。</p>\n<p>打开<b>~/.zshrc</b>，在最后一行加上：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export NVM_DIR=\"$HOME/.nvm\"</div><div class=\"line\">[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; . \"$NVM_DIR/nvm.sh\" # This loads nvm</div></pre></td></tr></table></figure></p>\n<p>这一步的作用是每次新打开一个bash，nvm都会被自动添加到环境变量中了。<br>完成后输入<b>source ~/.zshrc</b>重新启动一下配置。<br>输入<b>nvm</b>可以看到如下信息：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm</div><div class=\"line\"></div><div class=\"line\">Node Version Manager</div><div class=\"line\"></div><div class=\"line\">Note: &lt;version&gt; refers to any version-like string nvm understands. This includes:</div><div class=\"line\">  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)</div><div class=\"line\">  - default (built-in) aliases: node, stable, unstable, iojs, system</div><div class=\"line\">  - custom aliases you define with `nvm alias foo`</div><div class=\"line\"></div><div class=\"line\">Usage:</div><div class=\"line\">  nvm help                                  Show this message</div><div class=\"line\">  nvm --version                             Print out the latest released version of nvm</div><div class=\"line\">  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available</div><div class=\"line\">    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</div><div class=\"line\">  nvm uninstall &lt;version&gt;                   Uninstall a version</div><div class=\"line\">  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</div><div class=\"line\">  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</div><div class=\"line\">  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</div><div class=\"line\">  nvm current                               Display currently activated version</div><div class=\"line\">  nvm ls                                    List installed versions</div><div class=\"line\">  nvm ls &lt;version&gt;                          List versions matching a given description</div><div class=\"line\">  nvm ls-remote                             List remote versions available for install</div><div class=\"line\">  nvm version &lt;version&gt;                     Resolve the given description to a single local version</div><div class=\"line\">  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version</div><div class=\"line\">  nvm deactivate                            Undo effects of `nvm` on current shell</div><div class=\"line\">  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;</div><div class=\"line\">  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;</div><div class=\"line\">  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;</div><div class=\"line\">  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version</div><div class=\"line\">  nvm unload                                Unload `nvm` from shell</div><div class=\"line\">  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available</div><div class=\"line\"></div><div class=\"line\">Example:</div><div class=\"line\">  nvm install v0.10.32                  Install a specific version number</div><div class=\"line\">  nvm use 0.10                          Use the latest available 0.10.x release</div><div class=\"line\">  nvm run 0.10.32 app.js                Run app.js using node v0.10.32</div><div class=\"line\">  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32</div><div class=\"line\">  nvm alias default 0.10.32             Set default node version on a shell</div><div class=\"line\"></div><div class=\"line\">Note:</div><div class=\"line\">  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)</div></pre></td></tr></table></figure></p>\n<p>至此，nvm的安装就算是告一段落了，下面我们就来看一下如何使用它来对node版本进行切换使用。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>其实，上述最后一步打印出的信息已经可以清楚看到nvm的全部命令。<br>各项命令的详细用法及含义可参考上文提到的<a href=\"https://github.com/creationix/nvm\" target=\"_blank\">nvm文档</a>。</p>\n<p>接下来就轮到安装我们的主角node大哥了。</p>\n<p>首先我们可以使用<b>nvm ls-remote</b>看一下node有哪些版本可以安装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm ls-remote</div><div class=\"line\">            v0<span class=\"number\">.1</span><span class=\"number\">.14</span></div><div class=\"line\">            v0<span class=\"number\">.1</span><span class=\"number\">.15</span></div><div class=\"line\">            v0<span class=\"number\">.1</span><span class=\"number\">.16</span></div><div class=\"line\">            ...</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note：由于在写文章的时候网络有问题，无法展示所有结果出来，上面代码示意一下，正确情况下会显示非常多版本出来，大家都知道node更新速度非常非常快。</p>\n</blockquote>\n<p>安装这个版本：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm install v4.1.0</div><div class=\"line\">######################################################################## 100.0%</div><div class=\"line\"></div><div class=\"line\">Now using node v4.1.0</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用nvm轻松切换node版本\"><a href=\"#使用nvm轻松切换node版本\" class=\"headerlink\" title=\"使用nvm轻松切换node版本\"></a>使用nvm轻松切换node版本</h3><p>按照上述安装方法的话，nvm会将各个版本的node安装在~/.nvm/versions/node目录下，我们可以打开这个目录看看有些什么东西：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  ls -a ~<span class=\"regexp\">/.nvm/</span>versions/node</div><div class=\"line\">.      ..     v4<span class=\"number\">.1</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure></p>\n<p>事实上v4.1.0这个目录分别存放node的binary档，nvm会在$PATH前面安插指定版本的目录，透过这种方式在使用node命令时就会用指定版本的node来运行了。</p>\n<p>可以确认实际的$PATH看看：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  echo $PATH</div><div class=\"line\">/Users<span class=\"comment\">/***/</span>.nvm/versions/node/v4<span class=\"number\">.1</span><span class=\"number\">.0</span>/bin:...</div></pre></td></tr></table></figure></p>\n<p>由于刚刚我们通过nvm安装node，会自动把最后安装的版本设为当前使用的版本，因此上述路径结尾会是…/v5.5.0/bin（还可通过nvm ls命令查看当前已安装的所有node版本）。</p>\n<p>接下来我们可以使用nvm use <version>切换版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm use v4.1.0</div><div class=\"line\">Now using node v4.1.0 (npm v2.14.3)</div><div class=\"line\">➜  ~  node -v</div><div class=\"line\">v4.1.0</div><div class=\"line\">➜  ~  nvm use v5.5.0</div><div class=\"line\">Now using node v5.5.0 (npm v3.3.12)</div><div class=\"line\">➜  ~  node -v</div><div class=\"line\">v5.5.0</div></pre></td></tr></table></figure></version></p>\n<p>轻轻松松完成切换！</p>\n<p>不过问题来了，这时如果你新打开一个bash，输入nvm current会发现显示为null，这是因为使用nvm use命令只会在当前bash里生效，重新打开一个bash你会发现$PATH的值已经不包含刚才的node目录了，要解决这个问题也很简单，使用nvm alias default <version>命令来指定一个默认的node版本就ok了，这里我使用了v4.1.0作为默认版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~  nvm alias default v4.1.0</div><div class=\"line\">default -&gt; v4.1.0</div></pre></td></tr></table></figure></version></p>\n<p>此时再打开一个bash输入nvm current就会显示为v4.1.0了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9gp4inb00057wu5jfazlkur","category_id":"cj9gp4int00097wu54vgvzqfr","_id":"cj9gp4io5000h7wu527vbohpx"},{"post_id":"cj9gp4iny000b7wu5vdviruvt","category_id":"cj9gp4io2000e7wu5sahayzny","_id":"cj9gp4io7000k7wu5muek7wnz"}],"PostTag":[{"post_id":"cj9gp4inb00057wu5jfazlkur","tag_id":"cj9gp4inx000a7wu5omc3c1q6","_id":"cj9gp4io3000g7wu5ajbmc6pp"},{"post_id":"cj9gp4iny000b7wu5vdviruvt","tag_id":"cj9gp4io3000f7wu5b7ybcxtq","_id":"cj9gp4io6000j7wu580hxveyi"},{"post_id":"cj9gp4io1000d7wu5bmjq2grc","tag_id":"cj9gp4io5000i7wu527p3rpot","_id":"cj9gp4io8000m7wu5cha9jht7"},{"post_id":"cj9gp4io1000d7wu5bmjq2grc","tag_id":"cj9gp4io7000l7wu5l9i7k18k","_id":"cj9gp4io9000n7wu5d65tbfdo"}],"Tag":[{"name":"javaScript","_id":"cj9gp4inx000a7wu5omc3c1q6"},{"name":"sublime","_id":"cj9gp4io3000f7wu5b7ybcxtq"},{"name":"node","_id":"cj9gp4io5000i7wu527p3rpot"},{"name":"nvm","_id":"cj9gp4io7000l7wu5l9i7k18k"}]}}