<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mac 查看、修改文件权限的命令]]></title>
    <url>%2Fmac-%E6%9F%A5%E7%9C%8B%E3%80%81%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%9A%84%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[查看文件/文件夹权限： 查看某个文件权限的命令 1ls -l + 要查看文件的文件名 查看某个文件夹里所有文件/文件夹的权限 1ls -l + 文件夹名 如果要查看某个文件夹的权限，需要在该文件夹外部目录下执行 1ls -l 修改文件的权限修改权限的命令格式 : chmod [&lt;权限范围&gt;&lt;权限操作&gt;&lt;具体权限&gt;] [文件或目录…] &lt;权限范围&gt; u：User，即文件或目录的拥有者。 g：Group，即文件或目录的所属群组。 o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。 a：All，即全部的用户，包含拥有者，所属群组以及其他用户。 &lt;权限操作&gt; “+”：表示增加权限 “-“ ：表示取消权限 “=”：表示唯一设定权限 &lt;具体权限&gt; r：表示可读取 w：表示可写入 x ：表示可执行 让其他用户都可以对111.txt文件有写的权限，则执行1chmod o+w 111.txt 修改文件/文件夹用户组在 shell 中，可以使用chown命令来改变文件所有者。chown命令是change owner（改变拥有者）的缩写。需要要注意的是，用户必须是已经存在系统中的，也就是只能改变为在 /etc/passwd这个文件中有记录的用户名称才可以。 chown命令的用途很多，还可以顺便直接修改用户组的名称。此外，如果要连目录下的所有子目录或文件同时更改文件拥有者的话，直接加上 -R的参数即可。 基本语法：12chown [-R] 账号名称 文件或目录chown [-R] 账号名称:用户组名称 文件或目录 参数： -R : 进行递归( recursive )的持续更改，即连同子目录下的所有文件、目录都更新成为这个用户组。常常用在更改某一目录的情况。 示例：123sudo chown -R user:staff test/ //循环修改子集orsudo chown user:staff test/]]></content>
  </entry>
  <entry>
    <title><![CDATA[node版本管理工具nvm-Mac下安装及使用]]></title>
    <url>%2F%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%A5%BD10%E4%B8%87%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言目前主流的node版本管理工具有两种，nvm和n。两者差异挺大的，具体分析可以参考一下淘宝FED团队的一篇文章： 管理 node 版本，选择 nvm 还是 n？ 总的来说，nvm有点类似于 Python 的 virtualenv 或者 Ruby 的 rvm，每个node版本的模块都会被安装在各自版本的沙箱里面（因此切换版本后模块需重新安装），因此考虑到需要时常对node版本进行切换测试兼容性和一些模块对node版本的限制，我选择了使用nvm作为管理工具，下面就来说说nvm的安装和使用过程。 安装使用curl方式来安装：1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash 完成后nvm就被安装在了~/.nvm下啦，接下来就需要配一下环境变量了，如果你也使用了zsh的话，就需要在~/.zshrc这个配置文件中配置，否则就找找看~/.bash_profile或者~/.profile吧。 打开~/.zshrc，在最后一行加上：12export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvm 这一步的作用是每次新打开一个bash，nvm都会被自动添加到环境变量中了。完成后输入source ~/.zshrc重新启动一下配置。输入nvm可以看到如下信息：1234567891011121314151617181920212223242526272829303132333435363738394041➜ ~ nvmNode Version ManagerNote: &lt;version&gt; refers to any version-like string nvm understands. This includes: - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1) - default (built-in) aliases: node, stable, unstable, iojs, system - custom aliases you define with `nvm alias foo`Usage: nvm help Show this message nvm --version Print out the latest released version of nvm nvm install [-s] &lt;version&gt; Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available --reinstall-packages-from=&lt;version&gt; When installing, reinstall packages installed in &lt;node|iojs|node version number&gt; nvm uninstall &lt;version&gt; Uninstall a version nvm use [--silent] &lt;version&gt; Modify PATH to use &lt;version&gt;. Uses .nvmrc if available nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available nvm run [--silent] &lt;version&gt; [&lt;args&gt;] Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available nvm current Display currently activated version nvm ls List installed versions nvm ls &lt;version&gt; List versions matching a given description nvm ls-remote List remote versions available for install nvm version &lt;version&gt; Resolve the given description to a single local version nvm version-remote &lt;version&gt; Resolve the given description to a single remote version nvm deactivate Undo effects of `nvm` on current shell nvm alias [&lt;pattern&gt;] Show all aliases beginning with &lt;pattern&gt; nvm alias &lt;name&gt; &lt;version&gt; Set an alias named &lt;name&gt; pointing to &lt;version&gt; nvm unalias &lt;name&gt; Deletes the alias named &lt;name&gt; nvm reinstall-packages &lt;version&gt; Reinstall global `npm` packages contained in &lt;version&gt; to current version nvm unload Unload `nvm` from shell nvm which [&lt;version&gt;] Display path to installed node version. Uses .nvmrc if availableExample: nvm install v0.10.32 Install a specific version number nvm use 0.10 Use the latest available 0.10.x release nvm run 0.10.32 app.js Run app.js using node v0.10.32 nvm exec 0.10.32 node app.js Run `node app.js` with the PATH pointing to node v0.10.32 nvm alias default 0.10.32 Set default node version on a shellNote: to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`) 至此，nvm的安装就算是告一段落了，下面我们就来看一下如何使用它来对node版本进行切换使用。 使用其实，上述最后一步打印出的信息已经可以清楚看到nvm的全部命令。各项命令的详细用法及含义可参考上文提到的nvm文档。 接下来就轮到安装我们的主角node大哥了。 首先我们可以使用nvm ls-remote看一下node有哪些版本可以安装：12345➜ ~ nvm ls-remote v0.1.14 v0.1.15 v0.1.16 ... Note：由于在写文章的时候网络有问题，无法展示所有结果出来，上面代码示意一下，正确情况下会显示非常多版本出来，大家都知道node更新速度非常非常快。 安装这个版本：1234$ nvm install v4.1.0######################################################################## 100.0%Now using node v4.1.0 使用nvm轻松切换node版本按照上述安装方法的话，nvm会将各个版本的node安装在~/.nvm/versions/node目录下，我们可以打开这个目录看看有些什么东西：12➜ ~ ls -a ~/.nvm/versions/node. .. v4.1.0 事实上v4.1.0这个目录分别存放node的binary档，nvm会在$PATH前面安插指定版本的目录，透过这种方式在使用node命令时就会用指定版本的node来运行了。 可以确认实际的$PATH看看：12➜ ~ echo $PATH/Users/***/.nvm/versions/node/v4.1.0/bin:... 由于刚刚我们通过nvm安装node，会自动把最后安装的版本设为当前使用的版本，因此上述路径结尾会是…/v5.5.0/bin（还可通过nvm ls命令查看当前已安装的所有node版本）。 接下来我们可以使用nvm use 切换版本：12345678➜ ~ nvm use v4.1.0Now using node v4.1.0 (npm v2.14.3)➜ ~ node -vv4.1.0➜ ~ nvm use v5.5.0Now using node v5.5.0 (npm v3.3.12)➜ ~ node -vv5.5.0 轻轻松松完成切换！ 不过问题来了，这时如果你新打开一个bash，输入nvm current会发现显示为null，这是因为使用nvm use命令只会在当前bash里生效，重新打开一个bash你会发现$PATH的值已经不包含刚才的node目录了，要解决这个问题也很简单，使用nvm alias default 命令来指定一个默认的node版本就ok了，这里我使用了v4.1.0作为默认版本：12➜ ~ nvm alias default v4.1.0default -&gt; v4.1.0 此时再打开一个bash输入nvm current就会显示为v4.1.0了。]]></content>
      <tags>
        <tag>node</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用markdown自动生成Restfull风格的文档]]></title>
    <url>%2F%E4%BD%BF%E7%94%A8markdown%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90Restfull%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[mkdocs环境搭建pip是Python的包管理器，类似于nodejs中的npm、ruby的gem。安装都比较简单，windows下需要配置环境变量。mac 已经自带python，但是ipython要自己安装。 1.安装 pip123sudo easy_install pip// 如果执行报错，可以执行： sudo easy_install -U pip 2.使用pip安装mkdocs1234pip install mkdocspip install mkdocs-material// mkdocs-material 是一款主题 3 启动1mkdocs serve mkdocs内置server会将markdown编译成html并部署到8000端口，直接 http://localhost:8000 访问就可以了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES6新特性列表]]></title>
    <url>%2FES6%2F</url>
    <content type="text"><![CDATA[相比ES5，ES6提供了太多的更新，简单说来，主要为以下方面（大家可以依据自己不算清晰的点选择性查看本文）： Arrows,箭头函数， Classes，类 Enhanced object literals，增强的对象字面值 Template strings：模板字符串 Destructuring：解构 Default + rest + spread：参数默认值，rest参数,扩展运算符 Let + const:命名声明的新方式 Iterators + for..of：遍历器 Generators：生成器 Unicode：更广泛的编码支持 Modules：语言层面上支持的模块机制 Module loaders：模块加载器 Map + set + weakmap + weakset：新的数据结构 Proxies：代理器 Symbols：新的基本类型，独一无二的值 Subclassable built-ins：类的继承 Promises： Math + number + string + array + object apis：拓展了一些内置对象的方法 Binary and octal literals：二进制八进制字面量 Reflect api：操作对象的新api Tail calls:尾调用Arrows箭头函数箭头函数使用类似于=&gt;这样的语法定义函数，支持表达式模式和语句模式，不过其最大特点在于和父作用域具有一样的this。我们知道普通函数的this 既不指向函数自身也不指向函数的词法作用域，this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。使用箭头函数时再也不用担心this跳来跳去了。此外如果箭头函数如果定义在另一个函数里面，箭头函数会共享它父函数的arguments变量。1234567891011121314151617181920212223242526272829303132333435// 表达式模式箭头函数var odds = evens.map(v =&gt; v + 1);var nums = evens.map((v, i) =&gt; v + i);var pairs = evens.map(v =&gt; (&#123;even: v, odd: v + 1&#125;));// 语句模式箭头函数nums.forEach(v =&gt; &#123; if (v % 5 === 0) fives.push(v);&#125;);// 和父作用域具有相同的thisvar bob = &#123; _name: "Bob", _friends: [], printFriends() &#123; this._friends.forEach(f =&gt; console.log(this._name + " knows " + f)); &#125;&#125;function square() &#123; let example = () =&gt; &#123; let numbers = []; for (let number of arguments) &#123; numbers.push(number * number); &#125; return numbers; &#125;; return example();&#125;square(2, 4, 7.5, 8, 11.5, 21); // returns: [4, 16, 56.25, 64, 132.25, 441] ClassesJavaScript中其实并不存在真正的类，ES6的类其实是基于原型链模拟面向对象的一种语法糖。其本质上可以看做是构造函数的另一种写法。与真的类一样，它支持super继承，实例，静态方法和constructor方法。如果你也使用React，工作中定义模块时一定没少写过class A extends React.Component{}吧。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 定义类class Point &#123; constructor(x, y) &#123; this.x = x; this.y = y; &#125; toString() &#123; return '(' + this.x + ', ' + this.y + ')'; &#125;&#125;// 通过extends关键字实现继承class SkinnedMesh extends THREE.Mesh &#123; //constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。 //一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。 constructor(geometry, materials) &#123; // super表示父类的构造函数，用来新建父类的this对象, // 子类必须在constructor方法中调用super方法，否则新建实例时会报错。如果不调用super方法，子类就得不到this对象。 super(geometry, materials); //在构造方法中绑定this,可以防止实例找不到this this.idMatrix = SkinnedMesh.defaultMatrix(); this.bones = []; this.boneMatrices = []; //... &#125; // 非定义在this上的方法都会被直接定义在原型链上 update(camera) &#123; //... // super在此处作为对象，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。 super.update(); &#125; // 可以使用get和set关键字，对某个属性设置存值函数和取值函数 get boneCount() &#123; // 类的方法内部如果含有this，它默认指向类的实例 return this.bones.length; &#125; set matrixType(matrixType) &#123; this.idMatrix = SkinnedMesh[matrixType](); &#125; // 加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用 static defaultMatrix() &#123; return new THREE.Matrix4(); &#125;&#125;// 类的所有实例共享一个原型对象let skin = new SkinnedMesh();// 静态方法需要直接通过类调用SkinnedMesh.defaultMatrix() 对象的拓展ES6中对象的使用方法得以拓展，主要包括以下几点： 属性和方法可以简洁表示； 允许以表达式的模式定义属性名； 可以通过proto读取或设置当前对象的prototype对象; 使用Object.is({},{})判断两个对象是否完全相对，类似于===; Object.assign(target, source1, source2)合并对象；（浅拷贝）12345678910111213var obj = &#123; // __proto__用以设置当前对象的prototype对象，不推荐使用，推荐使用Object.setPrototypeOf() __proto__: theProtoObj, //‘handler:handler’可简写为handler（只需要写变量名就可以实现变量名为变量名，变量值为属性值） handler, // 简写在定义方法的时候同样有效 toString() &#123; // Super calls return "d " + super.toString(); &#125;, // 方括号内的表达式用以计算属性名 [ 'prop_' + (() =&gt; 42)() ]: 42&#125;; 模板字符串模板字符串是一种组合字符串的语法糖，其使用类似于Perl,Python等语言的字符串修改方法类似，它的出现让我们拼合字符串时方便多了。目前相互中几乎所有字符串的拼接都用这个了，异常方便。 模板字符串定义在两个反撇号中；在模板字符串中可以直接换行，格式会得以保留；通过${}可以很方便的在模板字符串中添加变量；1234567891011121314151617// 把字符串放在``(注意不是引号)中就可以使用`In JavaScript '\n' is a line-feed.`// 模板字符串保留了换行`In JavaScript this is not legal.`// 在字符串中添加变量的方法，变量直接放在$&#123;&#125;中即可var name = "Bob", time = "today";`Hello $&#123;name&#125;, how are you $&#123;time&#125;?`// 拼合请求时异常方便了POST`http://foo.org/bar?a=$&#123;a&#125;&amp;b=$&#123;b&#125; Content-Type: application/json X-Credentials: $&#123;credentials&#125; &#123; "foo": $&#123;foo&#125;, "bar": $&#123;bar&#125;&#125;`(myOnReadyStateChangeHandler); Destructuring 解构解构使用模式匹配的方法绑定变量和值，数组和对象都可使用。解构在绑定失败的时会实现软绑定，即没有匹配值时，返回undefined。使用方法可见示例：1234567891011121314151617181920212223242526// 数组解构var [a, , b] = [1,2,3];// a = 1,b = 3// React中常见以下用法var &#123;a, b, c&#125; = this.props;// 对象解构也能用在函数的参数中function g(&#123;name: x&#125;) &#123; console.log(x);&#125;g(&#123;name: 5&#125;)// 绑定失败时返回undefinedvar [a] = [];a === undefined;// 解构时也可以绑定默认值var [a = 1] = [];a === 1;// 配合默认参数使用结构function r(&#123;x, y, w = 10, h = 10&#125;) &#123; return x + y + w + h;&#125;r(&#123;x:1, y:2&#125;) === 23 默认值，剩余值和拓展值ES6允许我们在给变量添加默认值使用拓展值使得函数调用时可传入数组作为连续的参数利用剩余值特性我们可以把函数尾部的参数转换为一个数组，现在使用rest就可以替换以前的arguments对象了。123456789101112131415161718192021// 给函数的参数添加默认值function f(x, y=12) &#123; // y is 12 if not passed (or passed as undefined) return x + y;&#125;// 可以只传参数x的值了f(3) == 15// 使用restfunction f(x, ...y) &#123; // y is an Array return x * y.length;&#125;f(3, "hello", true) == 6// 传入数组作为参数function f(x, y, z) &#123; return x + y + z;&#125;// 直接传入数组当作上面函数的参数f(...[1,2,3]) == 6 Let 和 ConstES6新增了块作用域，新增了两种定义变量的方法，定义变量时推荐使用let替代var，let定义的变量在块作用域内有效，const用以指定固定值，这两类新定义的变量不允许在定义前使用，也不允许重复定义。1234567891011121314151617181920212223242526function f() &#123; &#123; let x; &#123; const x = "sneaky"; // 改变const x = "foo"; &#125; // 重复定义会出错 let x = "inner"; &#125;&#125;// 在这里想到一个使用var时新手特别容易犯的问题for (var i=0; i&lt;10; ++i) &#123; setTimeout(function()&#123; console.log(i); &#125;, i*1000);&#125;// 使用var 所有的结果都是10// 使用let 结果就是预想要的结果for (let i=0; i&lt;10; ++i) &#123; setTimeout(function()&#123; console.log(i); &#125;, i*1000);&#125; Iterators + For..OfES6为部署了Iterator接口的各种不同的数据结构提供了统一的访问机制。其本质是一个指针对象。每次调用next方法，可以把指针指向数据结构的下一个成员。具体说来，每一次调用next方法，都会返回数据结构的当前成员的信息（一个包含value和done两个属性的对象，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束）。 凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。1234567891011121314151617181920let fibonacci = &#123; // 一个数据结构只要具有Symbol.iterator属性，就可被认为是可遍历的，`Symbol.iterator`是一个表达式，返回Symbol对象的iterator属性，所以需要放在[]中，本质上它是当前数据结构的遍历器生成函数。 [Symbol.iterator]() &#123; let pre = 0, cur = 1; return &#123; next() &#123; [pre, cur] = [cur, pre + cur]; return &#123; done: false, value: cur &#125; &#125; &#125; &#125;&#125;// fibonacci部署了Symbol.iterator属性，只要done不为true就会一直遍历for (var n of fibonacci) &#123;// 调用1000以内的值做遍历 if (n &gt; 1000) break; console.log(n);&#125; 原生具备Iterator接口的数据结构有以下几种:数组、某些类似数组的对象（字符串、DOM NodeList 对象、arguments对象）、Set和Map结构。对象（Object）之所以没有默认部署Iterator接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。 实际使用时需引入polyfill Generators可以从两个角度理解Generators，它既是状态机也是一个遍历器对象生成函数。执行该函数可以理解为启动了遍历器，之后每次执行next()函数则每次执行到yield处。 值得注意的是执行next()时可添加参数，这实现了在函数运行的不同阶段，可以从外部向内部注入不同的值， 生成器使用function和yield简化了迭代过程，使用function定义的函数返回了一个生成器实例。生成器是迭代器的子类，但是包含next和throw。这使得值可以回流到生成器，yield是一个可以返回值的表达式。 for…of循环可以自动遍历 Generator 函数时生成的Iterator对象，此时不再需要调用next方法。 Generator的return方法会返回固定的值，终结遍历Generator函数。返回值的value属性就是return方法的参数，返回值的done属性为true。 结合co模块可以实现比Promise更加优雅的异步调用方式12345678910111213141516171819202122232425262728// 使用generator函数实现上述遍历器对象var fibonacci = &#123; [Symbol.iterator]: function*() &#123; var pre = 0, cur = 1; for (;;) &#123; var temp = pre; pre = cur; cur += temp; yield cur; &#125; &#125;&#125;for (var n of fibonacci) &#123; // truncate the sequence at 1000 if (n &gt; 1000) break; console.log(n);&#125;// 使用co模块（基于 Promise 对象的自动执行器），可以实现异步函数的自动执行var gen = function* () &#123; var f1 = yield somethingAsync(); var f2 = yield anotherThingAsync();&#125;;var co = require('co');co(gen); 实际使用时需引入polyfill UnicodeES6完整支持所有的Unicode,包括新的Unicode字面量和u模式正则，提供了新的API来处理21bit级别的字符串。这些新加特性使得我们的JavaScript应用有能力支持各种语言。1234567891011121314151617// same as ES5.1"𠮷".length == 2// 新的正则匹配模式"𠮷".match(/./u)[0].length == 2// 新形式"\u&#123;20BB7&#125;"=="𠮷"=="\uD842\uDFB7"// codePointAt()能够正确处理4个字节储存的字符，返回一个字符的码点"𠮷".codePointAt(0) == 0x20BB7// for-of 遍历字符，以整体输出for(var c of "𠮷") &#123; console.log(c);&#125;// 𠮷 我们也可以在JS中写出Emoji了，很有趣，对不对： Modules现代JS应用的开发离不开模块了，ES6对模块的定义提供了语言层面的支持。规范化了各种JavaScript模块加载器，支持运行时动态加载模块，支持异步加载模块。 ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量，效率要比 CommonJS 模块的加载方式高。12345678910111213141516171819202122232425// lib/math.js 模块的定义export function sum(x, y) &#123; return x + y;&#125;export var pi = 3.141593;// app.js 模块的全部引用import * as math from "lib/math";alert("2π = " + math.sum(math.pi, math.pi));// otherApp.js 模块的部分引用import &#123;sum, pi&#125; from "lib/math";alert("2π = " + sum(pi, pi));// 模块导出方法// lib/mathplusplus.jsexport * from "lib/math";export var e = 2.71828182846;export default function(x) &#123; return Math.log(x);&#125;// 混合引入方法import ln, &#123;pi, e&#125; from "lib/mathplusplus";alert("2π = " + ln(e)*pi*2); Module Loaders（其实并非ES6标准的一部分，只是草案）模块加载器支持以下功能： 动态加载状态隔离全局命名空间隔离编写钩子嵌套默认的模块加载器可以被配置，新的加载器可以被配置来评估加载独立上下文中的内容。1234567891011121314151617181920212223242526272829303132333435363738// 动态加载 – ‘System’ 是默认的加载器System.import('lib/math').then(function(m) &#123; alert("2π = " + m.sum(m.pi, m.pi));&#125;);// 新的加载器创建了执行沙盒var loader = new Loader(&#123; global: fixup(window) // replace ‘console.log’&#125;);loader.eval("console.log('hello world!');");// 可以直接修改模块的缓存System.get('jquery');System.set('jquery', Module(&#123;$: $&#125;)); // WARNING: not yet finalizedMap Set WeakMap WeakSetES6为算法提供了新的高效的数据结构，WeakMaps提供了防泄漏的键值对表。// Set类似于数组，但是成员的值都是唯一的，没有重复的值。var s = new Set();s.add("hello").add("goodbye").add("hello");s.size === 2;s.has("hello") === true;// Map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。var m = new Map();m.set("hello", 42);m.set(s, 34);m.get(s) == 34;// WeakMap结构与Map结构类似，也是用于生成键值对的集合，但是WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名，此外WeakMap的键名所指向的对象，不计入垃圾回收机制。var wm = new WeakMap();wm.set(s, &#123; extra: 42 &#125;);wm.size === undefined// WeakSet 结构与 Set 类似，也是不重复的值的集合,但是WeakSet 的成员只能是对象，而不能是其他类型的值，此外WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用var ws = new WeakSet();ws.add(&#123; data: 42 &#125;);// Because the added object has no other references, it will not be held in the set 实际使用时需引入polyfill ProxiesProxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。 需要注意的是目前未被Babel支持，使用时需谨慎1234567891011121314151617181920212223242526272829303132333435363738394041424344// target参数表示所要拦截的目标对象;var target = &#123;&#125;;// handler参数也是一个对象，用来定制拦截行为;var handler = &#123; get: function (receiver, name) &#123; return `Hello, $&#123;name&#125;!`; &#125;&#125;;// 生成一个Proxy实例var p = new Proxy(target, handler);p.world === 'Hello, world!';// 对函数同样可以使用代理var target = function () &#123; return 'I am the target'; &#125;;var handler = &#123; apply: function (receiver, ...args) &#123; return 'I am the proxy'; &#125;&#125;;var p = new Proxy(target, handler);p() === 'I am the proxy';// Proxy支持的拦截操作如下var handler =&#123; get:..., set:..., has:..., deleteProperty:..., apply:..., construct:..., getOwnPropertyDescriptor:..., defineProperty:..., getPrototypeOf:..., setPrototypeOf:..., enumerate:..., ownKeys:..., preventExtensions:..., isExtensible:...&#125; Babel 不支持，使用时应注意 SymbolsSymbol保证每个属性的名字都是独一无二的，这样就从根本上防止了属性名的冲突；它是一种类似于字符串的数据类型,Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述；Symbols是唯一的，单并非私有的，通过Object.getOwnPropertySymbols可以获取对应的值；Symbol 值作为对象属性名时，不能用点运算符。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758var MyClass = (function() &#123; // module scoped symbol var key = Symbol("key"); function MyClass(privateData) &#123; this[key] = privateData; &#125; MyClass.prototype = &#123; doStuff: function() &#123; ... this[key] ... &#125; &#125;; return MyClass;&#125;)();var c = new MyClass("hello")c["key"] === undefined由于语言限制，Babel只提供部分支持，使用时需要注意内置类的继承在ES6中，内置的Array,Date,DOM Element可以被继承以拓展了。// User code of Array subclassclass MyArray extends Array &#123; constructor(...args) &#123; super(...args); &#125;&#125;var arr = new MyArray();arr[1] = 12;arr.length == 2babel 部分支持，由于ES5引擎的限制Date,Array,Error不被支持，但是HTMLElement是被支持的Math + Number + String + Array + Object APIsES6 为很多旧有对象添加了新的API，这些对象包括Math,Array器，String,Object，如下：Number.EPSILONNumber.isInteger(Infinity) // falseNumber.isNaN("NaN") // falseMath.acosh(3) // 1.762747174039086Math.hypot(3, 4) // 5Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2"abcde".includes("cd") // true"abc".repeat(3) // "abcabcabc"Array.from(document.querySelectorAll('*')) // Returns a real ArrayArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior[0, 0, 0].fill(7, 1) // [0,7,7][1, 2, 3].find(x =&gt; x == 3) // 3[1, 2, 3].findIndex(x =&gt; x == 2) // 1[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]["a", "b", "c"].entries() // iterator [0, "a"], [1,"b"], [2,"c"]["a", "b", "c"].keys() // iterator 0, 1, 2["a", "b", "c"].values() // iterator "a", "b", "c"Object.assign(Point, &#123; origin: new Point(0,0) &#125;) babel 通过 polyfill 提供部分支持二进制和八进制字面量ES6添加了二进制和八进制数值的字面量定义方法：120b111110111 === 503 // true0o767 === 503 // true babel 只支持字面量形式，不支持 Number(“0o767”)形式PromisePromise为异步编程提供了一种新的方式，Promise把未来将用到的值当做一等对象，Promise在很多前端库中已经有所支持了。这个平时用得最多了，还没使用的推荐试试。12345678910111213function timeout(duration = 0) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(resolve, duration); &#125;)&#125;var p = timeout(1000).then(() =&gt; &#123; return timeout(2000);&#125;).then(() =&gt; &#123; throw new Error("hmm");&#125;).catch(err =&gt; &#123; return Promise.all([timeout(100), timeout(200)]);&#125;) 实际使用时需引入polyfill Reflect APIReflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API，作用如下： 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上；修改某些Object方法的返回结果，让其变得更合理；让Object操作都变成函数行为，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法；1234567891011var O = &#123;a: 1&#125;;Object.defineProperty(O, 'b', &#123;value: 2&#125;);O[Symbol('c')] = 3;Reflect.ownKeys(O); // ['a', 'b', Symbol(c)]function C(a, b)&#123; this.c = a + b;&#125;var instance = Reflect.construct(C, [20, 22]);instance.c; // 42 实际使用时需引入polyfill Tail Calls尾部调用被保证不能无限拓展栈，这让有无限制输入时的递归算法更加安全。12345678function factorial(n, acc = 1) &#123; 'use strict'; if (n &lt;= 1) return acc; return factorial(n - 1, n * acc);&#125;// 堆栈越来越常用，在ES6中其使用更加安全了factorial(100000) 说明上文对ES6的新特性都做了简单的描述，但是关于Reflect API和Proxies,由于本人对他们的理解还不够透彻，说得可能有些不清不楚。希望阅读本文让你有收获，有任何疑问，大家也可以一起讨论。]]></content>
  </entry>
  <entry>
    <title><![CDATA[删除已安装插件]]></title>
    <url>%2Ftest%2F</url>
    <content type="text"><![CDATA[ctr+shift+p 调出插件窗口 然后输入remove, 选择remove Package 再输入要删除的插件名称，或者在下拉列表中选择要删除的插件名称]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19 个 JavaScript 常用的简写技术]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[1.三元操作符当想写if…else语句时，使用三元操作符来代替。1234567const x = 20;let answer;if (x &gt; 10) &#123; answer = 'is greater';&#125; else &#123; answer = 'is lesser';&#125; 简写1const answer = x &gt; 10 ? 'is greater' : 'is lesser'; 也可以嵌套if语句：1const big = x &gt; 10 ? " greater 10" : x 2.短路求值简写方式当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。123if (variable1 !== null || variable1 !== undefined || variable1 !== '') &#123; let variable2 = variable1;&#125; 或者可以使用短路求值方法：1const variable2 = variable1 || 'new'; 3.声明变量简写方法123let x;let y;let z = 3; 简写方法： 1let x, y, z=3; 4.if存在条件简写方法1if (likeJavaScript === true) 简写： 1if (likeJavaScript) 只有likeJavaScript是真值时，二者语句才相等如果判断值不是真值，则可以这样： 1234let a;if ( a !== true ) &#123;// do something...&#125; 简写： 1234let a;if ( !a ) &#123;// do something...&#125; 5.JavaScript循环简写方法1for (let i = 0; i &lt; allImgs.length; i++) 简写： 1for (let index in allImgs) 也可以使用Array.forEach： 12345678function logArrayElements(element, index, array) &#123; console.log("a[" + index + "] = " + element);&#125;[2, 5, 9].forEach(logArrayElements);// logs:// a[0] = 2// a[1] = 5// a[2] = 9 6.短路评价给一个变量分配的值是通过判断其值是否为null或undefined，则可以： 123456let dbHost;if (process.env.DB_HOST) &#123; dbHost = process.env.DB_HOST;&#125; else &#123; dbHost = 'localhost';&#125; 简写： 1const dbHost = process.env.DB_HOST || 'localhost'; 7.十进制指数当需要写数字带有很多零时（如10000000），可以采用指数（1e7）来代替这个数字： 1for (let i = 0; i &lt; 10000; i++) &#123;&#125; 简写： 123456789for (let i = 0; i &lt; 1e7; i++) &#123;&#125;// 下面都是返回true1e0 === 1;1e1 === 10;1e2 === 100;1e3 === 1000;1e4 === 10000;1e5 === 100000; 8.对象属性简写如果属性名与key名相同，则可以采用ES6的方法： 1const obj = &#123; x:x, y:y &#125;; 简写： 1const obj = &#123; x, y &#125;; 9.箭头函数简写传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。 1234567891011function sayHello(name) &#123; console.log('Hello', name);&#125;setTimeout(function() &#123; console.log('Loaded')&#125;, 2000);list.forEach(function(item) &#123; console.log(item);&#125;); 简写： 12345sayHello = name =&gt; console.log('Hello', name);setTimeout(() =&gt; console.log('Loaded'), 2000);list.forEach(item =&gt; console.log(item)); 10.隐式返回值简写经常使用return语句来返回函数最终结果，一个单独语句的箭头函数能隐式返回其值（函数必须省略{}为了省略return关键字） 为返回多行语句（例如对象字面表达式），则需要使用()包围函数体。 1234567function calcCircumference(diameter) &#123; return Math.PI * diameter&#125;var func = function func() &#123; return &#123; foo: 1 &#125;;&#125;; 简写： 12345calcCircumference = diameter =&gt; ( Math.PI * diameter;)var func = () =&gt; (&#123; foo: 1 &#125;); 11.默认参数值为了给函数中参数传递默认值，通常使用if语句来编写，但是使用ES6定义默认值，则会很简洁： 1234567function volume(l, w, h) &#123; if (w === undefined) w = 3; if (h === undefined) h = 4; return l * w * h;&#125; 简写： 123volume = (l, w = 3, h = 4 ) =&gt; (l * w * h);volume(2) //output: 24 12.模板字符串传统的JavaScript语言，输出模板通常是这样写的。 123const welcome = 'You have logged in as ' + first + ' ' + last + '.'const db = 'http://' + host + ':' + port + '/' + database; ES6可以使用反引号和${}简写： 123const welcome = `You have logged in as $&#123;first&#125; $&#123;last&#125;`;const db = `http://$&#123;host&#125;:$&#123;port&#125;/$&#123;database&#125;`; 13.解构赋值简写方法在web框架中，经常需要从组件和API之间来回传递数组或对象字面形式的数据，然后需要解构它 123456789const observable = require('mobx/observable');const action = require('mobx/action');const runInAction = require('mobx/runInAction');const store = this.props.store;const form = this.props.form;const loading = this.props.loading;const errors = this.props.errors;const entity = this.props.entity; 简写： 123import &#123; observable, action, runInAction &#125; from 'mobx';const &#123; store, form, loading, errors, entity &#125; = this.props; 也可以分配变量名： 12const &#123; store, form, loading, errors, entity:contact &#125; = this.props;//最后一个变量名为contact 14.多行字符串简写需要输出多行字符串，需要使用+来拼接： 123456const lorem = 'Lorem ipsum dolor sit amet, consectetur\n\t' + 'adipisicing elit, sed do eiusmod tempor incididunt\n\t' + 'ut labore et dolore magna aliqua. Ut enim ad minim\n\t' + 'veniam, quis nostrud exercitation ullamco laboris\n\t' + 'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t' + 'irure dolor in reprehenderit in voluptate velit esse.\n\t' 使用反引号，则可以达到简写作用： 123456const lorem = `Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse.` 15.扩展运算符简写扩展运算符有几种用例让JavaScript代码更加有效使用，可以用来代替某个数组函数。 1234567// joining arraysconst odd = [1, 3, 5];const nums = [2 ,4 , 6].concat(odd);// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = arr.slice() 简写： 12345678// joining arraysconst odd = [1, 3, 5 ];const nums = [2 ,4 , 6, ...odd];console.log(nums); // [ 2, 4, 6, 1, 3, 5 ]// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = [...arr]; 不像concat()函数，可以使用扩展运算符来在一个数组中任意处插入另一个数组。 12const odd = [1, 3, 5 ];const nums = [2, ...odd, 4 , 6]; 也可以使用扩展运算符解构： 1234const &#123; a, b, ...z &#125; = &#123; a: 1, b: 2, c: 3, d: 4 &#125;;console.log(a) // 1console.log(b) // 2console.log(z) // &#123; c: 3, d: 4 &#125; 16.强制参数简写JavaScript中如果没有向函数参数传递值，则参数为undefined。为了增强参数赋值，可以使用if语句来抛出异常，或使用强制参数简写方法。 123456function foo(bar) &#123; if(bar === undefined) &#123; throw new Error('Missing parameter!'); &#125; return bar;&#125; 简写： 1234567mandatory = () =&gt; &#123; throw new Error('Missing parameter!');&#125;foo = (bar = mandatory()) =&gt; &#123; return bar;&#125; 17.Array.find简写想从数组中查找某个值，则需要循环。在ES6中，find()函数能实现同样效果。 12345678910111213const pets = [ &#123; type: 'Dog', name: 'Max'&#125;, &#123; type: 'Cat', name: 'Karl'&#125;, &#123; type: 'Dog', name: 'Tommy'&#125;,]function findDog(name) &#123; for(let i = 0; i&lt;pets.length; ++i) &#123; if(pets[i].type === 'Dog' &amp;&amp; pets[i].name === name) &#123; return pets[i]; &#125; &#125;&#125; 简写： 12pet = pets.find(pet =&gt; pet.type ==='Dog' &amp;&amp; pet.name === 'Tommy');console.log(pet); // &#123; type: 'Dog', name: 'Tommy' &#125; 18.Object[key]简写考虑一个验证函数 123456789function validate(values) &#123; if(!values.first) return false; if(!values.last) return false; return true;&#125;console.log(validate(&#123;first:'Bruce',last:'Wayne'&#125;)); // true 假设当需要不同域和规则来验证，能否编写一个通用函数在运行时确认？ 12345678910111213141516171819202122232425// 对象验证规则const schema = &#123; first: &#123; required:true &#125;, last: &#123; required:true &#125;&#125;// 通用验证函数const validate = (schema, values) =&gt; &#123; for(field in schema) &#123; if(schema[field].required) &#123; if(!values[field]) &#123; return false; &#125; &#125; &#125; return true;&#125;console.log(validate(schema, &#123;first:'Bruce'&#125;)); // falseconsole.log(validate(schema, &#123;first:'Bruce',last:'Wayne'&#125;)); // true 现在可以有适用于各种情况的验证函数，不需要为了每个而编写自定义验证函数了 19.双重非位运算简写有一个有效用例用于双重非运算操作符。可以用来代替Math.floor()，其优势在于运行更快，可以阅读此文章了解更多位运算。 1Math.floor(4.9) === 4 //true 简写 1~~4.9 === 4 //true]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
</search>